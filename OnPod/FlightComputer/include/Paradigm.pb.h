// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Paradigm.proto

#ifndef PROTOBUF_INCLUDED_Paradigm_2eproto
#define PROTOBUF_INCLUDED_Paradigm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Paradigm_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Paradigm_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Paradigm_2eproto();
class BrakeNodeData;
class BrakeNodeDataDefaultTypeInternal;
extern BrakeNodeDataDefaultTypeInternal _BrakeNodeData_default_instance_;
class DefaultFcToNode;
class DefaultFcToNodeDefaultTypeInternal;
extern DefaultFcToNodeDefaultTypeInternal _DefaultFcToNode_default_instance_;
class DtsNodeToFc;
class DtsNodeToFcDefaultTypeInternal;
extern DtsNodeToFcDefaultTypeInternal _DtsNodeToFc_default_instance_;
class FcToBrakeNode;
class FcToBrakeNodeDefaultTypeInternal;
extern FcToBrakeNodeDefaultTypeInternal _FcToBrakeNode_default_instance_;
class PodCommand;
class PodCommandDefaultTypeInternal;
extern PodCommandDefaultTypeInternal _PodCommand_default_instance_;
class RearNodeToFc;
class RearNodeToFcDefaultTypeInternal;
extern RearNodeToFcDefaultTypeInternal _RearNodeToFc_default_instance_;
class Telemetry;
class TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
class flightConfig;
class flightConfigDefaultTypeInternal;
extern flightConfigDefaultTypeInternal _flightConfig_default_instance_;
namespace google {
namespace protobuf {
template<> ::BrakeNodeData* Arena::CreateMaybeMessage<::BrakeNodeData>(Arena*);
template<> ::DefaultFcToNode* Arena::CreateMaybeMessage<::DefaultFcToNode>(Arena*);
template<> ::DtsNodeToFc* Arena::CreateMaybeMessage<::DtsNodeToFc>(Arena*);
template<> ::FcToBrakeNode* Arena::CreateMaybeMessage<::FcToBrakeNode>(Arena*);
template<> ::PodCommand* Arena::CreateMaybeMessage<::PodCommand>(Arena*);
template<> ::RearNodeToFc* Arena::CreateMaybeMessage<::RearNodeToFc>(Arena*);
template<> ::Telemetry* Arena::CreateMaybeMessage<::Telemetry>(Arena*);
template<> ::flightConfig* Arena::CreateMaybeMessage<::flightConfig>(Arena*);
}  // namespace protobuf
}  // namespace google

enum BrakeNodeStates {
  bnsBooting = 0,
  bnsStandby = 1,
  bnsArming = 2,
  bnsArmed = 3,
  bnsFlight = 4,
  bnsBraking = 5,
  bnsVenting = 6,
  bnsRetrieval = 7,
  bnsError = 8,
  bnsSolenoidControl = 9
};
bool BrakeNodeStates_IsValid(int value);
const BrakeNodeStates BrakeNodeStates_MIN = bnsBooting;
const BrakeNodeStates BrakeNodeStates_MAX = bnsSolenoidControl;
const int BrakeNodeStates_ARRAYSIZE = BrakeNodeStates_MAX + 1;

const ::google::protobuf::EnumDescriptor* BrakeNodeStates_descriptor();
inline const ::std::string& BrakeNodeStates_Name(BrakeNodeStates value) {
  return ::google::protobuf::internal::NameOfEnum(
    BrakeNodeStates_descriptor(), value);
}
inline bool BrakeNodeStates_Parse(
    const ::std::string& name, BrakeNodeStates* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BrakeNodeStates>(
    BrakeNodeStates_descriptor(), name, value);
}
enum PodStates {
  psBooting = 0,
  psStandby = 1,
  psArming = 2,
  psArmed = 3,
  psPreFlight = 4,
  psAcceleration = 5,
  psCoasting = 6,
  psBraking = 7,
  psDisarming = 8,
  psRetrieval = 9,
  psEmergency = 10,
  psShutdown = 11
};
bool PodStates_IsValid(int value);
const PodStates PodStates_MIN = psBooting;
const PodStates PodStates_MAX = psShutdown;
const int PodStates_ARRAYSIZE = PodStates_MAX + 1;

const ::google::protobuf::EnumDescriptor* PodStates_descriptor();
inline const ::std::string& PodStates_Name(PodStates value) {
  return ::google::protobuf::internal::NameOfEnum(
    PodStates_descriptor(), value);
}
inline bool PodStates_Parse(
    const ::std::string& name, PodStates* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PodStates>(
    PodStates_descriptor(), name, value);
}
enum MotorStates {
  msOff = 0,
  msCharging = 1,
  msIdle = 2,
  msEngaged = 3
};
bool MotorStates_IsValid(int value);
const MotorStates MotorStates_MIN = msOff;
const MotorStates MotorStates_MAX = msEngaged;
const int MotorStates_ARRAYSIZE = MotorStates_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotorStates_descriptor();
inline const ::std::string& MotorStates_Name(MotorStates value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotorStates_descriptor(), value);
}
inline bool MotorStates_Parse(
    const ::std::string& name, MotorStates* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotorStates>(
    MotorStates_descriptor(), name, value);
}
enum ControlsInterfaceStates {
  ciArm = 0,
  ciFlight = 1,
  ciEmergencyStop = 2
};
bool ControlsInterfaceStates_IsValid(int value);
const ControlsInterfaceStates ControlsInterfaceStates_MIN = ciArm;
const ControlsInterfaceStates ControlsInterfaceStates_MAX = ciEmergencyStop;
const int ControlsInterfaceStates_ARRAYSIZE = ControlsInterfaceStates_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlsInterfaceStates_descriptor();
inline const ::std::string& ControlsInterfaceStates_Name(ControlsInterfaceStates value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlsInterfaceStates_descriptor(), value);
}
inline bool ControlsInterfaceStates_Parse(
    const ::std::string& name, ControlsInterfaceStates* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlsInterfaceStates>(
    ControlsInterfaceStates_descriptor(), name, value);
}
enum InverterStates {
  iConnected = 0
};
bool InverterStates_IsValid(int value);
const InverterStates InverterStates_MIN = iConnected;
const InverterStates InverterStates_MAX = iConnected;
const int InverterStates_ARRAYSIZE = InverterStates_MAX + 1;

const ::google::protobuf::EnumDescriptor* InverterStates_descriptor();
inline const ::std::string& InverterStates_Name(InverterStates value) {
  return ::google::protobuf::internal::NameOfEnum(
    InverterStates_descriptor(), value);
}
inline bool InverterStates_Parse(
    const ::std::string& name, InverterStates* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InverterStates>(
    InverterStates_descriptor(), name, value);
}
enum BatteryManagementStates {
  bmsNominal = 0
};
bool BatteryManagementStates_IsValid(int value);
const BatteryManagementStates BatteryManagementStates_MIN = bmsNominal;
const BatteryManagementStates BatteryManagementStates_MAX = bmsNominal;
const int BatteryManagementStates_ARRAYSIZE = BatteryManagementStates_MAX + 1;

const ::google::protobuf::EnumDescriptor* BatteryManagementStates_descriptor();
inline const ::std::string& BatteryManagementStates_Name(BatteryManagementStates value) {
  return ::google::protobuf::internal::NameOfEnum(
    BatteryManagementStates_descriptor(), value);
}
inline bool BatteryManagementStates_Parse(
    const ::std::string& name, BatteryManagementStates* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatteryManagementStates>(
    BatteryManagementStates_descriptor(), name, value);
}
enum RearNodeStates {
  rnBooting = 0,
  rnNominal = 1
};
bool RearNodeStates_IsValid(int value);
const RearNodeStates RearNodeStates_MIN = rnBooting;
const RearNodeStates RearNodeStates_MAX = rnNominal;
const int RearNodeStates_ARRAYSIZE = RearNodeStates_MAX + 1;

const ::google::protobuf::EnumDescriptor* RearNodeStates_descriptor();
inline const ::std::string& RearNodeStates_Name(RearNodeStates value) {
  return ::google::protobuf::internal::NameOfEnum(
    RearNodeStates_descriptor(), value);
}
inline bool RearNodeStates_Parse(
    const ::std::string& name, RearNodeStates* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RearNodeStates>(
    RearNodeStates_descriptor(), name, value);
}
enum LvdcNodeStates {
  lvdcBooting = 0
};
bool LvdcNodeStates_IsValid(int value);
const LvdcNodeStates LvdcNodeStates_MIN = lvdcBooting;
const LvdcNodeStates LvdcNodeStates_MAX = lvdcBooting;
const int LvdcNodeStates_ARRAYSIZE = LvdcNodeStates_MAX + 1;

const ::google::protobuf::EnumDescriptor* LvdcNodeStates_descriptor();
inline const ::std::string& LvdcNodeStates_Name(LvdcNodeStates value) {
  return ::google::protobuf::internal::NameOfEnum(
    LvdcNodeStates_descriptor(), value);
}
inline bool LvdcNodeStates_Parse(
    const ::std::string& name, LvdcNodeStates* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LvdcNodeStates>(
    LvdcNodeStates_descriptor(), name, value);
}
// ===================================================================

class BrakeNodeData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrakeNodeData) */ {
 public:
  BrakeNodeData();
  virtual ~BrakeNodeData();

  BrakeNodeData(const BrakeNodeData& from);

  inline BrakeNodeData& operator=(const BrakeNodeData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrakeNodeData(BrakeNodeData&& from) noexcept
    : BrakeNodeData() {
    *this = ::std::move(from);
  }

  inline BrakeNodeData& operator=(BrakeNodeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BrakeNodeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrakeNodeData* internal_default_instance() {
    return reinterpret_cast<const BrakeNodeData*>(
               &_BrakeNodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BrakeNodeData* other);
  friend void swap(BrakeNodeData& a, BrakeNodeData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrakeNodeData* New() const final {
    return CreateMaybeMessage<BrakeNodeData>(nullptr);
  }

  BrakeNodeData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BrakeNodeData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BrakeNodeData& from);
  void MergeFrom(const BrakeNodeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrakeNodeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bool sol1 = 2;
  bool has_sol1() const;
  void clear_sol1();
  static const int kSol1FieldNumber = 2;
  bool sol1() const;
  void set_sol1(bool value);

  // optional bool sol2 = 3;
  bool has_sol2() const;
  void clear_sol2();
  static const int kSol2FieldNumber = 3;
  bool sol2() const;
  void set_sol2(bool value);

  // optional bool sol3 = 4;
  bool has_sol3() const;
  void clear_sol3();
  static const int kSol3FieldNumber = 4;
  bool sol3() const;
  void set_sol3(bool value);

  // optional bool sol4 = 5;
  bool has_sol4() const;
  void clear_sol4();
  static const int kSol4FieldNumber = 5;
  bool sol4() const;
  void set_sol4(bool value);

  // optional bool sol5 = 6;
  bool has_sol5() const;
  void clear_sol5();
  static const int kSol5FieldNumber = 6;
  bool sol5() const;
  void set_sol5(bool value);

  // optional bool sol6 = 7;
  bool has_sol6() const;
  void clear_sol6();
  static const int kSol6FieldNumber = 7;
  bool sol6() const;
  void set_sol6(bool value);

  // optional int32 hp = 8;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 8;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // optional int32 lp1 = 9;
  bool has_lp1() const;
  void clear_lp1();
  static const int kLp1FieldNumber = 9;
  ::google::protobuf::int32 lp1() const;
  void set_lp1(::google::protobuf::int32 value);

  // optional int32 lp2 = 10;
  bool has_lp2() const;
  void clear_lp2();
  static const int kLp2FieldNumber = 10;
  ::google::protobuf::int32 lp2() const;
  void set_lp2(::google::protobuf::int32 value);

  // optional int32 lp3 = 11;
  bool has_lp3() const;
  void clear_lp3();
  static const int kLp3FieldNumber = 11;
  ::google::protobuf::int32 lp3() const;
  void set_lp3(::google::protobuf::int32 value);

  // optional int32 lp4 = 12;
  bool has_lp4() const;
  void clear_lp4();
  static const int kLp4FieldNumber = 12;
  ::google::protobuf::int32 lp4() const;
  void set_lp4(::google::protobuf::int32 value);

  // optional int32 temp = 13;
  bool has_temp() const;
  void clear_temp();
  static const int kTempFieldNumber = 13;
  ::google::protobuf::int32 temp() const;
  void set_temp(::google::protobuf::int32 value);

  // optional .BrakeNodeStates state = 14;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 14;
  ::BrakeNodeStates state() const;
  void set_state(::BrakeNodeStates value);

  // @@protoc_insertion_point(class_scope:BrakeNodeData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  bool sol1_;
  bool sol2_;
  bool sol3_;
  bool sol4_;
  bool sol5_;
  bool sol6_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 lp1_;
  ::google::protobuf::int32 lp2_;
  ::google::protobuf::int32 lp3_;
  ::google::protobuf::int32 lp4_;
  ::google::protobuf::int32 temp_;
  int state_;
  friend struct ::TableStruct_Paradigm_2eproto;
};
// -------------------------------------------------------------------

class PodCommand :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PodCommand) */ {
 public:
  PodCommand();
  virtual ~PodCommand();

  PodCommand(const PodCommand& from);

  inline PodCommand& operator=(const PodCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PodCommand(PodCommand&& from) noexcept
    : PodCommand() {
    *this = ::std::move(from);
  }

  inline PodCommand& operator=(PodCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PodCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PodCommand* internal_default_instance() {
    return reinterpret_cast<const PodCommand*>(
               &_PodCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PodCommand* other);
  friend void swap(PodCommand& a, PodCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PodCommand* New() const final {
    return CreateMaybeMessage<PodCommand>(nullptr);
  }

  PodCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PodCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PodCommand& from);
  void MergeFrom(const PodCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PodCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ControlsInterfaceStates controlsInterfaceState = 1;
  bool has_controlsinterfacestate() const;
  void clear_controlsinterfacestate();
  static const int kControlsInterfaceStateFieldNumber = 1;
  ::ControlsInterfaceStates controlsinterfacestate() const;
  void set_controlsinterfacestate(::ControlsInterfaceStates value);

  // optional .PodStates manualPodState = 2;
  bool has_manualpodstate() const;
  void clear_manualpodstate();
  static const int kManualPodStateFieldNumber = 2;
  ::PodStates manualpodstate() const;
  void set_manualpodstate(::PodStates value);

  // optional .BrakeNodeStates manualBrakeNodeState = 3;
  bool has_manualbrakenodestate() const;
  void clear_manualbrakenodestate();
  static const int kManualBrakeNodeStateFieldNumber = 3;
  ::BrakeNodeStates manualbrakenodestate() const;
  void set_manualbrakenodestate(::BrakeNodeStates value);

  // optional .MotorStates manualMotorState = 4;
  bool has_manualmotorstate() const;
  void clear_manualmotorstate();
  static const int kManualMotorStateFieldNumber = 4;
  ::MotorStates manualmotorstate() const;
  void set_manualmotorstate(::MotorStates value);

  // optional .LvdcNodeStates manualLvdcNodeState = 5;
  bool has_manuallvdcnodestate() const;
  void clear_manuallvdcnodestate();
  static const int kManualLvdcNodeStateFieldNumber = 5;
  ::LvdcNodeStates manuallvdcnodestate() const;
  void set_manuallvdcnodestate(::LvdcNodeStates value);

  // optional bool automaticStateTransitions = 6;
  bool has_automaticstatetransitions() const;
  void clear_automaticstatetransitions();
  static const int kAutomaticStateTransitionsFieldNumber = 6;
  bool automaticstatetransitions() const;
  void set_automaticstatetransitions(bool value);

  // @@protoc_insertion_point(class_scope:PodCommand)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int controlsinterfacestate_;
  int manualpodstate_;
  int manualbrakenodestate_;
  int manualmotorstate_;
  int manuallvdcnodestate_;
  bool automaticstatetransitions_;
  friend struct ::TableStruct_Paradigm_2eproto;
};
// -------------------------------------------------------------------

class Telemetry :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Telemetry) */ {
 public:
  Telemetry();
  virtual ~Telemetry();

  Telemetry(const Telemetry& from);

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Telemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Telemetry* other);
  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Telemetry* New() const final {
    return CreateMaybeMessage<Telemetry>(nullptr);
  }

  Telemetry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Telemetry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Telemetry& from);
  void MergeFrom(const Telemetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Telemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 heartbeatFlags = 8;
  int heartbeatflags_size() const;
  void clear_heartbeatflags();
  static const int kHeartbeatFlagsFieldNumber = 8;
  ::google::protobuf::int32 heartbeatflags(int index) const;
  void set_heartbeatflags(int index, ::google::protobuf::int32 value);
  void add_heartbeatflags(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      heartbeatflags() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_heartbeatflags();

  // repeated int32 hvBatteryCellTemperatures = 28;
  int hvbatterycelltemperatures_size() const;
  void clear_hvbatterycelltemperatures();
  static const int kHvBatteryCellTemperaturesFieldNumber = 28;
  ::google::protobuf::int32 hvbatterycelltemperatures(int index) const;
  void set_hvbatterycelltemperatures(int index, ::google::protobuf::int32 value);
  void add_hvbatterycelltemperatures(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hvbatterycelltemperatures() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hvbatterycelltemperatures();

  // repeated int32 heartbeatValues = 71;
  int heartbeatvalues_size() const;
  void clear_heartbeatvalues();
  static const int kHeartbeatValuesFieldNumber = 71;
  ::google::protobuf::int32 heartbeatvalues(int index) const;
  void set_heartbeatvalues(int index, ::google::protobuf::int32 value);
  void add_heartbeatvalues(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      heartbeatvalues() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_heartbeatvalues();

  // optional .PodStates podState = 1;
  bool has_podstate() const;
  void clear_podstate();
  static const int kPodStateFieldNumber = 1;
  ::PodStates podstate() const;
  void set_podstate(::PodStates value);

  // optional .BrakeNodeStates breakNodeState = 2;
  bool has_breaknodestate() const;
  void clear_breaknodestate();
  static const int kBreakNodeStateFieldNumber = 2;
  ::BrakeNodeStates breaknodestate() const;
  void set_breaknodestate(::BrakeNodeStates value);

  // optional .MotorStates motorState = 3;
  bool has_motorstate() const;
  void clear_motorstate();
  static const int kMotorStateFieldNumber = 3;
  ::MotorStates motorstate() const;
  void set_motorstate(::MotorStates value);

  // optional .ControlsInterfaceStates controlsInterfaceState = 4;
  bool has_controlsinterfacestate() const;
  void clear_controlsinterfacestate();
  static const int kControlsInterfaceStateFieldNumber = 4;
  ::ControlsInterfaceStates controlsinterfacestate() const;
  void set_controlsinterfacestate(::ControlsInterfaceStates value);

  // optional .InverterStates inverterState = 5;
  bool has_inverterstate() const;
  void clear_inverterstate();
  static const int kInverterStateFieldNumber = 5;
  ::InverterStates inverterstate() const;
  void set_inverterstate(::InverterStates value);

  // optional int32 missionTime = 6;
  bool has_missiontime() const;
  void clear_missiontime();
  static const int kMissionTimeFieldNumber = 6;
  ::google::protobuf::int32 missiontime() const;
  void set_missiontime(::google::protobuf::int32 value);

  // optional int32 flightTime = 7;
  bool has_flighttime() const;
  void clear_flighttime();
  static const int kFlightTimeFieldNumber = 7;
  ::google::protobuf::int32 flighttime() const;
  void set_flighttime(::google::protobuf::int32 value);

  // optional int32 podPosition = 9;
  bool has_podposition() const;
  void clear_podposition();
  static const int kPodPositionFieldNumber = 9;
  ::google::protobuf::int32 podposition() const;
  void set_podposition(::google::protobuf::int32 value);

  // optional int32 podVelocity = 10;
  bool has_podvelocity() const;
  void clear_podvelocity();
  static const int kPodVelocityFieldNumber = 10;
  ::google::protobuf::int32 podvelocity() const;
  void set_podvelocity(::google::protobuf::int32 value);

  // optional int32 podAccelerationX = 11;
  bool has_podaccelerationx() const;
  void clear_podaccelerationx();
  static const int kPodAccelerationXFieldNumber = 11;
  ::google::protobuf::int32 podaccelerationx() const;
  void set_podaccelerationx(::google::protobuf::int32 value);

  // optional int32 podAccelerationY = 12;
  bool has_podaccelerationy() const;
  void clear_podaccelerationy();
  static const int kPodAccelerationYFieldNumber = 12;
  ::google::protobuf::int32 podaccelerationy() const;
  void set_podaccelerationy(::google::protobuf::int32 value);

  // optional int32 podAccelerationZ = 13;
  bool has_podaccelerationz() const;
  void clear_podaccelerationz();
  static const int kPodAccelerationZFieldNumber = 13;
  ::google::protobuf::int32 podaccelerationz() const;
  void set_podaccelerationz(::google::protobuf::int32 value);

  // optional int32 imuVelocity = 14;
  bool has_imuvelocity() const;
  void clear_imuvelocity();
  static const int kImuVelocityFieldNumber = 14;
  ::google::protobuf::int32 imuvelocity() const;
  void set_imuvelocity(::google::protobuf::int32 value);

  // optional int32 imuAccelerationX = 15;
  bool has_imuaccelerationx() const;
  void clear_imuaccelerationx();
  static const int kImuAccelerationXFieldNumber = 15;
  ::google::protobuf::int32 imuaccelerationx() const;
  void set_imuaccelerationx(::google::protobuf::int32 value);

  // optional int32 tachometerVelocity = 16;
  bool has_tachometervelocity() const;
  void clear_tachometervelocity();
  static const int kTachometerVelocityFieldNumber = 16;
  ::google::protobuf::int32 tachometervelocity() const;
  void set_tachometervelocity(::google::protobuf::int32 value);

  // optional int32 resolverVelocity = 17;
  bool has_resolvervelocity() const;
  void clear_resolvervelocity();
  static const int kResolverVelocityFieldNumber = 17;
  ::google::protobuf::int32 resolvervelocity() const;
  void set_resolvervelocity(::google::protobuf::int32 value);

  // optional int32 inverterTemperature1 = 18;
  bool has_invertertemperature1() const;
  void clear_invertertemperature1();
  static const int kInverterTemperature1FieldNumber = 18;
  ::google::protobuf::int32 invertertemperature1() const;
  void set_invertertemperature1(::google::protobuf::int32 value);

  // optional int32 inverterTemperature2 = 19;
  bool has_invertertemperature2() const;
  void clear_invertertemperature2();
  static const int kInverterTemperature2FieldNumber = 19;
  ::google::protobuf::int32 invertertemperature2() const;
  void set_invertertemperature2(::google::protobuf::int32 value);

  // optional int32 inverterTemperature3 = 20;
  bool has_invertertemperature3() const;
  void clear_invertertemperature3();
  static const int kInverterTemperature3FieldNumber = 20;
  ::google::protobuf::int32 invertertemperature3() const;
  void set_invertertemperature3(::google::protobuf::int32 value);

  // optional int32 motorCurrent = 21;
  bool has_motorcurrent() const;
  void clear_motorcurrent();
  static const int kMotorCurrentFieldNumber = 21;
  ::google::protobuf::int32 motorcurrent() const;
  void set_motorcurrent(::google::protobuf::int32 value);

  // optional int32 motorVoltage = 22;
  bool has_motorvoltage() const;
  void clear_motorvoltage();
  static const int kMotorVoltageFieldNumber = 22;
  ::google::protobuf::int32 motorvoltage() const;
  void set_motorvoltage(::google::protobuf::int32 value);

  // optional int32 inverterVoltages = 23;
  bool has_invertervoltages() const;
  void clear_invertervoltages();
  static const int kInverterVoltagesFieldNumber = 23;
  ::google::protobuf::int32 invertervoltages() const;
  void set_invertervoltages(::google::protobuf::int32 value);

  // optional int32 inverterCurrents = 24;
  bool has_invertercurrents() const;
  void clear_invertercurrents();
  static const int kInverterCurrentsFieldNumber = 24;
  ::google::protobuf::int32 invertercurrents() const;
  void set_invertercurrents(::google::protobuf::int32 value);

  // optional .BatteryManagementStates batteryManagementState = 25;
  bool has_batterymanagementstate() const;
  void clear_batterymanagementstate();
  static const int kBatteryManagementStateFieldNumber = 25;
  ::BatteryManagementStates batterymanagementstate() const;
  void set_batterymanagementstate(::BatteryManagementStates value);

  // optional float hvBatteryPackVoltage = 26;
  bool has_hvbatterypackvoltage() const;
  void clear_hvbatterypackvoltage();
  static const int kHvBatteryPackVoltageFieldNumber = 26;
  float hvbatterypackvoltage() const;
  void set_hvbatterypackvoltage(float value);

  // optional float hvBatteryPackCurrent = 27;
  bool has_hvbatterypackcurrent() const;
  void clear_hvbatterypackcurrent();
  static const int kHvBatteryPackCurrentFieldNumber = 27;
  float hvbatterypackcurrent() const;
  void set_hvbatterypackcurrent(float value);

  // optional float hvBatteryPackMinimumCellVoltage = 29;
  bool has_hvbatterypackminimumcellvoltage() const;
  void clear_hvbatterypackminimumcellvoltage();
  static const int kHvBatteryPackMinimumCellVoltageFieldNumber = 29;
  float hvbatterypackminimumcellvoltage() const;
  void set_hvbatterypackminimumcellvoltage(float value);

  // optional float hvBatteryPackMaxCellVoltage = 30;
  bool has_hvbatterypackmaxcellvoltage() const;
  void clear_hvbatterypackmaxcellvoltage();
  static const int kHvBatteryPackMaxCellVoltageFieldNumber = 30;
  float hvbatterypackmaxcellvoltage() const;
  void set_hvbatterypackmaxcellvoltage(float value);

  // optional .PodStates breakNodePerceivedPodState = 31;
  bool has_breaknodeperceivedpodstate() const;
  void clear_breaknodeperceivedpodstate();
  static const int kBreakNodePerceivedPodStateFieldNumber = 31;
  ::PodStates breaknodeperceivedpodstate() const;
  void set_breaknodeperceivedpodstate(::PodStates value);

  // optional bool solenoid1 = 32;
  bool has_solenoid1() const;
  void clear_solenoid1();
  static const int kSolenoid1FieldNumber = 32;
  bool solenoid1() const;
  void set_solenoid1(bool value);

  // optional bool solenoid2 = 33;
  bool has_solenoid2() const;
  void clear_solenoid2();
  static const int kSolenoid2FieldNumber = 33;
  bool solenoid2() const;
  void set_solenoid2(bool value);

  // optional bool solenoid3 = 34;
  bool has_solenoid3() const;
  void clear_solenoid3();
  static const int kSolenoid3FieldNumber = 34;
  bool solenoid3() const;
  void set_solenoid3(bool value);

  // optional bool solenoid4 = 35;
  bool has_solenoid4() const;
  void clear_solenoid4();
  static const int kSolenoid4FieldNumber = 35;
  bool solenoid4() const;
  void set_solenoid4(bool value);

  // optional bool solenoid5 = 36;
  bool has_solenoid5() const;
  void clear_solenoid5();
  static const int kSolenoid5FieldNumber = 36;
  bool solenoid5() const;
  void set_solenoid5(bool value);

  // optional bool solenoid6 = 37;
  bool has_solenoid6() const;
  void clear_solenoid6();
  static const int kSolenoid6FieldNumber = 37;
  bool solenoid6() const;
  void set_solenoid6(bool value);

  // optional float highPressure = 38;
  bool has_highpressure() const;
  void clear_highpressure();
  static const int kHighPressureFieldNumber = 38;
  float highpressure() const;
  void set_highpressure(float value);

  // optional float lowPressure1 = 39;
  bool has_lowpressure1() const;
  void clear_lowpressure1();
  static const int kLowPressure1FieldNumber = 39;
  float lowpressure1() const;
  void set_lowpressure1(float value);

  // optional float lowPressure2 = 40;
  bool has_lowpressure2() const;
  void clear_lowpressure2();
  static const int kLowPressure2FieldNumber = 40;
  float lowpressure2() const;
  void set_lowpressure2(float value);

  // optional float lowPressure3 = 41;
  bool has_lowpressure3() const;
  void clear_lowpressure3();
  static const int kLowPressure3FieldNumber = 41;
  float lowpressure3() const;
  void set_lowpressure3(float value);

  // optional float lowPressure4 = 42;
  bool has_lowpressure4() const;
  void clear_lowpressure4();
  static const int kLowPressure4FieldNumber = 42;
  float lowpressure4() const;
  void set_lowpressure4(float value);

  // optional float pressureVesselTemperature = 43;
  bool has_pressurevesseltemperature() const;
  void clear_pressurevesseltemperature();
  static const int kPressureVesselTemperatureFieldNumber = 43;
  float pressurevesseltemperature() const;
  void set_pressurevesseltemperature(float value);

  // optional int32 electronicsEnclosurePressure = 44;
  bool has_electronicsenclosurepressure() const;
  void clear_electronicsenclosurepressure();
  static const int kElectronicsEnclosurePressureFieldNumber = 44;
  ::google::protobuf::int32 electronicsenclosurepressure() const;
  void set_electronicsenclosurepressure(::google::protobuf::int32 value);

  // optional int32 railDisplacementX = 45;
  bool has_raildisplacementx() const;
  void clear_raildisplacementx();
  static const int kRailDisplacementXFieldNumber = 45;
  ::google::protobuf::int32 raildisplacementx() const;
  void set_raildisplacementx(::google::protobuf::int32 value);

  // optional int32 railDisplacementY = 46;
  bool has_raildisplacementy() const;
  void clear_raildisplacementy();
  static const int kRailDisplacementYFieldNumber = 46;
  ::google::protobuf::int32 raildisplacementy() const;
  void set_raildisplacementy(::google::protobuf::int32 value);

  // optional int32 tubePressure = 48;
  bool has_tubepressure() const;
  void clear_tubepressure();
  static const int kTubePressureFieldNumber = 48;
  ::google::protobuf::int32 tubepressure() const;
  void set_tubepressure(::google::protobuf::int32 value);

  // optional int32 coolantPressure1 = 49;
  bool has_coolantpressure1() const;
  void clear_coolantpressure1();
  static const int kCoolantPressure1FieldNumber = 49;
  ::google::protobuf::int32 coolantpressure1() const;
  void set_coolantpressure1(::google::protobuf::int32 value);

  // optional int32 coolantPressure2 = 50;
  bool has_coolantpressure2() const;
  void clear_coolantpressure2();
  static const int kCoolantPressure2FieldNumber = 50;
  ::google::protobuf::int32 coolantpressure2() const;
  void set_coolantpressure2(::google::protobuf::int32 value);

  // optional int32 coolantPressure3 = 51;
  bool has_coolantpressure3() const;
  void clear_coolantpressure3();
  static const int kCoolantPressure3FieldNumber = 51;
  ::google::protobuf::int32 coolantpressure3() const;
  void set_coolantpressure3(::google::protobuf::int32 value);

  // optional int32 coolantTemperature = 52;
  bool has_coolanttemperature() const;
  void clear_coolanttemperature();
  static const int kCoolantTemperatureFieldNumber = 52;
  ::google::protobuf::int32 coolanttemperature() const;
  void set_coolanttemperature(::google::protobuf::int32 value);

  // optional float railTemperature = 53;
  bool has_railtemperature() const;
  void clear_railtemperature();
  static const int kRailTemperatureFieldNumber = 53;
  float railtemperature() const;
  void set_railtemperature(float value);

  // optional .LvdcNodeStates lvdcNodeState = 54;
  bool has_lvdcnodestate() const;
  void clear_lvdcnodestate();
  static const int kLvdcNodeStateFieldNumber = 54;
  ::LvdcNodeStates lvdcnodestate() const;
  void set_lvdcnodestate(::LvdcNodeStates value);

  // optional int32 pack1Voltage = 55;
  bool has_pack1voltage() const;
  void clear_pack1voltage();
  static const int kPack1VoltageFieldNumber = 55;
  ::google::protobuf::int32 pack1voltage() const;
  void set_pack1voltage(::google::protobuf::int32 value);

  // optional int32 pack2Voltage = 56;
  bool has_pack2voltage() const;
  void clear_pack2voltage();
  static const int kPack2VoltageFieldNumber = 56;
  ::google::protobuf::int32 pack2voltage() const;
  void set_pack2voltage(::google::protobuf::int32 value);

  // optional int32 pack1Current = 57;
  bool has_pack1current() const;
  void clear_pack1current();
  static const int kPack1CurrentFieldNumber = 57;
  ::google::protobuf::int32 pack1current() const;
  void set_pack1current(::google::protobuf::int32 value);

  // optional int32 pack2Current = 58;
  bool has_pack2current() const;
  void clear_pack2current();
  static const int kPack2CurrentFieldNumber = 58;
  ::google::protobuf::int32 pack2current() const;
  void set_pack2current(::google::protobuf::int32 value);

  // optional int32 rail1Voltage = 59;
  bool has_rail1voltage() const;
  void clear_rail1voltage();
  static const int kRail1VoltageFieldNumber = 59;
  ::google::protobuf::int32 rail1voltage() const;
  void set_rail1voltage(::google::protobuf::int32 value);

  // optional int32 rail2Voltage = 60;
  bool has_rail2voltage() const;
  void clear_rail2voltage();
  static const int kRail2VoltageFieldNumber = 60;
  ::google::protobuf::int32 rail2voltage() const;
  void set_rail2voltage(::google::protobuf::int32 value);

  // optional int32 rail3Voltage = 61;
  bool has_rail3voltage() const;
  void clear_rail3voltage();
  static const int kRail3VoltageFieldNumber = 61;
  ::google::protobuf::int32 rail3voltage() const;
  void set_rail3voltage(::google::protobuf::int32 value);

  // optional int32 rail4Voltage = 62;
  bool has_rail4voltage() const;
  void clear_rail4voltage();
  static const int kRail4VoltageFieldNumber = 62;
  ::google::protobuf::int32 rail4voltage() const;
  void set_rail4voltage(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor1 = 63;
  bool has_railcurrentsensor1() const;
  void clear_railcurrentsensor1();
  static const int kRailCurrentSensor1FieldNumber = 63;
  ::google::protobuf::int32 railcurrentsensor1() const;
  void set_railcurrentsensor1(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor2 = 64;
  bool has_railcurrentsensor2() const;
  void clear_railcurrentsensor2();
  static const int kRailCurrentSensor2FieldNumber = 64;
  ::google::protobuf::int32 railcurrentsensor2() const;
  void set_railcurrentsensor2(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor3 = 65;
  bool has_railcurrentsensor3() const;
  void clear_railcurrentsensor3();
  static const int kRailCurrentSensor3FieldNumber = 65;
  ::google::protobuf::int32 railcurrentsensor3() const;
  void set_railcurrentsensor3(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor4 = 66;
  bool has_railcurrentsensor4() const;
  void clear_railcurrentsensor4();
  static const int kRailCurrentSensor4FieldNumber = 66;
  ::google::protobuf::int32 railcurrentsensor4() const;
  void set_railcurrentsensor4(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor5 = 67;
  bool has_railcurrentsensor5() const;
  void clear_railcurrentsensor5();
  static const int kRailCurrentSensor5FieldNumber = 67;
  ::google::protobuf::int32 railcurrentsensor5() const;
  void set_railcurrentsensor5(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor6 = 68;
  bool has_railcurrentsensor6() const;
  void clear_railcurrentsensor6();
  static const int kRailCurrentSensor6FieldNumber = 68;
  ::google::protobuf::int32 railcurrentsensor6() const;
  void set_railcurrentsensor6(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor7 = 69;
  bool has_railcurrentsensor7() const;
  void clear_railcurrentsensor7();
  static const int kRailCurrentSensor7FieldNumber = 69;
  ::google::protobuf::int32 railcurrentsensor7() const;
  void set_railcurrentsensor7(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor8 = 70;
  bool has_railcurrentsensor8() const;
  void clear_railcurrentsensor8();
  static const int kRailCurrentSensor8FieldNumber = 70;
  ::google::protobuf::int32 railcurrentsensor8() const;
  void set_railcurrentsensor8(::google::protobuf::int32 value);

  // optional int32 railVoltageFlag = 72;
  bool has_railvoltageflag() const;
  void clear_railvoltageflag();
  static const int kRailVoltageFlagFieldNumber = 72;
  ::google::protobuf::int32 railvoltageflag() const;
  void set_railvoltageflag(::google::protobuf::int32 value);

  // optional int32 railCurrentFlag = 73;
  bool has_railcurrentflag() const;
  void clear_railcurrentflag();
  static const int kRailCurrentFlagFieldNumber = 73;
  ::google::protobuf::int32 railcurrentflag() const;
  void set_railcurrentflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Telemetry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > heartbeatflags_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hvbatterycelltemperatures_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > heartbeatvalues_;
  int podstate_;
  int breaknodestate_;
  int motorstate_;
  int controlsinterfacestate_;
  int inverterstate_;
  ::google::protobuf::int32 missiontime_;
  ::google::protobuf::int32 flighttime_;
  ::google::protobuf::int32 podposition_;
  ::google::protobuf::int32 podvelocity_;
  ::google::protobuf::int32 podaccelerationx_;
  ::google::protobuf::int32 podaccelerationy_;
  ::google::protobuf::int32 podaccelerationz_;
  ::google::protobuf::int32 imuvelocity_;
  ::google::protobuf::int32 imuaccelerationx_;
  ::google::protobuf::int32 tachometervelocity_;
  ::google::protobuf::int32 resolvervelocity_;
  ::google::protobuf::int32 invertertemperature1_;
  ::google::protobuf::int32 invertertemperature2_;
  ::google::protobuf::int32 invertertemperature3_;
  ::google::protobuf::int32 motorcurrent_;
  ::google::protobuf::int32 motorvoltage_;
  ::google::protobuf::int32 invertervoltages_;
  ::google::protobuf::int32 invertercurrents_;
  int batterymanagementstate_;
  float hvbatterypackvoltage_;
  float hvbatterypackcurrent_;
  float hvbatterypackminimumcellvoltage_;
  float hvbatterypackmaxcellvoltage_;
  int breaknodeperceivedpodstate_;
  bool solenoid1_;
  bool solenoid2_;
  bool solenoid3_;
  bool solenoid4_;
  bool solenoid5_;
  bool solenoid6_;
  float highpressure_;
  float lowpressure1_;
  float lowpressure2_;
  float lowpressure3_;
  float lowpressure4_;
  float pressurevesseltemperature_;
  ::google::protobuf::int32 electronicsenclosurepressure_;
  ::google::protobuf::int32 raildisplacementx_;
  ::google::protobuf::int32 raildisplacementy_;
  ::google::protobuf::int32 tubepressure_;
  ::google::protobuf::int32 coolantpressure1_;
  ::google::protobuf::int32 coolantpressure2_;
  ::google::protobuf::int32 coolantpressure3_;
  ::google::protobuf::int32 coolanttemperature_;
  float railtemperature_;
  int lvdcnodestate_;
  ::google::protobuf::int32 pack1voltage_;
  ::google::protobuf::int32 pack2voltage_;
  ::google::protobuf::int32 pack1current_;
  ::google::protobuf::int32 pack2current_;
  ::google::protobuf::int32 rail1voltage_;
  ::google::protobuf::int32 rail2voltage_;
  ::google::protobuf::int32 rail3voltage_;
  ::google::protobuf::int32 rail4voltage_;
  ::google::protobuf::int32 railcurrentsensor1_;
  ::google::protobuf::int32 railcurrentsensor2_;
  ::google::protobuf::int32 railcurrentsensor3_;
  ::google::protobuf::int32 railcurrentsensor4_;
  ::google::protobuf::int32 railcurrentsensor5_;
  ::google::protobuf::int32 railcurrentsensor6_;
  ::google::protobuf::int32 railcurrentsensor7_;
  ::google::protobuf::int32 railcurrentsensor8_;
  ::google::protobuf::int32 railvoltageflag_;
  ::google::protobuf::int32 railcurrentflag_;
  friend struct ::TableStruct_Paradigm_2eproto;
};
// -------------------------------------------------------------------

class FcToBrakeNode :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FcToBrakeNode) */ {
 public:
  FcToBrakeNode();
  virtual ~FcToBrakeNode();

  FcToBrakeNode(const FcToBrakeNode& from);

  inline FcToBrakeNode& operator=(const FcToBrakeNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FcToBrakeNode(FcToBrakeNode&& from) noexcept
    : FcToBrakeNode() {
    *this = ::std::move(from);
  }

  inline FcToBrakeNode& operator=(FcToBrakeNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FcToBrakeNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FcToBrakeNode* internal_default_instance() {
    return reinterpret_cast<const FcToBrakeNode*>(
               &_FcToBrakeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FcToBrakeNode* other);
  friend void swap(FcToBrakeNode& a, FcToBrakeNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FcToBrakeNode* New() const final {
    return CreateMaybeMessage<FcToBrakeNode>(nullptr);
  }

  FcToBrakeNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FcToBrakeNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FcToBrakeNode& from);
  void MergeFrom(const FcToBrakeNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FcToBrakeNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 packetNum = 1;
  bool has_packetnum() const;
  void clear_packetnum();
  static const int kPacketNumFieldNumber = 1;
  ::google::protobuf::int32 packetnum() const;
  void set_packetnum(::google::protobuf::int32 value);

  // optional .PodStates podState = 2;
  bool has_podstate() const;
  void clear_podstate();
  static const int kPodStateFieldNumber = 2;
  ::PodStates podstate() const;
  void set_podstate(::PodStates value);

  // optional .BrakeNodeStates manualNodeState = 3;
  bool has_manualnodestate() const;
  void clear_manualnodestate();
  static const int kManualNodeStateFieldNumber = 3;
  ::BrakeNodeStates manualnodestate() const;
  void set_manualnodestate(::BrakeNodeStates value);

  // @@protoc_insertion_point(class_scope:FcToBrakeNode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 packetnum_;
  int podstate_;
  int manualnodestate_;
  friend struct ::TableStruct_Paradigm_2eproto;
};
// -------------------------------------------------------------------

class DtsNodeToFc :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DtsNodeToFc) */ {
 public:
  DtsNodeToFc();
  virtual ~DtsNodeToFc();

  DtsNodeToFc(const DtsNodeToFc& from);

  inline DtsNodeToFc& operator=(const DtsNodeToFc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DtsNodeToFc(DtsNodeToFc&& from) noexcept
    : DtsNodeToFc() {
    *this = ::std::move(from);
  }

  inline DtsNodeToFc& operator=(DtsNodeToFc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DtsNodeToFc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DtsNodeToFc* internal_default_instance() {
    return reinterpret_cast<const DtsNodeToFc*>(
               &_DtsNodeToFc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DtsNodeToFc* other);
  friend void swap(DtsNodeToFc& a, DtsNodeToFc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DtsNodeToFc* New() const final {
    return CreateMaybeMessage<DtsNodeToFc>(nullptr);
  }

  DtsNodeToFc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DtsNodeToFc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DtsNodeToFc& from);
  void MergeFrom(const DtsNodeToFc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DtsNodeToFc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 packetNum = 1 [default = 0];
  bool has_packetnum() const;
  void clear_packetnum();
  static const int kPacketNumFieldNumber = 1;
  ::google::protobuf::int32 packetnum() const;
  void set_packetnum(::google::protobuf::int32 value);

  // required bool brakeSolenoidState = 3 [default = false];
  bool has_brakesolenoidstate() const;
  void clear_brakesolenoidstate();
  static const int kBrakeSolenoidStateFieldNumber = 3;
  bool brakesolenoidstate() const;
  void set_brakesolenoidstate(bool value);

  // required bool ventSolenoidState = 4 [default = false];
  bool has_ventsolenoidstate() const;
  void clear_ventsolenoidstate();
  static const int kVentSolenoidStateFieldNumber = 4;
  bool ventsolenoidstate() const;
  void set_ventsolenoidstate(bool value);

  // required float rotorTemperature = 5 [default = 0];
  bool has_rotortemperature() const;
  void clear_rotortemperature();
  static const int kRotorTemperatureFieldNumber = 5;
  float rotortemperature() const;
  void set_rotortemperature(float value);

  // required float pneumaticTemperature = 6 [default = 0];
  bool has_pneumatictemperature() const;
  void clear_pneumatictemperature();
  static const int kPneumaticTemperatureFieldNumber = 6;
  float pneumatictemperature() const;
  void set_pneumatictemperature(float value);

  // required float tankPressure = 7 [default = 0];
  bool has_tankpressure() const;
  void clear_tankpressure();
  static const int kTankPressureFieldNumber = 7;
  float tankpressure() const;
  void set_tankpressure(float value);

  // required float brakePressure = 8 [default = 0];
  bool has_brakepressure() const;
  void clear_brakepressure();
  static const int kBrakePressureFieldNumber = 8;
  float brakepressure() const;
  void set_brakepressure(float value);

  // required .BrakeNodeStates brakeNodeState = 2 [default = bnsStandby];
  bool has_brakenodestate() const;
  void clear_brakenodestate();
  static const int kBrakeNodeStateFieldNumber = 2;
  ::BrakeNodeStates brakenodestate() const;
  void set_brakenodestate(::BrakeNodeStates value);

  // @@protoc_insertion_point(class_scope:DtsNodeToFc)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 packetnum_;
  bool brakesolenoidstate_;
  bool ventsolenoidstate_;
  float rotortemperature_;
  float pneumatictemperature_;
  float tankpressure_;
  float brakepressure_;
  int brakenodestate_;
  friend struct ::TableStruct_Paradigm_2eproto;
};
// -------------------------------------------------------------------

class RearNodeToFc :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RearNodeToFc) */ {
 public:
  RearNodeToFc();
  virtual ~RearNodeToFc();

  RearNodeToFc(const RearNodeToFc& from);

  inline RearNodeToFc& operator=(const RearNodeToFc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RearNodeToFc(RearNodeToFc&& from) noexcept
    : RearNodeToFc() {
    *this = ::std::move(from);
  }

  inline RearNodeToFc& operator=(RearNodeToFc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RearNodeToFc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RearNodeToFc* internal_default_instance() {
    return reinterpret_cast<const RearNodeToFc*>(
               &_RearNodeToFc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RearNodeToFc* other);
  friend void swap(RearNodeToFc& a, RearNodeToFc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RearNodeToFc* New() const final {
    return CreateMaybeMessage<RearNodeToFc>(nullptr);
  }

  RearNodeToFc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RearNodeToFc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RearNodeToFc& from);
  void MergeFrom(const RearNodeToFc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RearNodeToFc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 packetNum = 1 [default = 0];
  bool has_packetnum() const;
  void clear_packetnum();
  static const int kPacketNumFieldNumber = 1;
  ::google::protobuf::int32 packetnum() const;
  void set_packetnum(::google::protobuf::int32 value);

  // required float tubePressure = 2 [default = 0];
  bool has_tubepressure() const;
  void clear_tubepressure();
  static const int kTubePressureFieldNumber = 2;
  float tubepressure() const;
  void set_tubepressure(float value);

  // required float coolantPressure1 = 3 [default = 0];
  bool has_coolantpressure1() const;
  void clear_coolantpressure1();
  static const int kCoolantPressure1FieldNumber = 3;
  float coolantpressure1() const;
  void set_coolantpressure1(float value);

  // required float coolantPressure2 = 4 [default = 0];
  bool has_coolantpressure2() const;
  void clear_coolantpressure2();
  static const int kCoolantPressure2FieldNumber = 4;
  float coolantpressure2() const;
  void set_coolantpressure2(float value);

  // required float coolantPressure3 = 5 [default = 0];
  bool has_coolantpressure3() const;
  void clear_coolantpressure3();
  static const int kCoolantPressure3FieldNumber = 5;
  float coolantpressure3() const;
  void set_coolantpressure3(float value);

  // required float coolantTemperature = 6 [default = 0];
  bool has_coolanttemperature() const;
  void clear_coolanttemperature();
  static const int kCoolantTemperatureFieldNumber = 6;
  float coolanttemperature() const;
  void set_coolanttemperature(float value);

  // @@protoc_insertion_point(class_scope:RearNodeToFc)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 packetnum_;
  float tubepressure_;
  float coolantpressure1_;
  float coolantpressure2_;
  float coolantpressure3_;
  float coolanttemperature_;
  friend struct ::TableStruct_Paradigm_2eproto;
};
// -------------------------------------------------------------------

class flightConfig :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flightConfig) */ {
 public:
  flightConfig();
  virtual ~flightConfig();

  flightConfig(const flightConfig& from);

  inline flightConfig& operator=(const flightConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  flightConfig(flightConfig&& from) noexcept
    : flightConfig() {
    *this = ::std::move(from);
  }

  inline flightConfig& operator=(flightConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const flightConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flightConfig* internal_default_instance() {
    return reinterpret_cast<const flightConfig*>(
               &_flightConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(flightConfig* other);
  friend void swap(flightConfig& a, flightConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline flightConfig* New() const final {
    return CreateMaybeMessage<flightConfig>(nullptr);
  }

  flightConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<flightConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const flightConfig& from);
  void MergeFrom(const flightConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flightConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string podDriver = 8;
  bool has_poddriver() const;
  void clear_poddriver();
  static const int kPodDriverFieldNumber = 8;
  const ::std::string& poddriver() const;
  void set_poddriver(const ::std::string& value);
  #if LANG_CXX11
  void set_poddriver(::std::string&& value);
  #endif
  void set_poddriver(const char* value);
  void set_poddriver(const char* value, size_t size);
  ::std::string* mutable_poddriver();
  ::std::string* release_poddriver();
  void set_allocated_poddriver(::std::string* poddriver);

  // optional string controlLaptopIpAddr = 9 [default = "192.168.0.103"];
  bool has_controllaptopipaddr() const;
  void clear_controllaptopipaddr();
  static const int kControlLaptopIpAddrFieldNumber = 9;
  const ::std::string& controllaptopipaddr() const;
  void set_controllaptopipaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_controllaptopipaddr(::std::string&& value);
  #endif
  void set_controllaptopipaddr(const char* value);
  void set_controllaptopipaddr(const char* value, size_t size);
  ::std::string* mutable_controllaptopipaddr();
  ::std::string* release_controllaptopipaddr();
  void set_allocated_controllaptopipaddr(::std::string* controllaptopipaddr);

  // optional uint64 maxFlightTime = 2;
  bool has_maxflighttime() const;
  void clear_maxflighttime();
  static const int kMaxFlightTimeFieldNumber = 2;
  ::google::protobuf::uint64 maxflighttime() const;
  void set_maxflighttime(::google::protobuf::uint64 value);

  // optional uint64 motorSpeed = 3;
  bool has_motorspeed() const;
  void clear_motorspeed();
  static const int kMotorSpeedFieldNumber = 3;
  ::google::protobuf::uint64 motorspeed() const;
  void set_motorspeed(::google::protobuf::uint64 value);

  // optional uint64 flightLength = 6;
  bool has_flightlength() const;
  void clear_flightlength();
  static const int kFlightLengthFieldNumber = 6;
  ::google::protobuf::uint64 flightlength() const;
  void set_flightlength(::google::protobuf::uint64 value);

  // optional uint32 retrievalTimeout = 1;
  bool has_retrievaltimeout() const;
  void clear_retrievaltimeout();
  static const int kRetrievalTimeoutFieldNumber = 1;
  ::google::protobuf::uint32 retrievaltimeout() const;
  void set_retrievaltimeout(::google::protobuf::uint32 value);

  // optional int32 heartbeatTimeout = 7 [default = 10000];
  bool has_heartbeattimeout() const;
  void clear_heartbeattimeout();
  static const int kHeartbeatTimeoutFieldNumber = 7;
  ::google::protobuf::int32 heartbeattimeout() const;
  void set_heartbeattimeout(::google::protobuf::int32 value);

  // optional int32 pdsTelemetryPort = 4 [default = 7000];
  bool has_pdstelemetryport() const;
  void clear_pdstelemetryport();
  static const int kPdsTelemetryPortFieldNumber = 4;
  ::google::protobuf::int32 pdstelemetryport() const;
  void set_pdstelemetryport(::google::protobuf::int32 value);

  // optional int32 commandPort = 5 [default = 6000];
  bool has_commandport() const;
  void clear_commandport();
  static const int kCommandPortFieldNumber = 5;
  ::google::protobuf::int32 commandport() const;
  void set_commandport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:flightConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr poddriver_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed<::std::string> _i_give_permission_to_break_this_code_default_controllaptopipaddr_;
  private:
  ::google::protobuf::internal::ArenaStringPtr controllaptopipaddr_;
  ::google::protobuf::uint64 maxflighttime_;
  ::google::protobuf::uint64 motorspeed_;
  ::google::protobuf::uint64 flightlength_;
  ::google::protobuf::uint32 retrievaltimeout_;
  ::google::protobuf::int32 heartbeattimeout_;
  ::google::protobuf::int32 pdstelemetryport_;
  ::google::protobuf::int32 commandport_;
  friend struct ::TableStruct_Paradigm_2eproto;
};
// -------------------------------------------------------------------

class DefaultFcToNode :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DefaultFcToNode) */ {
 public:
  DefaultFcToNode();
  virtual ~DefaultFcToNode();

  DefaultFcToNode(const DefaultFcToNode& from);

  inline DefaultFcToNode& operator=(const DefaultFcToNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DefaultFcToNode(DefaultFcToNode&& from) noexcept
    : DefaultFcToNode() {
    *this = ::std::move(from);
  }

  inline DefaultFcToNode& operator=(DefaultFcToNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DefaultFcToNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefaultFcToNode* internal_default_instance() {
    return reinterpret_cast<const DefaultFcToNode*>(
               &_DefaultFcToNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DefaultFcToNode* other);
  friend void swap(DefaultFcToNode& a, DefaultFcToNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DefaultFcToNode* New() const final {
    return CreateMaybeMessage<DefaultFcToNode>(nullptr);
  }

  DefaultFcToNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DefaultFcToNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DefaultFcToNode& from);
  void MergeFrom(const DefaultFcToNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultFcToNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PodStates podState = 1;
  bool has_podstate() const;
  void clear_podstate();
  static const int kPodStateFieldNumber = 1;
  ::PodStates podstate() const;
  void set_podstate(::PodStates value);

  // @@protoc_insertion_point(class_scope:DefaultFcToNode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int podstate_;
  friend struct ::TableStruct_Paradigm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BrakeNodeData

// required int32 id = 1;
inline bool BrakeNodeData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrakeNodeData::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 BrakeNodeData::id() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.id)
  return id_;
}
inline void BrakeNodeData::set_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.id)
}

// optional .BrakeNodeStates state = 14;
inline bool BrakeNodeData::has_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BrakeNodeData::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::BrakeNodeStates BrakeNodeData::state() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.state)
  return static_cast< ::BrakeNodeStates >(state_);
}
inline void BrakeNodeData::set_state(::BrakeNodeStates value) {
  assert(::BrakeNodeStates_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  state_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.state)
}

// optional bool sol1 = 2;
inline bool BrakeNodeData::has_sol1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrakeNodeData::clear_sol1() {
  sol1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BrakeNodeData::sol1() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.sol1)
  return sol1_;
}
inline void BrakeNodeData::set_sol1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  sol1_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.sol1)
}

// optional bool sol2 = 3;
inline bool BrakeNodeData::has_sol2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrakeNodeData::clear_sol2() {
  sol2_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BrakeNodeData::sol2() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.sol2)
  return sol2_;
}
inline void BrakeNodeData::set_sol2(bool value) {
  _has_bits_[0] |= 0x00000004u;
  sol2_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.sol2)
}

// optional bool sol3 = 4;
inline bool BrakeNodeData::has_sol3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BrakeNodeData::clear_sol3() {
  sol3_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool BrakeNodeData::sol3() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.sol3)
  return sol3_;
}
inline void BrakeNodeData::set_sol3(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sol3_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.sol3)
}

// optional bool sol4 = 5;
inline bool BrakeNodeData::has_sol4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BrakeNodeData::clear_sol4() {
  sol4_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool BrakeNodeData::sol4() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.sol4)
  return sol4_;
}
inline void BrakeNodeData::set_sol4(bool value) {
  _has_bits_[0] |= 0x00000010u;
  sol4_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.sol4)
}

// optional bool sol5 = 6;
inline bool BrakeNodeData::has_sol5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BrakeNodeData::clear_sol5() {
  sol5_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BrakeNodeData::sol5() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.sol5)
  return sol5_;
}
inline void BrakeNodeData::set_sol5(bool value) {
  _has_bits_[0] |= 0x00000020u;
  sol5_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.sol5)
}

// optional bool sol6 = 7;
inline bool BrakeNodeData::has_sol6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BrakeNodeData::clear_sol6() {
  sol6_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool BrakeNodeData::sol6() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.sol6)
  return sol6_;
}
inline void BrakeNodeData::set_sol6(bool value) {
  _has_bits_[0] |= 0x00000040u;
  sol6_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.sol6)
}

// optional int32 hp = 8;
inline bool BrakeNodeData::has_hp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BrakeNodeData::clear_hp() {
  hp_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 BrakeNodeData::hp() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.hp)
  return hp_;
}
inline void BrakeNodeData::set_hp(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  hp_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.hp)
}

// optional int32 lp1 = 9;
inline bool BrakeNodeData::has_lp1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BrakeNodeData::clear_lp1() {
  lp1_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 BrakeNodeData::lp1() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.lp1)
  return lp1_;
}
inline void BrakeNodeData::set_lp1(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  lp1_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.lp1)
}

// optional int32 lp2 = 10;
inline bool BrakeNodeData::has_lp2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BrakeNodeData::clear_lp2() {
  lp2_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 BrakeNodeData::lp2() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.lp2)
  return lp2_;
}
inline void BrakeNodeData::set_lp2(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  lp2_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.lp2)
}

// optional int32 lp3 = 11;
inline bool BrakeNodeData::has_lp3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BrakeNodeData::clear_lp3() {
  lp3_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::int32 BrakeNodeData::lp3() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.lp3)
  return lp3_;
}
inline void BrakeNodeData::set_lp3(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  lp3_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.lp3)
}

// optional int32 lp4 = 12;
inline bool BrakeNodeData::has_lp4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BrakeNodeData::clear_lp4() {
  lp4_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::int32 BrakeNodeData::lp4() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.lp4)
  return lp4_;
}
inline void BrakeNodeData::set_lp4(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  lp4_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.lp4)
}

// optional int32 temp = 13;
inline bool BrakeNodeData::has_temp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BrakeNodeData::clear_temp() {
  temp_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::int32 BrakeNodeData::temp() const {
  // @@protoc_insertion_point(field_get:BrakeNodeData.temp)
  return temp_;
}
inline void BrakeNodeData::set_temp(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  temp_ = value;
  // @@protoc_insertion_point(field_set:BrakeNodeData.temp)
}

// -------------------------------------------------------------------

// PodCommand

// optional .ControlsInterfaceStates controlsInterfaceState = 1;
inline bool PodCommand::has_controlsinterfacestate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PodCommand::clear_controlsinterfacestate() {
  controlsinterfacestate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ControlsInterfaceStates PodCommand::controlsinterfacestate() const {
  // @@protoc_insertion_point(field_get:PodCommand.controlsInterfaceState)
  return static_cast< ::ControlsInterfaceStates >(controlsinterfacestate_);
}
inline void PodCommand::set_controlsinterfacestate(::ControlsInterfaceStates value) {
  assert(::ControlsInterfaceStates_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  controlsinterfacestate_ = value;
  // @@protoc_insertion_point(field_set:PodCommand.controlsInterfaceState)
}

// optional .PodStates manualPodState = 2;
inline bool PodCommand::has_manualpodstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PodCommand::clear_manualpodstate() {
  manualpodstate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PodStates PodCommand::manualpodstate() const {
  // @@protoc_insertion_point(field_get:PodCommand.manualPodState)
  return static_cast< ::PodStates >(manualpodstate_);
}
inline void PodCommand::set_manualpodstate(::PodStates value) {
  assert(::PodStates_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  manualpodstate_ = value;
  // @@protoc_insertion_point(field_set:PodCommand.manualPodState)
}

// optional .BrakeNodeStates manualBrakeNodeState = 3;
inline bool PodCommand::has_manualbrakenodestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PodCommand::clear_manualbrakenodestate() {
  manualbrakenodestate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::BrakeNodeStates PodCommand::manualbrakenodestate() const {
  // @@protoc_insertion_point(field_get:PodCommand.manualBrakeNodeState)
  return static_cast< ::BrakeNodeStates >(manualbrakenodestate_);
}
inline void PodCommand::set_manualbrakenodestate(::BrakeNodeStates value) {
  assert(::BrakeNodeStates_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  manualbrakenodestate_ = value;
  // @@protoc_insertion_point(field_set:PodCommand.manualBrakeNodeState)
}

// optional .MotorStates manualMotorState = 4;
inline bool PodCommand::has_manualmotorstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PodCommand::clear_manualmotorstate() {
  manualmotorstate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::MotorStates PodCommand::manualmotorstate() const {
  // @@protoc_insertion_point(field_get:PodCommand.manualMotorState)
  return static_cast< ::MotorStates >(manualmotorstate_);
}
inline void PodCommand::set_manualmotorstate(::MotorStates value) {
  assert(::MotorStates_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  manualmotorstate_ = value;
  // @@protoc_insertion_point(field_set:PodCommand.manualMotorState)
}

// optional .LvdcNodeStates manualLvdcNodeState = 5;
inline bool PodCommand::has_manuallvdcnodestate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PodCommand::clear_manuallvdcnodestate() {
  manuallvdcnodestate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::LvdcNodeStates PodCommand::manuallvdcnodestate() const {
  // @@protoc_insertion_point(field_get:PodCommand.manualLvdcNodeState)
  return static_cast< ::LvdcNodeStates >(manuallvdcnodestate_);
}
inline void PodCommand::set_manuallvdcnodestate(::LvdcNodeStates value) {
  assert(::LvdcNodeStates_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  manuallvdcnodestate_ = value;
  // @@protoc_insertion_point(field_set:PodCommand.manualLvdcNodeState)
}

// optional bool automaticStateTransitions = 6;
inline bool PodCommand::has_automaticstatetransitions() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PodCommand::clear_automaticstatetransitions() {
  automaticstatetransitions_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PodCommand::automaticstatetransitions() const {
  // @@protoc_insertion_point(field_get:PodCommand.automaticStateTransitions)
  return automaticstatetransitions_;
}
inline void PodCommand::set_automaticstatetransitions(bool value) {
  _has_bits_[0] |= 0x00000020u;
  automaticstatetransitions_ = value;
  // @@protoc_insertion_point(field_set:PodCommand.automaticStateTransitions)
}

// -------------------------------------------------------------------

// Telemetry

// optional .PodStates podState = 1;
inline bool Telemetry::has_podstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Telemetry::clear_podstate() {
  podstate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PodStates Telemetry::podstate() const {
  // @@protoc_insertion_point(field_get:Telemetry.podState)
  return static_cast< ::PodStates >(podstate_);
}
inline void Telemetry::set_podstate(::PodStates value) {
  assert(::PodStates_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  podstate_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.podState)
}

// optional .BrakeNodeStates breakNodeState = 2;
inline bool Telemetry::has_breaknodestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Telemetry::clear_breaknodestate() {
  breaknodestate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::BrakeNodeStates Telemetry::breaknodestate() const {
  // @@protoc_insertion_point(field_get:Telemetry.breakNodeState)
  return static_cast< ::BrakeNodeStates >(breaknodestate_);
}
inline void Telemetry::set_breaknodestate(::BrakeNodeStates value) {
  assert(::BrakeNodeStates_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  breaknodestate_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.breakNodeState)
}

// optional .MotorStates motorState = 3;
inline bool Telemetry::has_motorstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Telemetry::clear_motorstate() {
  motorstate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::MotorStates Telemetry::motorstate() const {
  // @@protoc_insertion_point(field_get:Telemetry.motorState)
  return static_cast< ::MotorStates >(motorstate_);
}
inline void Telemetry::set_motorstate(::MotorStates value) {
  assert(::MotorStates_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  motorstate_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.motorState)
}

// optional .ControlsInterfaceStates controlsInterfaceState = 4;
inline bool Telemetry::has_controlsinterfacestate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Telemetry::clear_controlsinterfacestate() {
  controlsinterfacestate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ControlsInterfaceStates Telemetry::controlsinterfacestate() const {
  // @@protoc_insertion_point(field_get:Telemetry.controlsInterfaceState)
  return static_cast< ::ControlsInterfaceStates >(controlsinterfacestate_);
}
inline void Telemetry::set_controlsinterfacestate(::ControlsInterfaceStates value) {
  assert(::ControlsInterfaceStates_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  controlsinterfacestate_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.controlsInterfaceState)
}

// optional .InverterStates inverterState = 5;
inline bool Telemetry::has_inverterstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Telemetry::clear_inverterstate() {
  inverterstate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::InverterStates Telemetry::inverterstate() const {
  // @@protoc_insertion_point(field_get:Telemetry.inverterState)
  return static_cast< ::InverterStates >(inverterstate_);
}
inline void Telemetry::set_inverterstate(::InverterStates value) {
  assert(::InverterStates_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  inverterstate_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.inverterState)
}

// optional .LvdcNodeStates lvdcNodeState = 54;
inline bool Telemetry::has_lvdcnodestate() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Telemetry::clear_lvdcnodestate() {
  lvdcnodestate_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::LvdcNodeStates Telemetry::lvdcnodestate() const {
  // @@protoc_insertion_point(field_get:Telemetry.lvdcNodeState)
  return static_cast< ::LvdcNodeStates >(lvdcnodestate_);
}
inline void Telemetry::set_lvdcnodestate(::LvdcNodeStates value) {
  assert(::LvdcNodeStates_IsValid(value));
  _has_bits_[1] |= 0x00040000u;
  lvdcnodestate_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.lvdcNodeState)
}

// optional .BatteryManagementStates batteryManagementState = 25;
inline bool Telemetry::has_batterymanagementstate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Telemetry::clear_batterymanagementstate() {
  batterymanagementstate_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::BatteryManagementStates Telemetry::batterymanagementstate() const {
  // @@protoc_insertion_point(field_get:Telemetry.batteryManagementState)
  return static_cast< ::BatteryManagementStates >(batterymanagementstate_);
}
inline void Telemetry::set_batterymanagementstate(::BatteryManagementStates value) {
  assert(::BatteryManagementStates_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  batterymanagementstate_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.batteryManagementState)
}

// optional .PodStates breakNodePerceivedPodState = 31;
inline bool Telemetry::has_breaknodeperceivedpodstate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Telemetry::clear_breaknodeperceivedpodstate() {
  breaknodeperceivedpodstate_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PodStates Telemetry::breaknodeperceivedpodstate() const {
  // @@protoc_insertion_point(field_get:Telemetry.breakNodePerceivedPodState)
  return static_cast< ::PodStates >(breaknodeperceivedpodstate_);
}
inline void Telemetry::set_breaknodeperceivedpodstate(::PodStates value) {
  assert(::PodStates_IsValid(value));
  _has_bits_[0] |= 0x10000000u;
  breaknodeperceivedpodstate_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.breakNodePerceivedPodState)
}

// optional int32 missionTime = 6;
inline bool Telemetry::has_missiontime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Telemetry::clear_missiontime() {
  missiontime_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 Telemetry::missiontime() const {
  // @@protoc_insertion_point(field_get:Telemetry.missionTime)
  return missiontime_;
}
inline void Telemetry::set_missiontime(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  missiontime_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.missionTime)
}

// optional int32 flightTime = 7;
inline bool Telemetry::has_flighttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Telemetry::clear_flighttime() {
  flighttime_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 Telemetry::flighttime() const {
  // @@protoc_insertion_point(field_get:Telemetry.flightTime)
  return flighttime_;
}
inline void Telemetry::set_flighttime(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  flighttime_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.flightTime)
}

// repeated int32 heartbeatFlags = 8;
inline int Telemetry::heartbeatflags_size() const {
  return heartbeatflags_.size();
}
inline void Telemetry::clear_heartbeatflags() {
  heartbeatflags_.Clear();
}
inline ::google::protobuf::int32 Telemetry::heartbeatflags(int index) const {
  // @@protoc_insertion_point(field_get:Telemetry.heartbeatFlags)
  return heartbeatflags_.Get(index);
}
inline void Telemetry::set_heartbeatflags(int index, ::google::protobuf::int32 value) {
  heartbeatflags_.Set(index, value);
  // @@protoc_insertion_point(field_set:Telemetry.heartbeatFlags)
}
inline void Telemetry::add_heartbeatflags(::google::protobuf::int32 value) {
  heartbeatflags_.Add(value);
  // @@protoc_insertion_point(field_add:Telemetry.heartbeatFlags)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Telemetry::heartbeatflags() const {
  // @@protoc_insertion_point(field_list:Telemetry.heartbeatFlags)
  return heartbeatflags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Telemetry::mutable_heartbeatflags() {
  // @@protoc_insertion_point(field_mutable_list:Telemetry.heartbeatFlags)
  return &heartbeatflags_;
}

// repeated int32 heartbeatValues = 71;
inline int Telemetry::heartbeatvalues_size() const {
  return heartbeatvalues_.size();
}
inline void Telemetry::clear_heartbeatvalues() {
  heartbeatvalues_.Clear();
}
inline ::google::protobuf::int32 Telemetry::heartbeatvalues(int index) const {
  // @@protoc_insertion_point(field_get:Telemetry.heartbeatValues)
  return heartbeatvalues_.Get(index);
}
inline void Telemetry::set_heartbeatvalues(int index, ::google::protobuf::int32 value) {
  heartbeatvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:Telemetry.heartbeatValues)
}
inline void Telemetry::add_heartbeatvalues(::google::protobuf::int32 value) {
  heartbeatvalues_.Add(value);
  // @@protoc_insertion_point(field_add:Telemetry.heartbeatValues)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Telemetry::heartbeatvalues() const {
  // @@protoc_insertion_point(field_list:Telemetry.heartbeatValues)
  return heartbeatvalues_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Telemetry::mutable_heartbeatvalues() {
  // @@protoc_insertion_point(field_mutable_list:Telemetry.heartbeatValues)
  return &heartbeatvalues_;
}

// optional int32 podPosition = 9;
inline bool Telemetry::has_podposition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Telemetry::clear_podposition() {
  podposition_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 Telemetry::podposition() const {
  // @@protoc_insertion_point(field_get:Telemetry.podPosition)
  return podposition_;
}
inline void Telemetry::set_podposition(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  podposition_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.podPosition)
}

// optional int32 podVelocity = 10;
inline bool Telemetry::has_podvelocity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Telemetry::clear_podvelocity() {
  podvelocity_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 Telemetry::podvelocity() const {
  // @@protoc_insertion_point(field_get:Telemetry.podVelocity)
  return podvelocity_;
}
inline void Telemetry::set_podvelocity(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  podvelocity_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.podVelocity)
}

// optional int32 podAccelerationX = 11;
inline bool Telemetry::has_podaccelerationx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Telemetry::clear_podaccelerationx() {
  podaccelerationx_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 Telemetry::podaccelerationx() const {
  // @@protoc_insertion_point(field_get:Telemetry.podAccelerationX)
  return podaccelerationx_;
}
inline void Telemetry::set_podaccelerationx(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  podaccelerationx_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.podAccelerationX)
}

// optional int32 podAccelerationY = 12;
inline bool Telemetry::has_podaccelerationy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Telemetry::clear_podaccelerationy() {
  podaccelerationy_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::int32 Telemetry::podaccelerationy() const {
  // @@protoc_insertion_point(field_get:Telemetry.podAccelerationY)
  return podaccelerationy_;
}
inline void Telemetry::set_podaccelerationy(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  podaccelerationy_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.podAccelerationY)
}

// optional int32 podAccelerationZ = 13;
inline bool Telemetry::has_podaccelerationz() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Telemetry::clear_podaccelerationz() {
  podaccelerationz_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::int32 Telemetry::podaccelerationz() const {
  // @@protoc_insertion_point(field_get:Telemetry.podAccelerationZ)
  return podaccelerationz_;
}
inline void Telemetry::set_podaccelerationz(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  podaccelerationz_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.podAccelerationZ)
}

// optional int32 imuVelocity = 14;
inline bool Telemetry::has_imuvelocity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Telemetry::clear_imuvelocity() {
  imuvelocity_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::int32 Telemetry::imuvelocity() const {
  // @@protoc_insertion_point(field_get:Telemetry.imuVelocity)
  return imuvelocity_;
}
inline void Telemetry::set_imuvelocity(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  imuvelocity_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.imuVelocity)
}

// optional int32 imuAccelerationX = 15;
inline bool Telemetry::has_imuaccelerationx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Telemetry::clear_imuaccelerationx() {
  imuaccelerationx_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::google::protobuf::int32 Telemetry::imuaccelerationx() const {
  // @@protoc_insertion_point(field_get:Telemetry.imuAccelerationX)
  return imuaccelerationx_;
}
inline void Telemetry::set_imuaccelerationx(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  imuaccelerationx_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.imuAccelerationX)
}

// optional int32 tachometerVelocity = 16;
inline bool Telemetry::has_tachometervelocity() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Telemetry::clear_tachometervelocity() {
  tachometervelocity_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::google::protobuf::int32 Telemetry::tachometervelocity() const {
  // @@protoc_insertion_point(field_get:Telemetry.tachometerVelocity)
  return tachometervelocity_;
}
inline void Telemetry::set_tachometervelocity(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  tachometervelocity_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.tachometerVelocity)
}

// optional int32 resolverVelocity = 17;
inline bool Telemetry::has_resolvervelocity() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Telemetry::clear_resolvervelocity() {
  resolvervelocity_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::google::protobuf::int32 Telemetry::resolvervelocity() const {
  // @@protoc_insertion_point(field_get:Telemetry.resolverVelocity)
  return resolvervelocity_;
}
inline void Telemetry::set_resolvervelocity(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  resolvervelocity_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.resolverVelocity)
}

// optional int32 inverterTemperature1 = 18;
inline bool Telemetry::has_invertertemperature1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Telemetry::clear_invertertemperature1() {
  invertertemperature1_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::google::protobuf::int32 Telemetry::invertertemperature1() const {
  // @@protoc_insertion_point(field_get:Telemetry.inverterTemperature1)
  return invertertemperature1_;
}
inline void Telemetry::set_invertertemperature1(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  invertertemperature1_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.inverterTemperature1)
}

// optional int32 inverterTemperature2 = 19;
inline bool Telemetry::has_invertertemperature2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Telemetry::clear_invertertemperature2() {
  invertertemperature2_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::google::protobuf::int32 Telemetry::invertertemperature2() const {
  // @@protoc_insertion_point(field_get:Telemetry.inverterTemperature2)
  return invertertemperature2_;
}
inline void Telemetry::set_invertertemperature2(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  invertertemperature2_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.inverterTemperature2)
}

// optional int32 inverterTemperature3 = 20;
inline bool Telemetry::has_invertertemperature3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Telemetry::clear_invertertemperature3() {
  invertertemperature3_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::int32 Telemetry::invertertemperature3() const {
  // @@protoc_insertion_point(field_get:Telemetry.inverterTemperature3)
  return invertertemperature3_;
}
inline void Telemetry::set_invertertemperature3(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  invertertemperature3_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.inverterTemperature3)
}

// optional int32 motorCurrent = 21;
inline bool Telemetry::has_motorcurrent() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Telemetry::clear_motorcurrent() {
  motorcurrent_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::google::protobuf::int32 Telemetry::motorcurrent() const {
  // @@protoc_insertion_point(field_get:Telemetry.motorCurrent)
  return motorcurrent_;
}
inline void Telemetry::set_motorcurrent(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  motorcurrent_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.motorCurrent)
}

// optional int32 motorVoltage = 22;
inline bool Telemetry::has_motorvoltage() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Telemetry::clear_motorvoltage() {
  motorvoltage_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::google::protobuf::int32 Telemetry::motorvoltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.motorVoltage)
  return motorvoltage_;
}
inline void Telemetry::set_motorvoltage(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  motorvoltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.motorVoltage)
}

// optional int32 inverterVoltages = 23;
inline bool Telemetry::has_invertervoltages() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Telemetry::clear_invertervoltages() {
  invertervoltages_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::int32 Telemetry::invertervoltages() const {
  // @@protoc_insertion_point(field_get:Telemetry.inverterVoltages)
  return invertervoltages_;
}
inline void Telemetry::set_invertervoltages(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  invertervoltages_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.inverterVoltages)
}

// optional int32 inverterCurrents = 24;
inline bool Telemetry::has_invertercurrents() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Telemetry::clear_invertercurrents() {
  invertercurrents_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::google::protobuf::int32 Telemetry::invertercurrents() const {
  // @@protoc_insertion_point(field_get:Telemetry.inverterCurrents)
  return invertercurrents_;
}
inline void Telemetry::set_invertercurrents(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  invertercurrents_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.inverterCurrents)
}

// optional float hvBatteryPackVoltage = 26;
inline bool Telemetry::has_hvbatterypackvoltage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Telemetry::clear_hvbatterypackvoltage() {
  hvbatterypackvoltage_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float Telemetry::hvbatterypackvoltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.hvBatteryPackVoltage)
  return hvbatterypackvoltage_;
}
inline void Telemetry::set_hvbatterypackvoltage(float value) {
  _has_bits_[0] |= 0x01000000u;
  hvbatterypackvoltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.hvBatteryPackVoltage)
}

// optional float hvBatteryPackCurrent = 27;
inline bool Telemetry::has_hvbatterypackcurrent() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Telemetry::clear_hvbatterypackcurrent() {
  hvbatterypackcurrent_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float Telemetry::hvbatterypackcurrent() const {
  // @@protoc_insertion_point(field_get:Telemetry.hvBatteryPackCurrent)
  return hvbatterypackcurrent_;
}
inline void Telemetry::set_hvbatterypackcurrent(float value) {
  _has_bits_[0] |= 0x02000000u;
  hvbatterypackcurrent_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.hvBatteryPackCurrent)
}

// repeated int32 hvBatteryCellTemperatures = 28;
inline int Telemetry::hvbatterycelltemperatures_size() const {
  return hvbatterycelltemperatures_.size();
}
inline void Telemetry::clear_hvbatterycelltemperatures() {
  hvbatterycelltemperatures_.Clear();
}
inline ::google::protobuf::int32 Telemetry::hvbatterycelltemperatures(int index) const {
  // @@protoc_insertion_point(field_get:Telemetry.hvBatteryCellTemperatures)
  return hvbatterycelltemperatures_.Get(index);
}
inline void Telemetry::set_hvbatterycelltemperatures(int index, ::google::protobuf::int32 value) {
  hvbatterycelltemperatures_.Set(index, value);
  // @@protoc_insertion_point(field_set:Telemetry.hvBatteryCellTemperatures)
}
inline void Telemetry::add_hvbatterycelltemperatures(::google::protobuf::int32 value) {
  hvbatterycelltemperatures_.Add(value);
  // @@protoc_insertion_point(field_add:Telemetry.hvBatteryCellTemperatures)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Telemetry::hvbatterycelltemperatures() const {
  // @@protoc_insertion_point(field_list:Telemetry.hvBatteryCellTemperatures)
  return hvbatterycelltemperatures_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Telemetry::mutable_hvbatterycelltemperatures() {
  // @@protoc_insertion_point(field_mutable_list:Telemetry.hvBatteryCellTemperatures)
  return &hvbatterycelltemperatures_;
}

// optional float hvBatteryPackMinimumCellVoltage = 29;
inline bool Telemetry::has_hvbatterypackminimumcellvoltage() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Telemetry::clear_hvbatterypackminimumcellvoltage() {
  hvbatterypackminimumcellvoltage_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float Telemetry::hvbatterypackminimumcellvoltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.hvBatteryPackMinimumCellVoltage)
  return hvbatterypackminimumcellvoltage_;
}
inline void Telemetry::set_hvbatterypackminimumcellvoltage(float value) {
  _has_bits_[0] |= 0x04000000u;
  hvbatterypackminimumcellvoltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.hvBatteryPackMinimumCellVoltage)
}

// optional float hvBatteryPackMaxCellVoltage = 30;
inline bool Telemetry::has_hvbatterypackmaxcellvoltage() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Telemetry::clear_hvbatterypackmaxcellvoltage() {
  hvbatterypackmaxcellvoltage_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float Telemetry::hvbatterypackmaxcellvoltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.hvBatteryPackMaxCellVoltage)
  return hvbatterypackmaxcellvoltage_;
}
inline void Telemetry::set_hvbatterypackmaxcellvoltage(float value) {
  _has_bits_[0] |= 0x08000000u;
  hvbatterypackmaxcellvoltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.hvBatteryPackMaxCellVoltage)
}

// optional bool solenoid1 = 32;
inline bool Telemetry::has_solenoid1() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Telemetry::clear_solenoid1() {
  solenoid1_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool Telemetry::solenoid1() const {
  // @@protoc_insertion_point(field_get:Telemetry.solenoid1)
  return solenoid1_;
}
inline void Telemetry::set_solenoid1(bool value) {
  _has_bits_[0] |= 0x20000000u;
  solenoid1_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.solenoid1)
}

// optional bool solenoid2 = 33;
inline bool Telemetry::has_solenoid2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Telemetry::clear_solenoid2() {
  solenoid2_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool Telemetry::solenoid2() const {
  // @@protoc_insertion_point(field_get:Telemetry.solenoid2)
  return solenoid2_;
}
inline void Telemetry::set_solenoid2(bool value) {
  _has_bits_[0] |= 0x40000000u;
  solenoid2_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.solenoid2)
}

// optional bool solenoid3 = 34;
inline bool Telemetry::has_solenoid3() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Telemetry::clear_solenoid3() {
  solenoid3_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool Telemetry::solenoid3() const {
  // @@protoc_insertion_point(field_get:Telemetry.solenoid3)
  return solenoid3_;
}
inline void Telemetry::set_solenoid3(bool value) {
  _has_bits_[0] |= 0x80000000u;
  solenoid3_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.solenoid3)
}

// optional bool solenoid4 = 35;
inline bool Telemetry::has_solenoid4() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Telemetry::clear_solenoid4() {
  solenoid4_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool Telemetry::solenoid4() const {
  // @@protoc_insertion_point(field_get:Telemetry.solenoid4)
  return solenoid4_;
}
inline void Telemetry::set_solenoid4(bool value) {
  _has_bits_[1] |= 0x00000001u;
  solenoid4_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.solenoid4)
}

// optional bool solenoid5 = 36;
inline bool Telemetry::has_solenoid5() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Telemetry::clear_solenoid5() {
  solenoid5_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool Telemetry::solenoid5() const {
  // @@protoc_insertion_point(field_get:Telemetry.solenoid5)
  return solenoid5_;
}
inline void Telemetry::set_solenoid5(bool value) {
  _has_bits_[1] |= 0x00000002u;
  solenoid5_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.solenoid5)
}

// optional bool solenoid6 = 37;
inline bool Telemetry::has_solenoid6() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Telemetry::clear_solenoid6() {
  solenoid6_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool Telemetry::solenoid6() const {
  // @@protoc_insertion_point(field_get:Telemetry.solenoid6)
  return solenoid6_;
}
inline void Telemetry::set_solenoid6(bool value) {
  _has_bits_[1] |= 0x00000004u;
  solenoid6_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.solenoid6)
}

// optional float highPressure = 38;
inline bool Telemetry::has_highpressure() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Telemetry::clear_highpressure() {
  highpressure_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline float Telemetry::highpressure() const {
  // @@protoc_insertion_point(field_get:Telemetry.highPressure)
  return highpressure_;
}
inline void Telemetry::set_highpressure(float value) {
  _has_bits_[1] |= 0x00000008u;
  highpressure_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.highPressure)
}

// optional float lowPressure1 = 39;
inline bool Telemetry::has_lowpressure1() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Telemetry::clear_lowpressure1() {
  lowpressure1_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline float Telemetry::lowpressure1() const {
  // @@protoc_insertion_point(field_get:Telemetry.lowPressure1)
  return lowpressure1_;
}
inline void Telemetry::set_lowpressure1(float value) {
  _has_bits_[1] |= 0x00000010u;
  lowpressure1_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.lowPressure1)
}

// optional float lowPressure2 = 40;
inline bool Telemetry::has_lowpressure2() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Telemetry::clear_lowpressure2() {
  lowpressure2_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline float Telemetry::lowpressure2() const {
  // @@protoc_insertion_point(field_get:Telemetry.lowPressure2)
  return lowpressure2_;
}
inline void Telemetry::set_lowpressure2(float value) {
  _has_bits_[1] |= 0x00000020u;
  lowpressure2_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.lowPressure2)
}

// optional float lowPressure3 = 41;
inline bool Telemetry::has_lowpressure3() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Telemetry::clear_lowpressure3() {
  lowpressure3_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float Telemetry::lowpressure3() const {
  // @@protoc_insertion_point(field_get:Telemetry.lowPressure3)
  return lowpressure3_;
}
inline void Telemetry::set_lowpressure3(float value) {
  _has_bits_[1] |= 0x00000040u;
  lowpressure3_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.lowPressure3)
}

// optional float lowPressure4 = 42;
inline bool Telemetry::has_lowpressure4() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Telemetry::clear_lowpressure4() {
  lowpressure4_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline float Telemetry::lowpressure4() const {
  // @@protoc_insertion_point(field_get:Telemetry.lowPressure4)
  return lowpressure4_;
}
inline void Telemetry::set_lowpressure4(float value) {
  _has_bits_[1] |= 0x00000080u;
  lowpressure4_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.lowPressure4)
}

// optional float pressureVesselTemperature = 43;
inline bool Telemetry::has_pressurevesseltemperature() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Telemetry::clear_pressurevesseltemperature() {
  pressurevesseltemperature_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float Telemetry::pressurevesseltemperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.pressureVesselTemperature)
  return pressurevesseltemperature_;
}
inline void Telemetry::set_pressurevesseltemperature(float value) {
  _has_bits_[1] |= 0x00000100u;
  pressurevesseltemperature_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.pressureVesselTemperature)
}

// optional int32 electronicsEnclosurePressure = 44;
inline bool Telemetry::has_electronicsenclosurepressure() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Telemetry::clear_electronicsenclosurepressure() {
  electronicsenclosurepressure_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::google::protobuf::int32 Telemetry::electronicsenclosurepressure() const {
  // @@protoc_insertion_point(field_get:Telemetry.electronicsEnclosurePressure)
  return electronicsenclosurepressure_;
}
inline void Telemetry::set_electronicsenclosurepressure(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00000200u;
  electronicsenclosurepressure_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.electronicsEnclosurePressure)
}

// optional int32 railDisplacementX = 45;
inline bool Telemetry::has_raildisplacementx() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Telemetry::clear_raildisplacementx() {
  raildisplacementx_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::google::protobuf::int32 Telemetry::raildisplacementx() const {
  // @@protoc_insertion_point(field_get:Telemetry.railDisplacementX)
  return raildisplacementx_;
}
inline void Telemetry::set_raildisplacementx(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00000400u;
  raildisplacementx_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railDisplacementX)
}

// optional int32 railDisplacementY = 46;
inline bool Telemetry::has_raildisplacementy() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Telemetry::clear_raildisplacementy() {
  raildisplacementy_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::google::protobuf::int32 Telemetry::raildisplacementy() const {
  // @@protoc_insertion_point(field_get:Telemetry.railDisplacementY)
  return raildisplacementy_;
}
inline void Telemetry::set_raildisplacementy(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00000800u;
  raildisplacementy_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railDisplacementY)
}

// optional int32 tubePressure = 48;
inline bool Telemetry::has_tubepressure() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Telemetry::clear_tubepressure() {
  tubepressure_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::google::protobuf::int32 Telemetry::tubepressure() const {
  // @@protoc_insertion_point(field_get:Telemetry.tubePressure)
  return tubepressure_;
}
inline void Telemetry::set_tubepressure(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00001000u;
  tubepressure_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.tubePressure)
}

// optional int32 coolantPressure1 = 49;
inline bool Telemetry::has_coolantpressure1() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Telemetry::clear_coolantpressure1() {
  coolantpressure1_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::google::protobuf::int32 Telemetry::coolantpressure1() const {
  // @@protoc_insertion_point(field_get:Telemetry.coolantPressure1)
  return coolantpressure1_;
}
inline void Telemetry::set_coolantpressure1(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00002000u;
  coolantpressure1_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.coolantPressure1)
}

// optional int32 coolantPressure2 = 50;
inline bool Telemetry::has_coolantpressure2() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Telemetry::clear_coolantpressure2() {
  coolantpressure2_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::google::protobuf::int32 Telemetry::coolantpressure2() const {
  // @@protoc_insertion_point(field_get:Telemetry.coolantPressure2)
  return coolantpressure2_;
}
inline void Telemetry::set_coolantpressure2(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00004000u;
  coolantpressure2_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.coolantPressure2)
}

// optional int32 coolantPressure3 = 51;
inline bool Telemetry::has_coolantpressure3() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Telemetry::clear_coolantpressure3() {
  coolantpressure3_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::google::protobuf::int32 Telemetry::coolantpressure3() const {
  // @@protoc_insertion_point(field_get:Telemetry.coolantPressure3)
  return coolantpressure3_;
}
inline void Telemetry::set_coolantpressure3(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00008000u;
  coolantpressure3_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.coolantPressure3)
}

// optional int32 coolantTemperature = 52;
inline bool Telemetry::has_coolanttemperature() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Telemetry::clear_coolanttemperature() {
  coolanttemperature_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::google::protobuf::int32 Telemetry::coolanttemperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.coolantTemperature)
  return coolanttemperature_;
}
inline void Telemetry::set_coolanttemperature(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00010000u;
  coolanttemperature_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.coolantTemperature)
}

// optional float railTemperature = 53;
inline bool Telemetry::has_railtemperature() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Telemetry::clear_railtemperature() {
  railtemperature_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline float Telemetry::railtemperature() const {
  // @@protoc_insertion_point(field_get:Telemetry.railTemperature)
  return railtemperature_;
}
inline void Telemetry::set_railtemperature(float value) {
  _has_bits_[1] |= 0x00020000u;
  railtemperature_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railTemperature)
}

// optional int32 pack1Voltage = 55;
inline bool Telemetry::has_pack1voltage() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Telemetry::clear_pack1voltage() {
  pack1voltage_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::google::protobuf::int32 Telemetry::pack1voltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.pack1Voltage)
  return pack1voltage_;
}
inline void Telemetry::set_pack1voltage(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00080000u;
  pack1voltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.pack1Voltage)
}

// optional int32 pack2Voltage = 56;
inline bool Telemetry::has_pack2voltage() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Telemetry::clear_pack2voltage() {
  pack2voltage_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::google::protobuf::int32 Telemetry::pack2voltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.pack2Voltage)
  return pack2voltage_;
}
inline void Telemetry::set_pack2voltage(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00100000u;
  pack2voltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.pack2Voltage)
}

// optional int32 pack1Current = 57;
inline bool Telemetry::has_pack1current() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Telemetry::clear_pack1current() {
  pack1current_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::google::protobuf::int32 Telemetry::pack1current() const {
  // @@protoc_insertion_point(field_get:Telemetry.pack1Current)
  return pack1current_;
}
inline void Telemetry::set_pack1current(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00200000u;
  pack1current_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.pack1Current)
}

// optional int32 pack2Current = 58;
inline bool Telemetry::has_pack2current() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Telemetry::clear_pack2current() {
  pack2current_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::google::protobuf::int32 Telemetry::pack2current() const {
  // @@protoc_insertion_point(field_get:Telemetry.pack2Current)
  return pack2current_;
}
inline void Telemetry::set_pack2current(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00400000u;
  pack2current_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.pack2Current)
}

// optional int32 rail1Voltage = 59;
inline bool Telemetry::has_rail1voltage() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Telemetry::clear_rail1voltage() {
  rail1voltage_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::google::protobuf::int32 Telemetry::rail1voltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.rail1Voltage)
  return rail1voltage_;
}
inline void Telemetry::set_rail1voltage(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x00800000u;
  rail1voltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.rail1Voltage)
}

// optional int32 rail2Voltage = 60;
inline bool Telemetry::has_rail2voltage() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Telemetry::clear_rail2voltage() {
  rail2voltage_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::google::protobuf::int32 Telemetry::rail2voltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.rail2Voltage)
  return rail2voltage_;
}
inline void Telemetry::set_rail2voltage(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x01000000u;
  rail2voltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.rail2Voltage)
}

// optional int32 rail3Voltage = 61;
inline bool Telemetry::has_rail3voltage() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Telemetry::clear_rail3voltage() {
  rail3voltage_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::google::protobuf::int32 Telemetry::rail3voltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.rail3Voltage)
  return rail3voltage_;
}
inline void Telemetry::set_rail3voltage(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x02000000u;
  rail3voltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.rail3Voltage)
}

// optional int32 rail4Voltage = 62;
inline bool Telemetry::has_rail4voltage() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Telemetry::clear_rail4voltage() {
  rail4voltage_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline ::google::protobuf::int32 Telemetry::rail4voltage() const {
  // @@protoc_insertion_point(field_get:Telemetry.rail4Voltage)
  return rail4voltage_;
}
inline void Telemetry::set_rail4voltage(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x04000000u;
  rail4voltage_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.rail4Voltage)
}

// optional int32 railVoltageFlag = 72;
inline bool Telemetry::has_railvoltageflag() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Telemetry::clear_railvoltageflag() {
  railvoltageflag_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline ::google::protobuf::int32 Telemetry::railvoltageflag() const {
  // @@protoc_insertion_point(field_get:Telemetry.railVoltageFlag)
  return railvoltageflag_;
}
inline void Telemetry::set_railvoltageflag(::google::protobuf::int32 value) {
  _has_bits_[2] |= 0x00000008u;
  railvoltageflag_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railVoltageFlag)
}

// optional int32 railCurrentSensor1 = 63;
inline bool Telemetry::has_railcurrentsensor1() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Telemetry::clear_railcurrentsensor1() {
  railcurrentsensor1_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline ::google::protobuf::int32 Telemetry::railcurrentsensor1() const {
  // @@protoc_insertion_point(field_get:Telemetry.railCurrentSensor1)
  return railcurrentsensor1_;
}
inline void Telemetry::set_railcurrentsensor1(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x08000000u;
  railcurrentsensor1_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railCurrentSensor1)
}

// optional int32 railCurrentSensor2 = 64;
inline bool Telemetry::has_railcurrentsensor2() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Telemetry::clear_railcurrentsensor2() {
  railcurrentsensor2_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline ::google::protobuf::int32 Telemetry::railcurrentsensor2() const {
  // @@protoc_insertion_point(field_get:Telemetry.railCurrentSensor2)
  return railcurrentsensor2_;
}
inline void Telemetry::set_railcurrentsensor2(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x10000000u;
  railcurrentsensor2_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railCurrentSensor2)
}

// optional int32 railCurrentSensor3 = 65;
inline bool Telemetry::has_railcurrentsensor3() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Telemetry::clear_railcurrentsensor3() {
  railcurrentsensor3_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::google::protobuf::int32 Telemetry::railcurrentsensor3() const {
  // @@protoc_insertion_point(field_get:Telemetry.railCurrentSensor3)
  return railcurrentsensor3_;
}
inline void Telemetry::set_railcurrentsensor3(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x20000000u;
  railcurrentsensor3_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railCurrentSensor3)
}

// optional int32 railCurrentSensor4 = 66;
inline bool Telemetry::has_railcurrentsensor4() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Telemetry::clear_railcurrentsensor4() {
  railcurrentsensor4_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::google::protobuf::int32 Telemetry::railcurrentsensor4() const {
  // @@protoc_insertion_point(field_get:Telemetry.railCurrentSensor4)
  return railcurrentsensor4_;
}
inline void Telemetry::set_railcurrentsensor4(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x40000000u;
  railcurrentsensor4_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railCurrentSensor4)
}

// optional int32 railCurrentSensor5 = 67;
inline bool Telemetry::has_railcurrentsensor5() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Telemetry::clear_railcurrentsensor5() {
  railcurrentsensor5_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::google::protobuf::int32 Telemetry::railcurrentsensor5() const {
  // @@protoc_insertion_point(field_get:Telemetry.railCurrentSensor5)
  return railcurrentsensor5_;
}
inline void Telemetry::set_railcurrentsensor5(::google::protobuf::int32 value) {
  _has_bits_[1] |= 0x80000000u;
  railcurrentsensor5_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railCurrentSensor5)
}

// optional int32 railCurrentSensor6 = 68;
inline bool Telemetry::has_railcurrentsensor6() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Telemetry::clear_railcurrentsensor6() {
  railcurrentsensor6_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline ::google::protobuf::int32 Telemetry::railcurrentsensor6() const {
  // @@protoc_insertion_point(field_get:Telemetry.railCurrentSensor6)
  return railcurrentsensor6_;
}
inline void Telemetry::set_railcurrentsensor6(::google::protobuf::int32 value) {
  _has_bits_[2] |= 0x00000001u;
  railcurrentsensor6_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railCurrentSensor6)
}

// optional int32 railCurrentSensor7 = 69;
inline bool Telemetry::has_railcurrentsensor7() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Telemetry::clear_railcurrentsensor7() {
  railcurrentsensor7_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::google::protobuf::int32 Telemetry::railcurrentsensor7() const {
  // @@protoc_insertion_point(field_get:Telemetry.railCurrentSensor7)
  return railcurrentsensor7_;
}
inline void Telemetry::set_railcurrentsensor7(::google::protobuf::int32 value) {
  _has_bits_[2] |= 0x00000002u;
  railcurrentsensor7_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railCurrentSensor7)
}

// optional int32 railCurrentSensor8 = 70;
inline bool Telemetry::has_railcurrentsensor8() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Telemetry::clear_railcurrentsensor8() {
  railcurrentsensor8_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Telemetry::railcurrentsensor8() const {
  // @@protoc_insertion_point(field_get:Telemetry.railCurrentSensor8)
  return railcurrentsensor8_;
}
inline void Telemetry::set_railcurrentsensor8(::google::protobuf::int32 value) {
  _has_bits_[2] |= 0x00000004u;
  railcurrentsensor8_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railCurrentSensor8)
}

// optional int32 railCurrentFlag = 73;
inline bool Telemetry::has_railcurrentflag() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Telemetry::clear_railcurrentflag() {
  railcurrentflag_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::google::protobuf::int32 Telemetry::railcurrentflag() const {
  // @@protoc_insertion_point(field_get:Telemetry.railCurrentFlag)
  return railcurrentflag_;
}
inline void Telemetry::set_railcurrentflag(::google::protobuf::int32 value) {
  _has_bits_[2] |= 0x00000010u;
  railcurrentflag_ = value;
  // @@protoc_insertion_point(field_set:Telemetry.railCurrentFlag)
}

// -------------------------------------------------------------------

// FcToBrakeNode

// optional int32 packetNum = 1;
inline bool FcToBrakeNode::has_packetnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FcToBrakeNode::clear_packetnum() {
  packetnum_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 FcToBrakeNode::packetnum() const {
  // @@protoc_insertion_point(field_get:FcToBrakeNode.packetNum)
  return packetnum_;
}
inline void FcToBrakeNode::set_packetnum(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  packetnum_ = value;
  // @@protoc_insertion_point(field_set:FcToBrakeNode.packetNum)
}

// optional .PodStates podState = 2;
inline bool FcToBrakeNode::has_podstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FcToBrakeNode::clear_podstate() {
  podstate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PodStates FcToBrakeNode::podstate() const {
  // @@protoc_insertion_point(field_get:FcToBrakeNode.podState)
  return static_cast< ::PodStates >(podstate_);
}
inline void FcToBrakeNode::set_podstate(::PodStates value) {
  assert(::PodStates_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  podstate_ = value;
  // @@protoc_insertion_point(field_set:FcToBrakeNode.podState)
}

// optional .BrakeNodeStates manualNodeState = 3;
inline bool FcToBrakeNode::has_manualnodestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FcToBrakeNode::clear_manualnodestate() {
  manualnodestate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::BrakeNodeStates FcToBrakeNode::manualnodestate() const {
  // @@protoc_insertion_point(field_get:FcToBrakeNode.manualNodeState)
  return static_cast< ::BrakeNodeStates >(manualnodestate_);
}
inline void FcToBrakeNode::set_manualnodestate(::BrakeNodeStates value) {
  assert(::BrakeNodeStates_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  manualnodestate_ = value;
  // @@protoc_insertion_point(field_set:FcToBrakeNode.manualNodeState)
}

// -------------------------------------------------------------------

// DtsNodeToFc

// required int32 packetNum = 1 [default = 0];
inline bool DtsNodeToFc::has_packetnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DtsNodeToFc::clear_packetnum() {
  packetnum_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 DtsNodeToFc::packetnum() const {
  // @@protoc_insertion_point(field_get:DtsNodeToFc.packetNum)
  return packetnum_;
}
inline void DtsNodeToFc::set_packetnum(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  packetnum_ = value;
  // @@protoc_insertion_point(field_set:DtsNodeToFc.packetNum)
}

// required .BrakeNodeStates brakeNodeState = 2 [default = bnsStandby];
inline bool DtsNodeToFc::has_brakenodestate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DtsNodeToFc::clear_brakenodestate() {
  brakenodestate_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::BrakeNodeStates DtsNodeToFc::brakenodestate() const {
  // @@protoc_insertion_point(field_get:DtsNodeToFc.brakeNodeState)
  return static_cast< ::BrakeNodeStates >(brakenodestate_);
}
inline void DtsNodeToFc::set_brakenodestate(::BrakeNodeStates value) {
  assert(::BrakeNodeStates_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  brakenodestate_ = value;
  // @@protoc_insertion_point(field_set:DtsNodeToFc.brakeNodeState)
}

// required bool brakeSolenoidState = 3 [default = false];
inline bool DtsNodeToFc::has_brakesolenoidstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DtsNodeToFc::clear_brakesolenoidstate() {
  brakesolenoidstate_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DtsNodeToFc::brakesolenoidstate() const {
  // @@protoc_insertion_point(field_get:DtsNodeToFc.brakeSolenoidState)
  return brakesolenoidstate_;
}
inline void DtsNodeToFc::set_brakesolenoidstate(bool value) {
  _has_bits_[0] |= 0x00000002u;
  brakesolenoidstate_ = value;
  // @@protoc_insertion_point(field_set:DtsNodeToFc.brakeSolenoidState)
}

// required bool ventSolenoidState = 4 [default = false];
inline bool DtsNodeToFc::has_ventsolenoidstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DtsNodeToFc::clear_ventsolenoidstate() {
  ventsolenoidstate_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DtsNodeToFc::ventsolenoidstate() const {
  // @@protoc_insertion_point(field_get:DtsNodeToFc.ventSolenoidState)
  return ventsolenoidstate_;
}
inline void DtsNodeToFc::set_ventsolenoidstate(bool value) {
  _has_bits_[0] |= 0x00000004u;
  ventsolenoidstate_ = value;
  // @@protoc_insertion_point(field_set:DtsNodeToFc.ventSolenoidState)
}

// required float rotorTemperature = 5 [default = 0];
inline bool DtsNodeToFc::has_rotortemperature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DtsNodeToFc::clear_rotortemperature() {
  rotortemperature_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DtsNodeToFc::rotortemperature() const {
  // @@protoc_insertion_point(field_get:DtsNodeToFc.rotorTemperature)
  return rotortemperature_;
}
inline void DtsNodeToFc::set_rotortemperature(float value) {
  _has_bits_[0] |= 0x00000008u;
  rotortemperature_ = value;
  // @@protoc_insertion_point(field_set:DtsNodeToFc.rotorTemperature)
}

// required float pneumaticTemperature = 6 [default = 0];
inline bool DtsNodeToFc::has_pneumatictemperature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DtsNodeToFc::clear_pneumatictemperature() {
  pneumatictemperature_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float DtsNodeToFc::pneumatictemperature() const {
  // @@protoc_insertion_point(field_get:DtsNodeToFc.pneumaticTemperature)
  return pneumatictemperature_;
}
inline void DtsNodeToFc::set_pneumatictemperature(float value) {
  _has_bits_[0] |= 0x00000010u;
  pneumatictemperature_ = value;
  // @@protoc_insertion_point(field_set:DtsNodeToFc.pneumaticTemperature)
}

// required float tankPressure = 7 [default = 0];
inline bool DtsNodeToFc::has_tankpressure() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DtsNodeToFc::clear_tankpressure() {
  tankpressure_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float DtsNodeToFc::tankpressure() const {
  // @@protoc_insertion_point(field_get:DtsNodeToFc.tankPressure)
  return tankpressure_;
}
inline void DtsNodeToFc::set_tankpressure(float value) {
  _has_bits_[0] |= 0x00000020u;
  tankpressure_ = value;
  // @@protoc_insertion_point(field_set:DtsNodeToFc.tankPressure)
}

// required float brakePressure = 8 [default = 0];
inline bool DtsNodeToFc::has_brakepressure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DtsNodeToFc::clear_brakepressure() {
  brakepressure_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float DtsNodeToFc::brakepressure() const {
  // @@protoc_insertion_point(field_get:DtsNodeToFc.brakePressure)
  return brakepressure_;
}
inline void DtsNodeToFc::set_brakepressure(float value) {
  _has_bits_[0] |= 0x00000040u;
  brakepressure_ = value;
  // @@protoc_insertion_point(field_set:DtsNodeToFc.brakePressure)
}

// -------------------------------------------------------------------

// RearNodeToFc

// required int32 packetNum = 1 [default = 0];
inline bool RearNodeToFc::has_packetnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RearNodeToFc::clear_packetnum() {
  packetnum_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 RearNodeToFc::packetnum() const {
  // @@protoc_insertion_point(field_get:RearNodeToFc.packetNum)
  return packetnum_;
}
inline void RearNodeToFc::set_packetnum(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  packetnum_ = value;
  // @@protoc_insertion_point(field_set:RearNodeToFc.packetNum)
}

// required float tubePressure = 2 [default = 0];
inline bool RearNodeToFc::has_tubepressure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RearNodeToFc::clear_tubepressure() {
  tubepressure_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float RearNodeToFc::tubepressure() const {
  // @@protoc_insertion_point(field_get:RearNodeToFc.tubePressure)
  return tubepressure_;
}
inline void RearNodeToFc::set_tubepressure(float value) {
  _has_bits_[0] |= 0x00000002u;
  tubepressure_ = value;
  // @@protoc_insertion_point(field_set:RearNodeToFc.tubePressure)
}

// required float coolantPressure1 = 3 [default = 0];
inline bool RearNodeToFc::has_coolantpressure1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RearNodeToFc::clear_coolantpressure1() {
  coolantpressure1_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float RearNodeToFc::coolantpressure1() const {
  // @@protoc_insertion_point(field_get:RearNodeToFc.coolantPressure1)
  return coolantpressure1_;
}
inline void RearNodeToFc::set_coolantpressure1(float value) {
  _has_bits_[0] |= 0x00000004u;
  coolantpressure1_ = value;
  // @@protoc_insertion_point(field_set:RearNodeToFc.coolantPressure1)
}

// required float coolantPressure2 = 4 [default = 0];
inline bool RearNodeToFc::has_coolantpressure2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RearNodeToFc::clear_coolantpressure2() {
  coolantpressure2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RearNodeToFc::coolantpressure2() const {
  // @@protoc_insertion_point(field_get:RearNodeToFc.coolantPressure2)
  return coolantpressure2_;
}
inline void RearNodeToFc::set_coolantpressure2(float value) {
  _has_bits_[0] |= 0x00000008u;
  coolantpressure2_ = value;
  // @@protoc_insertion_point(field_set:RearNodeToFc.coolantPressure2)
}

// required float coolantPressure3 = 5 [default = 0];
inline bool RearNodeToFc::has_coolantpressure3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RearNodeToFc::clear_coolantpressure3() {
  coolantpressure3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RearNodeToFc::coolantpressure3() const {
  // @@protoc_insertion_point(field_get:RearNodeToFc.coolantPressure3)
  return coolantpressure3_;
}
inline void RearNodeToFc::set_coolantpressure3(float value) {
  _has_bits_[0] |= 0x00000010u;
  coolantpressure3_ = value;
  // @@protoc_insertion_point(field_set:RearNodeToFc.coolantPressure3)
}

// required float coolantTemperature = 6 [default = 0];
inline bool RearNodeToFc::has_coolanttemperature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RearNodeToFc::clear_coolanttemperature() {
  coolanttemperature_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RearNodeToFc::coolanttemperature() const {
  // @@protoc_insertion_point(field_get:RearNodeToFc.coolantTemperature)
  return coolanttemperature_;
}
inline void RearNodeToFc::set_coolanttemperature(float value) {
  _has_bits_[0] |= 0x00000020u;
  coolanttemperature_ = value;
  // @@protoc_insertion_point(field_set:RearNodeToFc.coolantTemperature)
}

// -------------------------------------------------------------------

// flightConfig

// optional uint32 retrievalTimeout = 1;
inline bool flightConfig::has_retrievaltimeout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void flightConfig::clear_retrievaltimeout() {
  retrievaltimeout_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 flightConfig::retrievaltimeout() const {
  // @@protoc_insertion_point(field_get:flightConfig.retrievalTimeout)
  return retrievaltimeout_;
}
inline void flightConfig::set_retrievaltimeout(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  retrievaltimeout_ = value;
  // @@protoc_insertion_point(field_set:flightConfig.retrievalTimeout)
}

// optional uint64 maxFlightTime = 2;
inline bool flightConfig::has_maxflighttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void flightConfig::clear_maxflighttime() {
  maxflighttime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 flightConfig::maxflighttime() const {
  // @@protoc_insertion_point(field_get:flightConfig.maxFlightTime)
  return maxflighttime_;
}
inline void flightConfig::set_maxflighttime(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  maxflighttime_ = value;
  // @@protoc_insertion_point(field_set:flightConfig.maxFlightTime)
}

// optional uint64 motorSpeed = 3;
inline bool flightConfig::has_motorspeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void flightConfig::clear_motorspeed() {
  motorspeed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 flightConfig::motorspeed() const {
  // @@protoc_insertion_point(field_get:flightConfig.motorSpeed)
  return motorspeed_;
}
inline void flightConfig::set_motorspeed(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  motorspeed_ = value;
  // @@protoc_insertion_point(field_set:flightConfig.motorSpeed)
}

// optional int32 pdsTelemetryPort = 4 [default = 7000];
inline bool flightConfig::has_pdstelemetryport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void flightConfig::clear_pdstelemetryport() {
  pdstelemetryport_ = 7000;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 flightConfig::pdstelemetryport() const {
  // @@protoc_insertion_point(field_get:flightConfig.pdsTelemetryPort)
  return pdstelemetryport_;
}
inline void flightConfig::set_pdstelemetryport(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  pdstelemetryport_ = value;
  // @@protoc_insertion_point(field_set:flightConfig.pdsTelemetryPort)
}

// optional int32 commandPort = 5 [default = 6000];
inline bool flightConfig::has_commandport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void flightConfig::clear_commandport() {
  commandport_ = 6000;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 flightConfig::commandport() const {
  // @@protoc_insertion_point(field_get:flightConfig.commandPort)
  return commandport_;
}
inline void flightConfig::set_commandport(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  commandport_ = value;
  // @@protoc_insertion_point(field_set:flightConfig.commandPort)
}

// optional uint64 flightLength = 6;
inline bool flightConfig::has_flightlength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void flightConfig::clear_flightlength() {
  flightlength_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 flightConfig::flightlength() const {
  // @@protoc_insertion_point(field_get:flightConfig.flightLength)
  return flightlength_;
}
inline void flightConfig::set_flightlength(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  flightlength_ = value;
  // @@protoc_insertion_point(field_set:flightConfig.flightLength)
}

// optional int32 heartbeatTimeout = 7 [default = 10000];
inline bool flightConfig::has_heartbeattimeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void flightConfig::clear_heartbeattimeout() {
  heartbeattimeout_ = 10000;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 flightConfig::heartbeattimeout() const {
  // @@protoc_insertion_point(field_get:flightConfig.heartbeatTimeout)
  return heartbeattimeout_;
}
inline void flightConfig::set_heartbeattimeout(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  heartbeattimeout_ = value;
  // @@protoc_insertion_point(field_set:flightConfig.heartbeatTimeout)
}

// optional string podDriver = 8;
inline bool flightConfig::has_poddriver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flightConfig::clear_poddriver() {
  poddriver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& flightConfig::poddriver() const {
  // @@protoc_insertion_point(field_get:flightConfig.podDriver)
  return poddriver_.GetNoArena();
}
inline void flightConfig::set_poddriver(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  poddriver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flightConfig.podDriver)
}
#if LANG_CXX11
inline void flightConfig::set_poddriver(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  poddriver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flightConfig.podDriver)
}
#endif
inline void flightConfig::set_poddriver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  poddriver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flightConfig.podDriver)
}
inline void flightConfig::set_poddriver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  poddriver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flightConfig.podDriver)
}
inline ::std::string* flightConfig::mutable_poddriver() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:flightConfig.podDriver)
  return poddriver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* flightConfig::release_poddriver() {
  // @@protoc_insertion_point(field_release:flightConfig.podDriver)
  if (!has_poddriver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return poddriver_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void flightConfig::set_allocated_poddriver(::std::string* poddriver) {
  if (poddriver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  poddriver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poddriver);
  // @@protoc_insertion_point(field_set_allocated:flightConfig.podDriver)
}

// optional string controlLaptopIpAddr = 9 [default = "192.168.0.103"];
inline bool flightConfig::has_controllaptopipaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flightConfig::clear_controllaptopipaddr() {
  controllaptopipaddr_.ClearToDefaultNoArena(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& flightConfig::controllaptopipaddr() const {
  // @@protoc_insertion_point(field_get:flightConfig.controlLaptopIpAddr)
  return controllaptopipaddr_.GetNoArena();
}
inline void flightConfig::set_controllaptopipaddr(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  controllaptopipaddr_.SetNoArena(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get(), value);
  // @@protoc_insertion_point(field_set:flightConfig.controlLaptopIpAddr)
}
#if LANG_CXX11
inline void flightConfig::set_controllaptopipaddr(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  controllaptopipaddr_.SetNoArena(
    &::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flightConfig.controlLaptopIpAddr)
}
#endif
inline void flightConfig::set_controllaptopipaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  controllaptopipaddr_.SetNoArena(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flightConfig.controlLaptopIpAddr)
}
inline void flightConfig::set_controllaptopipaddr(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  controllaptopipaddr_.SetNoArena(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flightConfig.controlLaptopIpAddr)
}
inline ::std::string* flightConfig::mutable_controllaptopipaddr() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:flightConfig.controlLaptopIpAddr)
  return controllaptopipaddr_.MutableNoArena(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get());
}
inline ::std::string* flightConfig::release_controllaptopipaddr() {
  // @@protoc_insertion_point(field_release:flightConfig.controlLaptopIpAddr)
  if (!has_controllaptopipaddr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return controllaptopipaddr_.ReleaseNonDefaultNoArena(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get());
}
inline void flightConfig::set_allocated_controllaptopipaddr(::std::string* controllaptopipaddr) {
  if (controllaptopipaddr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  controllaptopipaddr_.SetAllocatedNoArena(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get(), controllaptopipaddr);
  // @@protoc_insertion_point(field_set_allocated:flightConfig.controlLaptopIpAddr)
}

// -------------------------------------------------------------------

// DefaultFcToNode

// optional .PodStates podState = 1;
inline bool DefaultFcToNode::has_podstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DefaultFcToNode::clear_podstate() {
  podstate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PodStates DefaultFcToNode::podstate() const {
  // @@protoc_insertion_point(field_get:DefaultFcToNode.podState)
  return static_cast< ::PodStates >(podstate_);
}
inline void DefaultFcToNode::set_podstate(::PodStates value) {
  assert(::PodStates_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  podstate_ = value;
  // @@protoc_insertion_point(field_set:DefaultFcToNode.podState)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BrakeNodeStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BrakeNodeStates>() {
  return ::BrakeNodeStates_descriptor();
}
template <> struct is_proto_enum< ::PodStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PodStates>() {
  return ::PodStates_descriptor();
}
template <> struct is_proto_enum< ::MotorStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MotorStates>() {
  return ::MotorStates_descriptor();
}
template <> struct is_proto_enum< ::ControlsInterfaceStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlsInterfaceStates>() {
  return ::ControlsInterfaceStates_descriptor();
}
template <> struct is_proto_enum< ::InverterStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InverterStates>() {
  return ::InverterStates_descriptor();
}
template <> struct is_proto_enum< ::BatteryManagementStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BatteryManagementStates>() {
  return ::BatteryManagementStates_descriptor();
}
template <> struct is_proto_enum< ::RearNodeStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RearNodeStates>() {
  return ::RearNodeStates_descriptor();
}
template <> struct is_proto_enum< ::LvdcNodeStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LvdcNodeStates>() {
  return ::LvdcNodeStates_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Paradigm_2eproto

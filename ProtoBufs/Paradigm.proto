syntax = "proto2";

enum BrakeNodeStates {
    bnsBooting         = 0;
    bnsStandby         = 1;
    bnsArming          = 2;
    bnsArmed           = 3;
    bnsFlight          = 4;
    bnsBraking         = 5;
    bnsVenting         = 6;
    bnsRetrieval       = 7;
    bnsError           = 8;
    bnsSolenoidControl = 9;
}

enum PodStates {
    psBooting       = 0;
    psStandby       = 1;
    psArming        = 2;
    psArmed         = 3;
    psPreFlight     = 4;
    psAcceleration  = 5;
    psCoasting      = 6;
    psBraking       = 7;
    psDisarming     = 8;
    psRetrieval     = 9;
    psEmergency     = 10;
    psShutdown      = 11;
}

enum MotorStates {
    msOff       = 0;
    msCharging  = 1;
    msIdle      = 2;
    msEngaged   = 3;
}

enum ControlsInterfaceStates {
    ciArm = 0;
    ciFlight = 1;
    ciEmergencyStop = 2;
}


enum InverterStates {
    iConnected = 0;

}

enum BatteryManagementStates {
    bmsNominal = 0;
}

enum RearNodeStates {
    rnBooting = 0;
    rnNominal = 1;
}

enum LvdcNodeStates {
    lvdcBooting = 0;
}

message BrakeNodeData {
  required int32 id = 1;

  optional BrakeNodeStates state = 14;

  optional bool sol1 = 2;
  optional bool sol2 = 3;
  optional bool sol3 = 4;
  optional bool sol4 = 5;
  optional bool sol5 = 6;
  optional bool sol6 = 7;


  optional int32 hp  = 8;
  optional int32 lp1 = 9;
  optional int32 lp2 = 10;
  optional int32 lp3 = 11;
  optional int32 lp4 = 12;

  optional int32 temp = 13;

}

message PodCommand {
    optional ControlsInterfaceStates controlsInterfaceState = 1;
    optional PodStates manualPodState = 2;
    optional BrakeNodeStates manualBrakeNodeState = 3;
    optional MotorStates manualMotorState = 4;
    optional LvdcNodeStates manualLvdcNodeState = 5;
    optional bool automaticStateTransitions = 6;
}


message Telemetry {

// States
    optional PodStates podState = 1;
    optional BrakeNodeStates breakNodeState = 2;
    optional MotorStates motorState = 3;
    optional ControlsInterfaceStates controlsInterfaceState = 4;
    optional InverterStates inverterState = 5;
    optional LvdcNodeStates lvdcNodeState = 54;
    optional BatteryManagementStates batteryManagementState = 25;
    optional PodStates breakNodePerceivedPodState = 31;

// Time
    optional int32 missionTime = 6;
    optional int32 flightTime = 7;

// HeatBeats
    repeated int32 heartbeatFlags = 8;
    repeated int32 heartbeatValues = 71;

// Navigation
    optional int32 podPosition = 9;
    optional int32 podVelocity = 10;
    optional int32 podAccelerationX = 11;
    optional int32 podAccelerationY = 12;
    optional int32 podAccelerationZ = 13;
    optional int32 imuVelocity = 14;
    optional int32 imuAccelerationX = 15;
    optional int32 tachometerVelocity = 16;
    optional int32 resolverVelocity = 17;

// Inverter
    optional int32 inverterTemperature1 = 18;
    optional int32 inverterTemperature2 = 19;
    optional int32 inverterTemperature3 = 20;
    optional int32 motorCurrent = 21;
    optional int32 motorVoltage = 22;
    optional int32 inverterVoltages = 23;
    optional int32 inverterCurrents = 24;
    //optional int32 inverterInternalStates = 30;

// HV-BMS
    optional float hvBatteryPackVoltage = 26;
    optional float hvBatteryPackCurrent = 27;
    repeated int32 hvBatteryCellTemperatures = 28;
    optional float hvBatteryPackMinimumCellVoltage = 29;
    optional float hvBatteryPackMaxCellVoltage = 30;

// Brake Node
    optional bool solenoid1 = 32;
    optional bool solenoid2 = 33;
    optional bool solenoid3 = 34;
    optional bool solenoid4 = 35;
    optional bool solenoid5 = 36;
    optional bool solenoid6 = 37;
    optional float highPressure  = 38;
    optional float lowPressure1 = 39;
    optional float lowPressure2 = 40;
    optional float lowPressure3 = 41;
    optional float lowPressure4 = 42;
    optional float pressureVesselTemperature = 43;

    optional int32 electronicsEnclosurePressure = 44;
    optional int32 railDisplacementX = 45;
    optional int32 railDisplacementY = 46;

// Rear Node
    optional int32 tubePressure = 48;
    optional int32 coolantPressure1 = 49;
    optional int32 coolantPressure2 = 50;
    optional int32 coolantPressure3 = 51;
    optional int32 coolantTemperature = 52;
    optional float railTemperature = 53;

// Ghost Train
    optional int32 pack1Voltage = 55;
    optional int32 pack2Voltage = 56;
    optional int32 pack1Current = 57;
    optional int32 pack2Current = 58;
    optional int32 rail1Voltage = 59;
    optional int32 rail2Voltage = 60;
    optional int32 rail3Voltage = 61;
    optional int32 rail4Voltage = 62;
    optional int32 railVoltageFlag = 72;

    optional int32 railCurrentSensor1 = 63;
    optional int32 railCurrentSensor2 = 64;
    optional int32 railCurrentSensor3 = 65;
    optional int32 railCurrentSensor4 = 66;
    optional int32 railCurrentSensor5 = 67;
    optional int32 railCurrentSensor6 = 68;
    optional int32 railCurrentSensor7 = 69;
    optional int32 railCurrentSensor8 = 70;
    optional int32 railCurrentFlag = 73;
}

message FcToBrakeNode {
    optional int32 packetNum = 1;
    optional PodStates podState = 2;
    optional BrakeNodeStates manualNodeState = 3;
}

message DtsNodeToFc {
    required int32 packetNum = 1 [default = 0];
    required BrakeNodeStates brakeNodeState = 2 [default = bnsStandby];
    required bool brakeSolenoidState = 3 [default = false];
    required bool ventSolenoidState = 4 [default = false];
    required float rotorTemperature = 5 [default = 0];
    required float pneumaticTemperature = 6 [default = 0];
    required float tankPressure = 7 [default = 0];
    required float brakePressure = 8 [default = 0];
}

message RearNodeToFc {
    required int32 packetNum = 1 [default = 0];
    required float tubePressure = 2 [default = 0];
    required float coolantPressure1 = 3 [default = 0];
    required float coolantPressure2 = 4 [default = 0];
    required float coolantPressure3 = 5 [default = 0];
    required float coolantTemperature = 6 [default = 0];
}

message flightConfig {
    optional uint32 retrievalTimeout = 1;
    optional uint64 maxFlightTime = 2;
    optional uint64 motorSpeed = 3;
    optional int32 pdsTelemetryPort = 4 [default = 7000];
    optional int32 commandPort = 5 [default = 6000];
    optional uint64 flightLength = 6;
    optional int32 heartbeatTimeout = 7 [default = 10000];
    optional string podDriver = 8;
    optional string controlLaptopIpAddr = 9 [default = "192.168.0.103"];
}

message DefaultFcToNode {
    optional PodStates podState = 1;
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PodTelem.proto

#include "PodTelem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace pds {
class telemetryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<telemetry>
      _instance;
} _telemetry_default_instance_;
}  // namespace pds
namespace protobuf_PodTelem_2eproto {
static void InitDefaultstelemetry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pds::_telemetry_default_instance_;
    new (ptr) ::pds::telemetry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pds::telemetry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_telemetry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstelemetry}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_telemetry.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, podstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, breaknodestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, motorstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, controlsinterfacestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, inverterstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, lvdcnodestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, batterymanagementstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, breaknodeperceivedpodstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, rearnodestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, missiontime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, flighttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, heartbeatflags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, heartbeatvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, podposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, podvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, podaccelerationx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, podaccelerationy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, podaccelerationz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, imuvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, imuaccelerationx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, tachometervelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, resolvervelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, invertertemperature1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, invertertemperature2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, invertertemperature3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, motorcurrent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, motorvoltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, invertervoltages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, invertercurrents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, batterypackvoltages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, batterypackcurrent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, batterycelltemperatures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, batterypackminimumvoltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, batterypackmaxvoltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, sol1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, sol2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, sol3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, sol4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, sol5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, sol6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, lp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, lp2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, lp3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, lp4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, pressurevesseltemperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, electronicsenclosurepressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, raildisplacementx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, raildisplacementy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, tubepressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, coolantpressure1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, coolantpressure2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, coolantpressure3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, coolanttemperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railtemperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, pack1voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, pack2voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, pack1current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, pack2current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, rail1voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, rail2voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, rail3voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, rail4voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railvoltageflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railcurrentsensor1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railcurrentsensor2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railcurrentsensor3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railcurrentsensor4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railcurrentsensor5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railcurrentsensor6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railcurrentsensor7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railcurrentsensor8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pds::telemetry, railcurrentflag_),
  0,
  1,
  2,
  3,
  4,
  49,
  23,
  26,
  42,
  5,
  6,
  ~0u,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  ~0u,
  ~0u,
  ~0u,
  24,
  25,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  43,
  44,
  45,
  46,
  47,
  48,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  66,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  67,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 78, sizeof(::pds::telemetry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pds::_telemetry_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "PodTelem.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016PodTelem.proto\022\003pds\032\014States.proto\"\214\017\n\t"
      "telemetry\022\034\n\010podState\030\001 \001(\0162\n.PodStates\022"
      "(\n\016breakNodeState\030\002 \001(\0162\020.BreakNodeState"
      "s\022 \n\nmotorState\030\003 \001(\0162\014.MotorStates\0228\n\026c"
      "ontrolsInterfaceState\030\004 \001(\0162\030.ControlsIn"
      "terfaceStates\022&\n\rinverterState\030\005 \001(\0162\017.I"
      "nverterStates\022&\n\rlvdcNodeState\0306 \001(\0162\017.L"
      "vdcNodeStates\0228\n\026batteryManagementState\030"
      "\031 \001(\0162\030.BatteryManagementStates\022.\n\032break"
      "NodePerceivedPodState\030\037 \001(\0162\n.PodStates\022"
      "&\n\rrearNodeState\030/ \001(\0162\017.RearNodeStates\022"
      "\023\n\013missionTime\030\006 \001(\005\022\022\n\nflightTime\030\007 \001(\005"
      "\022\026\n\016heartbeatFlags\030\010 \003(\005\022\027\n\017heartbeatVal"
      "ues\030G \003(\005\022\023\n\013podPosition\030\t \001(\005\022\023\n\013podVel"
      "ocity\030\n \001(\005\022\030\n\020podAccelerationX\030\013 \001(\005\022\030\n"
      "\020podAccelerationY\030\014 \001(\005\022\030\n\020podAccelerati"
      "onZ\030\r \001(\005\022\023\n\013imuVelocity\030\016 \001(\005\022\030\n\020imuAcc"
      "elerationX\030\017 \001(\005\022\032\n\022tachometerVelocity\030\020"
      " \001(\005\022\030\n\020resolverVelocity\030\021 \001(\005\022\034\n\024invert"
      "erTemperature1\030\022 \001(\005\022\034\n\024inverterTemperat"
      "ure2\030\023 \001(\005\022\034\n\024inverterTemperature3\030\024 \001(\005"
      "\022\024\n\014motorCurrent\030\025 \001(\005\022\024\n\014motorVoltage\030\026"
      " \001(\005\022\030\n\020inverterVoltages\030\027 \001(\005\022\030\n\020invert"
      "erCurrents\030\030 \001(\005\022\033\n\023batteryPackVoltages\030"
      "\032 \003(\005\022\032\n\022batteryPackCurrent\030\033 \003(\005\022\037\n\027bat"
      "teryCellTemperatures\030\034 \003(\005\022!\n\031batteryPac"
      "kMinimumVoltage\030\035 \001(\005\022\035\n\025batteryPackMaxV"
      "oltage\030\036 \001(\005\022\014\n\004sol1\030  \001(\010\022\014\n\004sol2\030! \001(\010"
      "\022\014\n\004sol3\030\" \001(\010\022\014\n\004sol4\030# \001(\010\022\014\n\004sol5\030$ \001"
      "(\010\022\014\n\004sol6\030% \001(\010\022\n\n\002hp\030& \001(\005\022\013\n\003lp1\030\' \001("
      "\005\022\013\n\003lp2\030( \001(\005\022\013\n\003lp3\030) \001(\005\022\013\n\003lp4\030* \001(\005"
      "\022!\n\031pressureVesselTemperature\030+ \001(\005\022$\n\034e"
      "lectronicsEnclosurePressure\030, \001(\005\022\031\n\021rai"
      "lDisplacementX\030- \001(\005\022\031\n\021railDisplacement"
      "Y\030. \001(\005\022\024\n\014tubePressure\0300 \001(\005\022\030\n\020coolant"
      "Pressure1\0301 \001(\005\022\030\n\020coolantPressure2\0302 \001("
      "\005\022\030\n\020coolantPressure3\0303 \001(\005\022\032\n\022coolantTe"
      "mperature\0304 \001(\005\022\027\n\017railTemperature\0305 \001(\005"
      "\022\024\n\014pack1Voltage\0307 \001(\005\022\024\n\014pack2Voltage\0308"
      " \001(\005\022\024\n\014pack1Current\0309 \001(\005\022\024\n\014pack2Curre"
      "nt\030: \001(\005\022\024\n\014rail1Voltage\030; \001(\005\022\024\n\014rail2V"
      "oltage\030< \001(\005\022\024\n\014rail3Voltage\030= \001(\005\022\024\n\014ra"
      "il4Voltage\030> \001(\005\022\027\n\017railVoltageFlag\030H \001("
      "\005\022\032\n\022railCurrentSensor1\030\? \001(\005\022\032\n\022railCur"
      "rentSensor2\030@ \001(\005\022\032\n\022railCurrentSensor3\030"
      "A \001(\005\022\032\n\022railCurrentSensor4\030B \001(\005\022\032\n\022rai"
      "lCurrentSensor5\030C \001(\005\022\032\n\022railCurrentSens"
      "or6\030D \001(\005\022\032\n\022railCurrentSensor7\030E \001(\005\022\032\n"
      "\022railCurrentSensor8\030F \001(\005\022\027\n\017railCurrent"
      "Flag\030I \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1970);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PodTelem.proto", &protobuf_RegisterTypes);
  ::protobuf_States_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_PodTelem_2eproto
namespace pds {

// ===================================================================

void telemetry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int telemetry::kPodStateFieldNumber;
const int telemetry::kBreakNodeStateFieldNumber;
const int telemetry::kMotorStateFieldNumber;
const int telemetry::kControlsInterfaceStateFieldNumber;
const int telemetry::kInverterStateFieldNumber;
const int telemetry::kLvdcNodeStateFieldNumber;
const int telemetry::kBatteryManagementStateFieldNumber;
const int telemetry::kBreakNodePerceivedPodStateFieldNumber;
const int telemetry::kRearNodeStateFieldNumber;
const int telemetry::kMissionTimeFieldNumber;
const int telemetry::kFlightTimeFieldNumber;
const int telemetry::kHeartbeatFlagsFieldNumber;
const int telemetry::kHeartbeatValuesFieldNumber;
const int telemetry::kPodPositionFieldNumber;
const int telemetry::kPodVelocityFieldNumber;
const int telemetry::kPodAccelerationXFieldNumber;
const int telemetry::kPodAccelerationYFieldNumber;
const int telemetry::kPodAccelerationZFieldNumber;
const int telemetry::kImuVelocityFieldNumber;
const int telemetry::kImuAccelerationXFieldNumber;
const int telemetry::kTachometerVelocityFieldNumber;
const int telemetry::kResolverVelocityFieldNumber;
const int telemetry::kInverterTemperature1FieldNumber;
const int telemetry::kInverterTemperature2FieldNumber;
const int telemetry::kInverterTemperature3FieldNumber;
const int telemetry::kMotorCurrentFieldNumber;
const int telemetry::kMotorVoltageFieldNumber;
const int telemetry::kInverterVoltagesFieldNumber;
const int telemetry::kInverterCurrentsFieldNumber;
const int telemetry::kBatteryPackVoltagesFieldNumber;
const int telemetry::kBatteryPackCurrentFieldNumber;
const int telemetry::kBatteryCellTemperaturesFieldNumber;
const int telemetry::kBatteryPackMinimumVoltageFieldNumber;
const int telemetry::kBatteryPackMaxVoltageFieldNumber;
const int telemetry::kSol1FieldNumber;
const int telemetry::kSol2FieldNumber;
const int telemetry::kSol3FieldNumber;
const int telemetry::kSol4FieldNumber;
const int telemetry::kSol5FieldNumber;
const int telemetry::kSol6FieldNumber;
const int telemetry::kHpFieldNumber;
const int telemetry::kLp1FieldNumber;
const int telemetry::kLp2FieldNumber;
const int telemetry::kLp3FieldNumber;
const int telemetry::kLp4FieldNumber;
const int telemetry::kPressureVesselTemperatureFieldNumber;
const int telemetry::kElectronicsEnclosurePressureFieldNumber;
const int telemetry::kRailDisplacementXFieldNumber;
const int telemetry::kRailDisplacementYFieldNumber;
const int telemetry::kTubePressureFieldNumber;
const int telemetry::kCoolantPressure1FieldNumber;
const int telemetry::kCoolantPressure2FieldNumber;
const int telemetry::kCoolantPressure3FieldNumber;
const int telemetry::kCoolantTemperatureFieldNumber;
const int telemetry::kRailTemperatureFieldNumber;
const int telemetry::kPack1VoltageFieldNumber;
const int telemetry::kPack2VoltageFieldNumber;
const int telemetry::kPack1CurrentFieldNumber;
const int telemetry::kPack2CurrentFieldNumber;
const int telemetry::kRail1VoltageFieldNumber;
const int telemetry::kRail2VoltageFieldNumber;
const int telemetry::kRail3VoltageFieldNumber;
const int telemetry::kRail4VoltageFieldNumber;
const int telemetry::kRailVoltageFlagFieldNumber;
const int telemetry::kRailCurrentSensor1FieldNumber;
const int telemetry::kRailCurrentSensor2FieldNumber;
const int telemetry::kRailCurrentSensor3FieldNumber;
const int telemetry::kRailCurrentSensor4FieldNumber;
const int telemetry::kRailCurrentSensor5FieldNumber;
const int telemetry::kRailCurrentSensor6FieldNumber;
const int telemetry::kRailCurrentSensor7FieldNumber;
const int telemetry::kRailCurrentSensor8FieldNumber;
const int telemetry::kRailCurrentFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

telemetry::telemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PodTelem_2eproto::scc_info_telemetry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:pds.telemetry)
}
telemetry::telemetry(const telemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      heartbeatflags_(from.heartbeatflags_),
      batterypackvoltages_(from.batterypackvoltages_),
      batterypackcurrent_(from.batterypackcurrent_),
      batterycelltemperatures_(from.batterycelltemperatures_),
      heartbeatvalues_(from.heartbeatvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&podstate_, &from.podstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&railcurrentflag_) -
    reinterpret_cast<char*>(&podstate_)) + sizeof(railcurrentflag_));
  // @@protoc_insertion_point(copy_constructor:pds.telemetry)
}

void telemetry::SharedCtor() {
  ::memset(&podstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&railcurrentflag_) -
      reinterpret_cast<char*>(&podstate_)) + sizeof(railcurrentflag_));
}

telemetry::~telemetry() {
  // @@protoc_insertion_point(destructor:pds.telemetry)
  SharedDtor();
}

void telemetry::SharedDtor() {
}

void telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* telemetry::descriptor() {
  ::protobuf_PodTelem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PodTelem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const telemetry& telemetry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PodTelem_2eproto::scc_info_telemetry.base);
  return *internal_default_instance();
}


void telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:pds.telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heartbeatflags_.Clear();
  batterypackvoltages_.Clear();
  batterypackcurrent_.Clear();
  batterycelltemperatures_.Clear();
  heartbeatvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&podstate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&podposition_) -
        reinterpret_cast<char*>(&podstate_)) + sizeof(podposition_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&podvelocity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resolvervelocity_) -
        reinterpret_cast<char*>(&podvelocity_)) + sizeof(resolvervelocity_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&invertertemperature1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batterymanagementstate_) -
        reinterpret_cast<char*>(&invertertemperature1_)) + sizeof(batterymanagementstate_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&batterypackminimumvoltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sol5_) -
        reinterpret_cast<char*>(&batterypackminimumvoltage_)) + sizeof(sol5_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&sol6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&electronicsenclosurepressure_) -
        reinterpret_cast<char*>(&sol6_)) + sizeof(electronicsenclosurepressure_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&raildisplacementx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coolanttemperature_) -
        reinterpret_cast<char*>(&raildisplacementx_)) + sizeof(coolanttemperature_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&railtemperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rail2voltage_) -
        reinterpret_cast<char*>(&railtemperature_)) + sizeof(rail2voltage_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&rail3voltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&railcurrentsensor6_) -
        reinterpret_cast<char*>(&rail3voltage_)) + sizeof(railcurrentsensor6_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 15u) {
    ::memset(&railcurrentsensor7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&railcurrentflag_) -
        reinterpret_cast<char*>(&railcurrentsensor7_)) + sizeof(railcurrentflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool telemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pds.telemetry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PodStates podState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_podstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BreakNodeStates breakNodeState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BreakNodeStates_IsValid(value)) {
            set_breaknodestate(static_cast< ::BreakNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MotorStates motorState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MotorStates_IsValid(value)) {
            set_motorstate(static_cast< ::MotorStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ControlsInterfaceStates controlsInterfaceState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControlsInterfaceStates_IsValid(value)) {
            set_controlsinterfacestate(static_cast< ::ControlsInterfaceStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .InverterStates inverterState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::InverterStates_IsValid(value)) {
            set_inverterstate(static_cast< ::InverterStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 missionTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_missiontime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missiontime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flightTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_flighttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flighttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 heartbeatFlags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_heartbeatflags())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_heartbeatflags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podPosition = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_podposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podVelocity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_podvelocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podAccelerationX = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_podaccelerationx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podaccelerationx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podAccelerationY = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_podaccelerationy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podaccelerationy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podAccelerationZ = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_podaccelerationz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podaccelerationz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imuVelocity = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_imuvelocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imuvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imuAccelerationX = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_imuaccelerationx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imuaccelerationx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tachometerVelocity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_tachometervelocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tachometervelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 resolverVelocity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_resolvervelocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolvervelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterTemperature1 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_invertertemperature1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertertemperature1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterTemperature2 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_invertertemperature2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertertemperature2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterTemperature3 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_invertertemperature3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertertemperature3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 motorCurrent = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_motorcurrent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motorcurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 motorVoltage = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_motorvoltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motorvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterVoltages = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_invertervoltages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertervoltages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterCurrents = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_invertercurrents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertercurrents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BatteryManagementStates batteryManagementState = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BatteryManagementStates_IsValid(value)) {
            set_batterymanagementstate(static_cast< ::BatteryManagementStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                25, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 batteryPackVoltages = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 208u, input, this->mutable_batterypackvoltages())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_batterypackvoltages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 batteryPackCurrent = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216u, input, this->mutable_batterypackcurrent())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_batterypackcurrent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 batteryCellTemperatures = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224u, input, this->mutable_batterycelltemperatures())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_batterycelltemperatures())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 batteryPackMinimumVoltage = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_batterypackminimumvoltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batterypackminimumvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 batteryPackMaxVoltage = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_batterypackmaxvoltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batterypackmaxvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PodStates breakNodePerceivedPodState = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_breaknodeperceivedpodstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                31, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol1 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_sol1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol2 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_sol2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol3 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_sol3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol4 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_sol4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol5 = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_sol5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol6 = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_sol6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hp = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_hp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp1 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_lp1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp2 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_lp2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp3 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_lp3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp4 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_lp4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pressureVesselTemperature = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_pressurevesseltemperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pressurevesseltemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 electronicsEnclosurePressure = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_electronicsenclosurepressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &electronicsenclosurepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railDisplacementX = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_raildisplacementx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raildisplacementx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railDisplacementY = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_raildisplacementy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raildisplacementy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RearNodeStates rearNodeState = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RearNodeStates_IsValid(value)) {
            set_rearnodestate(static_cast< ::RearNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                47, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tubePressure = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_tubepressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tubepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantPressure1 = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_coolantpressure1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolantpressure1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantPressure2 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_coolantpressure2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolantpressure2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantPressure3 = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_coolantpressure3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolantpressure3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantTemperature = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_coolanttemperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolanttemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railTemperature = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_railtemperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railtemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .LvdcNodeStates lvdcNodeState = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LvdcNodeStates_IsValid(value)) {
            set_lvdcnodestate(static_cast< ::LvdcNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                54, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack1Voltage = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_pack1voltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack1voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack2Voltage = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_pack2voltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack2voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack1Current = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_pack1current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack1current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack2Current = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          set_has_pack2current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack2current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail1Voltage = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {
          set_has_rail1voltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail1voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail2Voltage = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_rail2voltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail2voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail3Voltage = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_rail3voltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail3voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail4Voltage = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_rail4voltage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail4voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor1 = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          set_has_railcurrentsensor1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor2 = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          set_has_railcurrentsensor2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor3 = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
          set_has_railcurrentsensor3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor4 = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {
          set_has_railcurrentsensor4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor5 = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {
          set_has_railcurrentsensor5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor6 = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 544 & 0xFF */)) {
          set_has_railcurrentsensor6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor7 = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 552 & 0xFF */)) {
          set_has_railcurrentsensor7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor8 = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_railcurrentsensor8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 heartbeatValues = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 568 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 568u, input, this->mutable_heartbeatvalues())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 570 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_heartbeatvalues())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railVoltageFlag = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 576 & 0xFF */)) {
          set_has_railvoltageflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railvoltageflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentFlag = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 584 & 0xFF */)) {
          set_has_railcurrentflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pds.telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pds.telemetry)
  return false;
#undef DO_
}

void telemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pds.telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PodStates podState = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->podstate(), output);
  }

  // optional .BreakNodeStates breakNodeState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->breaknodestate(), output);
  }

  // optional .MotorStates motorState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->motorstate(), output);
  }

  // optional .ControlsInterfaceStates controlsInterfaceState = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->controlsinterfacestate(), output);
  }

  // optional .InverterStates inverterState = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->inverterstate(), output);
  }

  // optional int32 missionTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->missiontime(), output);
  }

  // optional int32 flightTime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flighttime(), output);
  }

  // repeated int32 heartbeatFlags = 8;
  for (int i = 0, n = this->heartbeatflags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->heartbeatflags(i), output);
  }

  // optional int32 podPosition = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->podposition(), output);
  }

  // optional int32 podVelocity = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->podvelocity(), output);
  }

  // optional int32 podAccelerationX = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->podaccelerationx(), output);
  }

  // optional int32 podAccelerationY = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->podaccelerationy(), output);
  }

  // optional int32 podAccelerationZ = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->podaccelerationz(), output);
  }

  // optional int32 imuVelocity = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->imuvelocity(), output);
  }

  // optional int32 imuAccelerationX = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->imuaccelerationx(), output);
  }

  // optional int32 tachometerVelocity = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tachometervelocity(), output);
  }

  // optional int32 resolverVelocity = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->resolvervelocity(), output);
  }

  // optional int32 inverterTemperature1 = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->invertertemperature1(), output);
  }

  // optional int32 inverterTemperature2 = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->invertertemperature2(), output);
  }

  // optional int32 inverterTemperature3 = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->invertertemperature3(), output);
  }

  // optional int32 motorCurrent = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->motorcurrent(), output);
  }

  // optional int32 motorVoltage = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->motorvoltage(), output);
  }

  // optional int32 inverterVoltages = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->invertervoltages(), output);
  }

  // optional int32 inverterCurrents = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->invertercurrents(), output);
  }

  // optional .BatteryManagementStates batteryManagementState = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->batterymanagementstate(), output);
  }

  // repeated int32 batteryPackVoltages = 26;
  for (int i = 0, n = this->batterypackvoltages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      26, this->batterypackvoltages(i), output);
  }

  // repeated int32 batteryPackCurrent = 27;
  for (int i = 0, n = this->batterypackcurrent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->batterypackcurrent(i), output);
  }

  // repeated int32 batteryCellTemperatures = 28;
  for (int i = 0, n = this->batterycelltemperatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->batterycelltemperatures(i), output);
  }

  // optional int32 batteryPackMinimumVoltage = 29;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->batterypackminimumvoltage(), output);
  }

  // optional int32 batteryPackMaxVoltage = 30;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->batterypackmaxvoltage(), output);
  }

  // optional .PodStates breakNodePerceivedPodState = 31;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->breaknodeperceivedpodstate(), output);
  }

  // optional bool sol1 = 32;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->sol1(), output);
  }

  // optional bool sol2 = 33;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->sol2(), output);
  }

  // optional bool sol3 = 34;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->sol3(), output);
  }

  // optional bool sol4 = 35;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->sol4(), output);
  }

  // optional bool sol5 = 36;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->sol5(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool sol6 = 37;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->sol6(), output);
  }

  // optional int32 hp = 38;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->hp(), output);
  }

  // optional int32 lp1 = 39;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->lp1(), output);
  }

  // optional int32 lp2 = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->lp2(), output);
  }

  // optional int32 lp3 = 41;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->lp3(), output);
  }

  // optional int32 lp4 = 42;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->lp4(), output);
  }

  // optional int32 pressureVesselTemperature = 43;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->pressurevesseltemperature(), output);
  }

  // optional int32 electronicsEnclosurePressure = 44;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->electronicsenclosurepressure(), output);
  }

  // optional int32 railDisplacementX = 45;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->raildisplacementx(), output);
  }

  // optional int32 railDisplacementY = 46;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->raildisplacementy(), output);
  }

  // optional .RearNodeStates rearNodeState = 47;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      47, this->rearnodestate(), output);
  }

  // optional int32 tubePressure = 48;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->tubepressure(), output);
  }

  // optional int32 coolantPressure1 = 49;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->coolantpressure1(), output);
  }

  // optional int32 coolantPressure2 = 50;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->coolantpressure2(), output);
  }

  // optional int32 coolantPressure3 = 51;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->coolantpressure3(), output);
  }

  // optional int32 coolantTemperature = 52;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->coolanttemperature(), output);
  }

  // optional int32 railTemperature = 53;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->railtemperature(), output);
  }

  // optional .LvdcNodeStates lvdcNodeState = 54;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      54, this->lvdcnodestate(), output);
  }

  // optional int32 pack1Voltage = 55;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->pack1voltage(), output);
  }

  // optional int32 pack2Voltage = 56;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->pack2voltage(), output);
  }

  // optional int32 pack1Current = 57;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->pack1current(), output);
  }

  // optional int32 pack2Current = 58;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->pack2current(), output);
  }

  // optional int32 rail1Voltage = 59;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->rail1voltage(), output);
  }

  // optional int32 rail2Voltage = 60;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->rail2voltage(), output);
  }

  // optional int32 rail3Voltage = 61;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->rail3voltage(), output);
  }

  // optional int32 rail4Voltage = 62;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->rail4voltage(), output);
  }

  // optional int32 railCurrentSensor1 = 63;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->railcurrentsensor1(), output);
  }

  // optional int32 railCurrentSensor2 = 64;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->railcurrentsensor2(), output);
  }

  // optional int32 railCurrentSensor3 = 65;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->railcurrentsensor3(), output);
  }

  // optional int32 railCurrentSensor4 = 66;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->railcurrentsensor4(), output);
  }

  // optional int32 railCurrentSensor5 = 67;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->railcurrentsensor5(), output);
  }

  // optional int32 railCurrentSensor6 = 68;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->railcurrentsensor6(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 railCurrentSensor7 = 69;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->railcurrentsensor7(), output);
  }

  // optional int32 railCurrentSensor8 = 70;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->railcurrentsensor8(), output);
  }

  // repeated int32 heartbeatValues = 71;
  for (int i = 0, n = this->heartbeatvalues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      71, this->heartbeatvalues(i), output);
  }

  // optional int32 railVoltageFlag = 72;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->railvoltageflag(), output);
  }

  // optional int32 railCurrentFlag = 73;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->railcurrentflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pds.telemetry)
}

::google::protobuf::uint8* telemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pds.telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PodStates podState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->podstate(), target);
  }

  // optional .BreakNodeStates breakNodeState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->breaknodestate(), target);
  }

  // optional .MotorStates motorState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->motorstate(), target);
  }

  // optional .ControlsInterfaceStates controlsInterfaceState = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->controlsinterfacestate(), target);
  }

  // optional .InverterStates inverterState = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->inverterstate(), target);
  }

  // optional int32 missionTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->missiontime(), target);
  }

  // optional int32 flightTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flighttime(), target);
  }

  // repeated int32 heartbeatFlags = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->heartbeatflags_, target);

  // optional int32 podPosition = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->podposition(), target);
  }

  // optional int32 podVelocity = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->podvelocity(), target);
  }

  // optional int32 podAccelerationX = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->podaccelerationx(), target);
  }

  // optional int32 podAccelerationY = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->podaccelerationy(), target);
  }

  // optional int32 podAccelerationZ = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->podaccelerationz(), target);
  }

  // optional int32 imuVelocity = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->imuvelocity(), target);
  }

  // optional int32 imuAccelerationX = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->imuaccelerationx(), target);
  }

  // optional int32 tachometerVelocity = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tachometervelocity(), target);
  }

  // optional int32 resolverVelocity = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->resolvervelocity(), target);
  }

  // optional int32 inverterTemperature1 = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->invertertemperature1(), target);
  }

  // optional int32 inverterTemperature2 = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->invertertemperature2(), target);
  }

  // optional int32 inverterTemperature3 = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->invertertemperature3(), target);
  }

  // optional int32 motorCurrent = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->motorcurrent(), target);
  }

  // optional int32 motorVoltage = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->motorvoltage(), target);
  }

  // optional int32 inverterVoltages = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->invertervoltages(), target);
  }

  // optional int32 inverterCurrents = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->invertercurrents(), target);
  }

  // optional .BatteryManagementStates batteryManagementState = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->batterymanagementstate(), target);
  }

  // repeated int32 batteryPackVoltages = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(26, this->batterypackvoltages_, target);

  // repeated int32 batteryPackCurrent = 27;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(27, this->batterypackcurrent_, target);

  // repeated int32 batteryCellTemperatures = 28;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(28, this->batterycelltemperatures_, target);

  // optional int32 batteryPackMinimumVoltage = 29;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->batterypackminimumvoltage(), target);
  }

  // optional int32 batteryPackMaxVoltage = 30;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->batterypackmaxvoltage(), target);
  }

  // optional .PodStates breakNodePerceivedPodState = 31;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->breaknodeperceivedpodstate(), target);
  }

  // optional bool sol1 = 32;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->sol1(), target);
  }

  // optional bool sol2 = 33;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->sol2(), target);
  }

  // optional bool sol3 = 34;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->sol3(), target);
  }

  // optional bool sol4 = 35;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->sol4(), target);
  }

  // optional bool sol5 = 36;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->sol5(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool sol6 = 37;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->sol6(), target);
  }

  // optional int32 hp = 38;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->hp(), target);
  }

  // optional int32 lp1 = 39;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->lp1(), target);
  }

  // optional int32 lp2 = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->lp2(), target);
  }

  // optional int32 lp3 = 41;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->lp3(), target);
  }

  // optional int32 lp4 = 42;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->lp4(), target);
  }

  // optional int32 pressureVesselTemperature = 43;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->pressurevesseltemperature(), target);
  }

  // optional int32 electronicsEnclosurePressure = 44;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->electronicsenclosurepressure(), target);
  }

  // optional int32 railDisplacementX = 45;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->raildisplacementx(), target);
  }

  // optional int32 railDisplacementY = 46;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->raildisplacementy(), target);
  }

  // optional .RearNodeStates rearNodeState = 47;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      47, this->rearnodestate(), target);
  }

  // optional int32 tubePressure = 48;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->tubepressure(), target);
  }

  // optional int32 coolantPressure1 = 49;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->coolantpressure1(), target);
  }

  // optional int32 coolantPressure2 = 50;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->coolantpressure2(), target);
  }

  // optional int32 coolantPressure3 = 51;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->coolantpressure3(), target);
  }

  // optional int32 coolantTemperature = 52;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->coolanttemperature(), target);
  }

  // optional int32 railTemperature = 53;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->railtemperature(), target);
  }

  // optional .LvdcNodeStates lvdcNodeState = 54;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      54, this->lvdcnodestate(), target);
  }

  // optional int32 pack1Voltage = 55;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->pack1voltage(), target);
  }

  // optional int32 pack2Voltage = 56;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->pack2voltage(), target);
  }

  // optional int32 pack1Current = 57;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->pack1current(), target);
  }

  // optional int32 pack2Current = 58;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->pack2current(), target);
  }

  // optional int32 rail1Voltage = 59;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->rail1voltage(), target);
  }

  // optional int32 rail2Voltage = 60;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->rail2voltage(), target);
  }

  // optional int32 rail3Voltage = 61;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->rail3voltage(), target);
  }

  // optional int32 rail4Voltage = 62;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->rail4voltage(), target);
  }

  // optional int32 railCurrentSensor1 = 63;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->railcurrentsensor1(), target);
  }

  // optional int32 railCurrentSensor2 = 64;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->railcurrentsensor2(), target);
  }

  // optional int32 railCurrentSensor3 = 65;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->railcurrentsensor3(), target);
  }

  // optional int32 railCurrentSensor4 = 66;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->railcurrentsensor4(), target);
  }

  // optional int32 railCurrentSensor5 = 67;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->railcurrentsensor5(), target);
  }

  // optional int32 railCurrentSensor6 = 68;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->railcurrentsensor6(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 railCurrentSensor7 = 69;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->railcurrentsensor7(), target);
  }

  // optional int32 railCurrentSensor8 = 70;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->railcurrentsensor8(), target);
  }

  // repeated int32 heartbeatValues = 71;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(71, this->heartbeatvalues_, target);

  // optional int32 railVoltageFlag = 72;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->railvoltageflag(), target);
  }

  // optional int32 railCurrentFlag = 73;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->railcurrentflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pds.telemetry)
  return target;
}

size_t telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pds.telemetry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 heartbeatFlags = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->heartbeatflags_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->heartbeatflags_size());
    total_size += data_size;
  }

  // repeated int32 batteryPackVoltages = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->batterypackvoltages_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->batterypackvoltages_size());
    total_size += data_size;
  }

  // repeated int32 batteryPackCurrent = 27;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->batterypackcurrent_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->batterypackcurrent_size());
    total_size += data_size;
  }

  // repeated int32 batteryCellTemperatures = 28;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->batterycelltemperatures_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->batterycelltemperatures_size());
    total_size += data_size;
  }

  // repeated int32 heartbeatValues = 71;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->heartbeatvalues_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->heartbeatvalues_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .PodStates podState = 1;
    if (has_podstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->podstate());
    }

    // optional .BreakNodeStates breakNodeState = 2;
    if (has_breaknodestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->breaknodestate());
    }

    // optional .MotorStates motorState = 3;
    if (has_motorstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->motorstate());
    }

    // optional .ControlsInterfaceStates controlsInterfaceState = 4;
    if (has_controlsinterfacestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->controlsinterfacestate());
    }

    // optional .InverterStates inverterState = 5;
    if (has_inverterstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inverterstate());
    }

    // optional int32 missionTime = 6;
    if (has_missiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missiontime());
    }

    // optional int32 flightTime = 7;
    if (has_flighttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flighttime());
    }

    // optional int32 podPosition = 9;
    if (has_podposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podposition());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 podVelocity = 10;
    if (has_podvelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podvelocity());
    }

    // optional int32 podAccelerationX = 11;
    if (has_podaccelerationx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podaccelerationx());
    }

    // optional int32 podAccelerationY = 12;
    if (has_podaccelerationy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podaccelerationy());
    }

    // optional int32 podAccelerationZ = 13;
    if (has_podaccelerationz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podaccelerationz());
    }

    // optional int32 imuVelocity = 14;
    if (has_imuvelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imuvelocity());
    }

    // optional int32 imuAccelerationX = 15;
    if (has_imuaccelerationx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imuaccelerationx());
    }

    // optional int32 tachometerVelocity = 16;
    if (has_tachometervelocity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tachometervelocity());
    }

    // optional int32 resolverVelocity = 17;
    if (has_resolvervelocity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolvervelocity());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 inverterTemperature1 = 18;
    if (has_invertertemperature1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertertemperature1());
    }

    // optional int32 inverterTemperature2 = 19;
    if (has_invertertemperature2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertertemperature2());
    }

    // optional int32 inverterTemperature3 = 20;
    if (has_invertertemperature3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertertemperature3());
    }

    // optional int32 motorCurrent = 21;
    if (has_motorcurrent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motorcurrent());
    }

    // optional int32 motorVoltage = 22;
    if (has_motorvoltage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motorvoltage());
    }

    // optional int32 inverterVoltages = 23;
    if (has_invertervoltages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertervoltages());
    }

    // optional int32 inverterCurrents = 24;
    if (has_invertercurrents()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertercurrents());
    }

    // optional .BatteryManagementStates batteryManagementState = 25;
    if (has_batterymanagementstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->batterymanagementstate());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 batteryPackMinimumVoltage = 29;
    if (has_batterypackminimumvoltage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batterypackminimumvoltage());
    }

    // optional int32 batteryPackMaxVoltage = 30;
    if (has_batterypackmaxvoltage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batterypackmaxvoltage());
    }

    // optional .PodStates breakNodePerceivedPodState = 31;
    if (has_breaknodeperceivedpodstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->breaknodeperceivedpodstate());
    }

    // optional bool sol1 = 32;
    if (has_sol1()) {
      total_size += 2 + 1;
    }

    // optional bool sol2 = 33;
    if (has_sol2()) {
      total_size += 2 + 1;
    }

    // optional bool sol3 = 34;
    if (has_sol3()) {
      total_size += 2 + 1;
    }

    // optional bool sol4 = 35;
    if (has_sol4()) {
      total_size += 2 + 1;
    }

    // optional bool sol5 = 36;
    if (has_sol5()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool sol6 = 37;
    if (has_sol6()) {
      total_size += 2 + 1;
    }

    // optional int32 hp = 38;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 lp1 = 39;
    if (has_lp1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp1());
    }

    // optional int32 lp2 = 40;
    if (has_lp2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp2());
    }

    // optional int32 lp3 = 41;
    if (has_lp3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp3());
    }

    // optional int32 lp4 = 42;
    if (has_lp4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp4());
    }

    // optional int32 pressureVesselTemperature = 43;
    if (has_pressurevesseltemperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pressurevesseltemperature());
    }

    // optional int32 electronicsEnclosurePressure = 44;
    if (has_electronicsenclosurepressure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->electronicsenclosurepressure());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional int32 railDisplacementX = 45;
    if (has_raildisplacementx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raildisplacementx());
    }

    // optional int32 railDisplacementY = 46;
    if (has_raildisplacementy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raildisplacementy());
    }

    // optional .RearNodeStates rearNodeState = 47;
    if (has_rearnodestate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rearnodestate());
    }

    // optional int32 tubePressure = 48;
    if (has_tubepressure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tubepressure());
    }

    // optional int32 coolantPressure1 = 49;
    if (has_coolantpressure1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolantpressure1());
    }

    // optional int32 coolantPressure2 = 50;
    if (has_coolantpressure2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolantpressure2());
    }

    // optional int32 coolantPressure3 = 51;
    if (has_coolantpressure3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolantpressure3());
    }

    // optional int32 coolantTemperature = 52;
    if (has_coolanttemperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolanttemperature());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional int32 railTemperature = 53;
    if (has_railtemperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railtemperature());
    }

    // optional .LvdcNodeStates lvdcNodeState = 54;
    if (has_lvdcnodestate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lvdcnodestate());
    }

    // optional int32 pack1Voltage = 55;
    if (has_pack1voltage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack1voltage());
    }

    // optional int32 pack2Voltage = 56;
    if (has_pack2voltage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack2voltage());
    }

    // optional int32 pack1Current = 57;
    if (has_pack1current()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack1current());
    }

    // optional int32 pack2Current = 58;
    if (has_pack2current()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack2current());
    }

    // optional int32 rail1Voltage = 59;
    if (has_rail1voltage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail1voltage());
    }

    // optional int32 rail2Voltage = 60;
    if (has_rail2voltage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail2voltage());
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional int32 rail3Voltage = 61;
    if (has_rail3voltage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail3voltage());
    }

    // optional int32 rail4Voltage = 62;
    if (has_rail4voltage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail4voltage());
    }

    // optional int32 railCurrentSensor1 = 63;
    if (has_railcurrentsensor1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor1());
    }

    // optional int32 railCurrentSensor2 = 64;
    if (has_railcurrentsensor2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor2());
    }

    // optional int32 railCurrentSensor3 = 65;
    if (has_railcurrentsensor3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor3());
    }

    // optional int32 railCurrentSensor4 = 66;
    if (has_railcurrentsensor4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor4());
    }

    // optional int32 railCurrentSensor5 = 67;
    if (has_railcurrentsensor5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor5());
    }

    // optional int32 railCurrentSensor6 = 68;
    if (has_railcurrentsensor6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor6());
    }

  }
  if (_has_bits_[64 / 32] & 15u) {
    // optional int32 railCurrentSensor7 = 69;
    if (has_railcurrentsensor7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor7());
    }

    // optional int32 railCurrentSensor8 = 70;
    if (has_railcurrentsensor8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor8());
    }

    // optional int32 railVoltageFlag = 72;
    if (has_railvoltageflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railvoltageflag());
    }

    // optional int32 railCurrentFlag = 73;
    if (has_railcurrentflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void telemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pds.telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const telemetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const telemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pds.telemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pds.telemetry)
    MergeFrom(*source);
  }
}

void telemetry::MergeFrom(const telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pds.telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heartbeatflags_.MergeFrom(from.heartbeatflags_);
  batterypackvoltages_.MergeFrom(from.batterypackvoltages_);
  batterypackcurrent_.MergeFrom(from.batterypackcurrent_);
  batterycelltemperatures_.MergeFrom(from.batterycelltemperatures_);
  heartbeatvalues_.MergeFrom(from.heartbeatvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      podstate_ = from.podstate_;
    }
    if (cached_has_bits & 0x00000002u) {
      breaknodestate_ = from.breaknodestate_;
    }
    if (cached_has_bits & 0x00000004u) {
      motorstate_ = from.motorstate_;
    }
    if (cached_has_bits & 0x00000008u) {
      controlsinterfacestate_ = from.controlsinterfacestate_;
    }
    if (cached_has_bits & 0x00000010u) {
      inverterstate_ = from.inverterstate_;
    }
    if (cached_has_bits & 0x00000020u) {
      missiontime_ = from.missiontime_;
    }
    if (cached_has_bits & 0x00000040u) {
      flighttime_ = from.flighttime_;
    }
    if (cached_has_bits & 0x00000080u) {
      podposition_ = from.podposition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      podvelocity_ = from.podvelocity_;
    }
    if (cached_has_bits & 0x00000200u) {
      podaccelerationx_ = from.podaccelerationx_;
    }
    if (cached_has_bits & 0x00000400u) {
      podaccelerationy_ = from.podaccelerationy_;
    }
    if (cached_has_bits & 0x00000800u) {
      podaccelerationz_ = from.podaccelerationz_;
    }
    if (cached_has_bits & 0x00001000u) {
      imuvelocity_ = from.imuvelocity_;
    }
    if (cached_has_bits & 0x00002000u) {
      imuaccelerationx_ = from.imuaccelerationx_;
    }
    if (cached_has_bits & 0x00004000u) {
      tachometervelocity_ = from.tachometervelocity_;
    }
    if (cached_has_bits & 0x00008000u) {
      resolvervelocity_ = from.resolvervelocity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      invertertemperature1_ = from.invertertemperature1_;
    }
    if (cached_has_bits & 0x00020000u) {
      invertertemperature2_ = from.invertertemperature2_;
    }
    if (cached_has_bits & 0x00040000u) {
      invertertemperature3_ = from.invertertemperature3_;
    }
    if (cached_has_bits & 0x00080000u) {
      motorcurrent_ = from.motorcurrent_;
    }
    if (cached_has_bits & 0x00100000u) {
      motorvoltage_ = from.motorvoltage_;
    }
    if (cached_has_bits & 0x00200000u) {
      invertervoltages_ = from.invertervoltages_;
    }
    if (cached_has_bits & 0x00400000u) {
      invertercurrents_ = from.invertercurrents_;
    }
    if (cached_has_bits & 0x00800000u) {
      batterymanagementstate_ = from.batterymanagementstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      batterypackminimumvoltage_ = from.batterypackminimumvoltage_;
    }
    if (cached_has_bits & 0x02000000u) {
      batterypackmaxvoltage_ = from.batterypackmaxvoltage_;
    }
    if (cached_has_bits & 0x04000000u) {
      breaknodeperceivedpodstate_ = from.breaknodeperceivedpodstate_;
    }
    if (cached_has_bits & 0x08000000u) {
      sol1_ = from.sol1_;
    }
    if (cached_has_bits & 0x10000000u) {
      sol2_ = from.sol2_;
    }
    if (cached_has_bits & 0x20000000u) {
      sol3_ = from.sol3_;
    }
    if (cached_has_bits & 0x40000000u) {
      sol4_ = from.sol4_;
    }
    if (cached_has_bits & 0x80000000u) {
      sol5_ = from.sol5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sol6_ = from.sol6_;
    }
    if (cached_has_bits & 0x00000002u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      lp1_ = from.lp1_;
    }
    if (cached_has_bits & 0x00000008u) {
      lp2_ = from.lp2_;
    }
    if (cached_has_bits & 0x00000010u) {
      lp3_ = from.lp3_;
    }
    if (cached_has_bits & 0x00000020u) {
      lp4_ = from.lp4_;
    }
    if (cached_has_bits & 0x00000040u) {
      pressurevesseltemperature_ = from.pressurevesseltemperature_;
    }
    if (cached_has_bits & 0x00000080u) {
      electronicsenclosurepressure_ = from.electronicsenclosurepressure_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      raildisplacementx_ = from.raildisplacementx_;
    }
    if (cached_has_bits & 0x00000200u) {
      raildisplacementy_ = from.raildisplacementy_;
    }
    if (cached_has_bits & 0x00000400u) {
      rearnodestate_ = from.rearnodestate_;
    }
    if (cached_has_bits & 0x00000800u) {
      tubepressure_ = from.tubepressure_;
    }
    if (cached_has_bits & 0x00001000u) {
      coolantpressure1_ = from.coolantpressure1_;
    }
    if (cached_has_bits & 0x00002000u) {
      coolantpressure2_ = from.coolantpressure2_;
    }
    if (cached_has_bits & 0x00004000u) {
      coolantpressure3_ = from.coolantpressure3_;
    }
    if (cached_has_bits & 0x00008000u) {
      coolanttemperature_ = from.coolanttemperature_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      railtemperature_ = from.railtemperature_;
    }
    if (cached_has_bits & 0x00020000u) {
      lvdcnodestate_ = from.lvdcnodestate_;
    }
    if (cached_has_bits & 0x00040000u) {
      pack1voltage_ = from.pack1voltage_;
    }
    if (cached_has_bits & 0x00080000u) {
      pack2voltage_ = from.pack2voltage_;
    }
    if (cached_has_bits & 0x00100000u) {
      pack1current_ = from.pack1current_;
    }
    if (cached_has_bits & 0x00200000u) {
      pack2current_ = from.pack2current_;
    }
    if (cached_has_bits & 0x00400000u) {
      rail1voltage_ = from.rail1voltage_;
    }
    if (cached_has_bits & 0x00800000u) {
      rail2voltage_ = from.rail2voltage_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      rail3voltage_ = from.rail3voltage_;
    }
    if (cached_has_bits & 0x02000000u) {
      rail4voltage_ = from.rail4voltage_;
    }
    if (cached_has_bits & 0x04000000u) {
      railcurrentsensor1_ = from.railcurrentsensor1_;
    }
    if (cached_has_bits & 0x08000000u) {
      railcurrentsensor2_ = from.railcurrentsensor2_;
    }
    if (cached_has_bits & 0x10000000u) {
      railcurrentsensor3_ = from.railcurrentsensor3_;
    }
    if (cached_has_bits & 0x20000000u) {
      railcurrentsensor4_ = from.railcurrentsensor4_;
    }
    if (cached_has_bits & 0x40000000u) {
      railcurrentsensor5_ = from.railcurrentsensor5_;
    }
    if (cached_has_bits & 0x80000000u) {
      railcurrentsensor6_ = from.railcurrentsensor6_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      railcurrentsensor7_ = from.railcurrentsensor7_;
    }
    if (cached_has_bits & 0x00000002u) {
      railcurrentsensor8_ = from.railcurrentsensor8_;
    }
    if (cached_has_bits & 0x00000004u) {
      railvoltageflag_ = from.railvoltageflag_;
    }
    if (cached_has_bits & 0x00000008u) {
      railcurrentflag_ = from.railcurrentflag_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void telemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pds.telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void telemetry::CopyFrom(const telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pds.telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool telemetry::IsInitialized() const {
  return true;
}

void telemetry::Swap(telemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void telemetry::InternalSwap(telemetry* other) {
  using std::swap;
  heartbeatflags_.InternalSwap(&other->heartbeatflags_);
  batterypackvoltages_.InternalSwap(&other->batterypackvoltages_);
  batterypackcurrent_.InternalSwap(&other->batterypackcurrent_);
  batterycelltemperatures_.InternalSwap(&other->batterycelltemperatures_);
  heartbeatvalues_.InternalSwap(&other->heartbeatvalues_);
  swap(podstate_, other->podstate_);
  swap(breaknodestate_, other->breaknodestate_);
  swap(motorstate_, other->motorstate_);
  swap(controlsinterfacestate_, other->controlsinterfacestate_);
  swap(inverterstate_, other->inverterstate_);
  swap(missiontime_, other->missiontime_);
  swap(flighttime_, other->flighttime_);
  swap(podposition_, other->podposition_);
  swap(podvelocity_, other->podvelocity_);
  swap(podaccelerationx_, other->podaccelerationx_);
  swap(podaccelerationy_, other->podaccelerationy_);
  swap(podaccelerationz_, other->podaccelerationz_);
  swap(imuvelocity_, other->imuvelocity_);
  swap(imuaccelerationx_, other->imuaccelerationx_);
  swap(tachometervelocity_, other->tachometervelocity_);
  swap(resolvervelocity_, other->resolvervelocity_);
  swap(invertertemperature1_, other->invertertemperature1_);
  swap(invertertemperature2_, other->invertertemperature2_);
  swap(invertertemperature3_, other->invertertemperature3_);
  swap(motorcurrent_, other->motorcurrent_);
  swap(motorvoltage_, other->motorvoltage_);
  swap(invertervoltages_, other->invertervoltages_);
  swap(invertercurrents_, other->invertercurrents_);
  swap(batterymanagementstate_, other->batterymanagementstate_);
  swap(batterypackminimumvoltage_, other->batterypackminimumvoltage_);
  swap(batterypackmaxvoltage_, other->batterypackmaxvoltage_);
  swap(breaknodeperceivedpodstate_, other->breaknodeperceivedpodstate_);
  swap(sol1_, other->sol1_);
  swap(sol2_, other->sol2_);
  swap(sol3_, other->sol3_);
  swap(sol4_, other->sol4_);
  swap(sol5_, other->sol5_);
  swap(sol6_, other->sol6_);
  swap(hp_, other->hp_);
  swap(lp1_, other->lp1_);
  swap(lp2_, other->lp2_);
  swap(lp3_, other->lp3_);
  swap(lp4_, other->lp4_);
  swap(pressurevesseltemperature_, other->pressurevesseltemperature_);
  swap(electronicsenclosurepressure_, other->electronicsenclosurepressure_);
  swap(raildisplacementx_, other->raildisplacementx_);
  swap(raildisplacementy_, other->raildisplacementy_);
  swap(rearnodestate_, other->rearnodestate_);
  swap(tubepressure_, other->tubepressure_);
  swap(coolantpressure1_, other->coolantpressure1_);
  swap(coolantpressure2_, other->coolantpressure2_);
  swap(coolantpressure3_, other->coolantpressure3_);
  swap(coolanttemperature_, other->coolanttemperature_);
  swap(railtemperature_, other->railtemperature_);
  swap(lvdcnodestate_, other->lvdcnodestate_);
  swap(pack1voltage_, other->pack1voltage_);
  swap(pack2voltage_, other->pack2voltage_);
  swap(pack1current_, other->pack1current_);
  swap(pack2current_, other->pack2current_);
  swap(rail1voltage_, other->rail1voltage_);
  swap(rail2voltage_, other->rail2voltage_);
  swap(rail3voltage_, other->rail3voltage_);
  swap(rail4voltage_, other->rail4voltage_);
  swap(railcurrentsensor1_, other->railcurrentsensor1_);
  swap(railcurrentsensor2_, other->railcurrentsensor2_);
  swap(railcurrentsensor3_, other->railcurrentsensor3_);
  swap(railcurrentsensor4_, other->railcurrentsensor4_);
  swap(railcurrentsensor5_, other->railcurrentsensor5_);
  swap(railcurrentsensor6_, other->railcurrentsensor6_);
  swap(railcurrentsensor7_, other->railcurrentsensor7_);
  swap(railcurrentsensor8_, other->railcurrentsensor8_);
  swap(railvoltageflag_, other->railvoltageflag_);
  swap(railcurrentflag_, other->railcurrentflag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata telemetry::GetMetadata() const {
  protobuf_PodTelem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PodTelem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pds
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pds::telemetry* Arena::CreateMaybeMessage< ::pds::telemetry >(Arena* arena) {
  return Arena::CreateInternal< ::pds::telemetry >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Paradigm.proto

#include "Paradigm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class brakeNodeDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<brakeNodeData> _instance;
} _brakeNodeData_default_instance_;
class podCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<podCommand> _instance;
} _podCommand_default_instance_;
class telemetryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<telemetry> _instance;
} _telemetry_default_instance_;
static void InitDefaultsbrakeNodeData_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_brakeNodeData_default_instance_;
    new (ptr) ::brakeNodeData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::brakeNodeData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_brakeNodeData_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbrakeNodeData_Paradigm_2eproto}, {}};

static void InitDefaultspodCommand_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_podCommand_default_instance_;
    new (ptr) ::podCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::podCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_podCommand_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspodCommand_Paradigm_2eproto}, {}};

static void InitDefaultstelemetry_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_telemetry_default_instance_;
    new (ptr) ::telemetry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_telemetry_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstelemetry_Paradigm_2eproto}, {}};

void InitDefaults_Paradigm_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_brakeNodeData_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_podCommand_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_telemetry_Paradigm_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Paradigm_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_Paradigm_2eproto[9];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Paradigm_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Paradigm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, id_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, state_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, sol1_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, sol2_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, sol3_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, sol4_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, sol5_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, sol6_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, hp_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, lp1_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, lp2_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, lp3_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, lp4_),
  PROTOBUF_FIELD_OFFSET(::brakeNodeData, temp_),
  0,
  13,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::podCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::podCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::podCommand, controlsinterfacestate_),
  PROTOBUF_FIELD_OFFSET(::podCommand, manualpodstate_),
  PROTOBUF_FIELD_OFFSET(::podCommand, manualbrakenodestate_),
  PROTOBUF_FIELD_OFFSET(::podCommand, manualmotorstate_),
  PROTOBUF_FIELD_OFFSET(::podCommand, manuallvdcnodestate_),
  PROTOBUF_FIELD_OFFSET(::podCommand, automaticstatetransitions_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::telemetry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::telemetry, podstate_),
  PROTOBUF_FIELD_OFFSET(::telemetry, breaknodestate_),
  PROTOBUF_FIELD_OFFSET(::telemetry, motorstate_),
  PROTOBUF_FIELD_OFFSET(::telemetry, controlsinterfacestate_),
  PROTOBUF_FIELD_OFFSET(::telemetry, inverterstate_),
  PROTOBUF_FIELD_OFFSET(::telemetry, lvdcnodestate_),
  PROTOBUF_FIELD_OFFSET(::telemetry, batterymanagementstate_),
  PROTOBUF_FIELD_OFFSET(::telemetry, breaknodeperceivedpodstate_),
  PROTOBUF_FIELD_OFFSET(::telemetry, missiontime_),
  PROTOBUF_FIELD_OFFSET(::telemetry, flighttime_),
  PROTOBUF_FIELD_OFFSET(::telemetry, heartbeatflags_),
  PROTOBUF_FIELD_OFFSET(::telemetry, heartbeatvalues_),
  PROTOBUF_FIELD_OFFSET(::telemetry, podposition_),
  PROTOBUF_FIELD_OFFSET(::telemetry, podvelocity_),
  PROTOBUF_FIELD_OFFSET(::telemetry, podaccelerationx_),
  PROTOBUF_FIELD_OFFSET(::telemetry, podaccelerationy_),
  PROTOBUF_FIELD_OFFSET(::telemetry, podaccelerationz_),
  PROTOBUF_FIELD_OFFSET(::telemetry, imuvelocity_),
  PROTOBUF_FIELD_OFFSET(::telemetry, imuaccelerationx_),
  PROTOBUF_FIELD_OFFSET(::telemetry, tachometervelocity_),
  PROTOBUF_FIELD_OFFSET(::telemetry, resolvervelocity_),
  PROTOBUF_FIELD_OFFSET(::telemetry, invertertemperature1_),
  PROTOBUF_FIELD_OFFSET(::telemetry, invertertemperature2_),
  PROTOBUF_FIELD_OFFSET(::telemetry, invertertemperature3_),
  PROTOBUF_FIELD_OFFSET(::telemetry, motorcurrent_),
  PROTOBUF_FIELD_OFFSET(::telemetry, motorvoltage_),
  PROTOBUF_FIELD_OFFSET(::telemetry, invertervoltages_),
  PROTOBUF_FIELD_OFFSET(::telemetry, invertercurrents_),
  PROTOBUF_FIELD_OFFSET(::telemetry, batterypackvoltages_),
  PROTOBUF_FIELD_OFFSET(::telemetry, batterypackcurrent_),
  PROTOBUF_FIELD_OFFSET(::telemetry, batterycelltemperatures_),
  PROTOBUF_FIELD_OFFSET(::telemetry, batterypackminimumvoltage_),
  PROTOBUF_FIELD_OFFSET(::telemetry, batterypackmaxvoltage_),
  PROTOBUF_FIELD_OFFSET(::telemetry, sol1_),
  PROTOBUF_FIELD_OFFSET(::telemetry, sol2_),
  PROTOBUF_FIELD_OFFSET(::telemetry, sol3_),
  PROTOBUF_FIELD_OFFSET(::telemetry, sol4_),
  PROTOBUF_FIELD_OFFSET(::telemetry, sol5_),
  PROTOBUF_FIELD_OFFSET(::telemetry, sol6_),
  PROTOBUF_FIELD_OFFSET(::telemetry, hp_),
  PROTOBUF_FIELD_OFFSET(::telemetry, lp1_),
  PROTOBUF_FIELD_OFFSET(::telemetry, lp2_),
  PROTOBUF_FIELD_OFFSET(::telemetry, lp3_),
  PROTOBUF_FIELD_OFFSET(::telemetry, lp4_),
  PROTOBUF_FIELD_OFFSET(::telemetry, pressurevesseltemperature_),
  PROTOBUF_FIELD_OFFSET(::telemetry, electronicsenclosurepressure_),
  PROTOBUF_FIELD_OFFSET(::telemetry, raildisplacementx_),
  PROTOBUF_FIELD_OFFSET(::telemetry, raildisplacementy_),
  PROTOBUF_FIELD_OFFSET(::telemetry, tubepressure_),
  PROTOBUF_FIELD_OFFSET(::telemetry, coolantpressure1_),
  PROTOBUF_FIELD_OFFSET(::telemetry, coolantpressure2_),
  PROTOBUF_FIELD_OFFSET(::telemetry, coolantpressure3_),
  PROTOBUF_FIELD_OFFSET(::telemetry, coolanttemperature_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railtemperature_),
  PROTOBUF_FIELD_OFFSET(::telemetry, pack1voltage_),
  PROTOBUF_FIELD_OFFSET(::telemetry, pack2voltage_),
  PROTOBUF_FIELD_OFFSET(::telemetry, pack1current_),
  PROTOBUF_FIELD_OFFSET(::telemetry, pack2current_),
  PROTOBUF_FIELD_OFFSET(::telemetry, rail1voltage_),
  PROTOBUF_FIELD_OFFSET(::telemetry, rail2voltage_),
  PROTOBUF_FIELD_OFFSET(::telemetry, rail3voltage_),
  PROTOBUF_FIELD_OFFSET(::telemetry, rail4voltage_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railvoltageflag_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railcurrentsensor1_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railcurrentsensor2_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railcurrentsensor3_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railcurrentsensor4_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railcurrentsensor5_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railcurrentsensor6_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railcurrentsensor7_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railcurrentsensor8_),
  PROTOBUF_FIELD_OFFSET(::telemetry, railcurrentflag_),
  0,
  1,
  2,
  3,
  4,
  48,
  23,
  26,
  5,
  6,
  ~0u,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  ~0u,
  ~0u,
  ~0u,
  24,
  25,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  65,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  66,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::brakeNodeData)},
  { 33, 44, sizeof(::podCommand)},
  { 50, 127, sizeof(::telemetry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_brakeNodeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_podCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_telemetry_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Paradigm_2eproto = {
  {}, AddDescriptors_Paradigm_2eproto, "Paradigm.proto", schemas,
  file_default_instances, TableStruct_Paradigm_2eproto::offsets,
  file_level_metadata_Paradigm_2eproto, 3, file_level_enum_descriptors_Paradigm_2eproto, file_level_service_descriptors_Paradigm_2eproto,
};

const char descriptor_table_protodef_Paradigm_2eproto[] =
  "\n\016Paradigm.proto\"\212\003\n\rbrakeNodeData\022\n\n\002id"
  "\030\001 \002(\005\022,\n\005state\030\016 \001(\0162\035.brakeNodeData.br"
  "eakNodeState\022\014\n\004sol1\030\002 \001(\010\022\014\n\004sol2\030\003 \001(\010"
  "\022\014\n\004sol3\030\004 \001(\010\022\014\n\004sol4\030\005 \001(\010\022\014\n\004sol5\030\006 \001"
  "(\010\022\014\n\004sol6\030\007 \001(\010\022\n\n\002hp\030\010 \001(\005\022\013\n\003lp1\030\t \001("
  "\005\022\013\n\003lp2\030\n \001(\005\022\013\n\003lp3\030\013 \001(\005\022\013\n\003lp4\030\014 \001(\005"
  "\022\014\n\004temp\030\r \001(\005\"\234\001\n\016breakNodeState\022\016\n\nbns"
  "Booting\020\000\022\016\n\nbnsStandby\020\001\022\r\n\tbnsArming\020\002"
  "\022\014\n\010bnsArmed\020\003\022\r\n\tbnsFlight\020\004\022\016\n\nbnsBrak"
  "ing\020\005\022\016\n\nbnsVenting\020\006\022\020\n\014bnsRetrieval\020\007\022"
  "\014\n\010bnsError\020\010\"\223\002\n\npodCommand\0228\n\026controls"
  "InterfaceState\030\001 \001(\0162\030.ControlsInterface"
  "States\022\"\n\016manualPodState\030\002 \001(\0162\n.PodStat"
  "es\022.\n\024manualBrakeNodeState\030\003 \001(\0162\020.Brake"
  "NodeStates\022&\n\020manualMotorState\030\004 \001(\0162\014.M"
  "otorStates\022,\n\023manualLvdcNodeState\030\005 \001(\0162"
  "\017.LvdcNodeStates\022!\n\031automaticStateTransi"
  "tions\030\006 \001(\010\"\344\016\n\ttelemetry\022\034\n\010podState\030\001 "
  "\001(\0162\n.PodStates\022(\n\016breakNodeState\030\002 \001(\0162"
  "\020.BrakeNodeStates\022 \n\nmotorState\030\003 \001(\0162\014."
  "MotorStates\0228\n\026controlsInterfaceState\030\004 "
  "\001(\0162\030.ControlsInterfaceStates\022&\n\rinverte"
  "rState\030\005 \001(\0162\017.InverterStates\022&\n\rlvdcNod"
  "eState\0306 \001(\0162\017.LvdcNodeStates\0228\n\026battery"
  "ManagementState\030\031 \001(\0162\030.BatteryManagemen"
  "tStates\022.\n\032breakNodePerceivedPodState\030\037 "
  "\001(\0162\n.PodStates\022\023\n\013missionTime\030\006 \001(\005\022\022\n\n"
  "flightTime\030\007 \001(\005\022\026\n\016heartbeatFlags\030\010 \003(\005"
  "\022\027\n\017heartbeatValues\030G \003(\005\022\023\n\013podPosition"
  "\030\t \001(\005\022\023\n\013podVelocity\030\n \001(\005\022\030\n\020podAccele"
  "rationX\030\013 \001(\005\022\030\n\020podAccelerationY\030\014 \001(\005\022"
  "\030\n\020podAccelerationZ\030\r \001(\005\022\023\n\013imuVelocity"
  "\030\016 \001(\005\022\030\n\020imuAccelerationX\030\017 \001(\005\022\032\n\022tach"
  "ometerVelocity\030\020 \001(\005\022\030\n\020resolverVelocity"
  "\030\021 \001(\005\022\034\n\024inverterTemperature1\030\022 \001(\005\022\034\n\024"
  "inverterTemperature2\030\023 \001(\005\022\034\n\024inverterTe"
  "mperature3\030\024 \001(\005\022\024\n\014motorCurrent\030\025 \001(\005\022\024"
  "\n\014motorVoltage\030\026 \001(\005\022\030\n\020inverterVoltages"
  "\030\027 \001(\005\022\030\n\020inverterCurrents\030\030 \001(\005\022\033\n\023batt"
  "eryPackVoltages\030\032 \003(\005\022\032\n\022batteryPackCurr"
  "ent\030\033 \003(\005\022\037\n\027batteryCellTemperatures\030\034 \003"
  "(\005\022!\n\031batteryPackMinimumVoltage\030\035 \001(\005\022\035\n"
  "\025batteryPackMaxVoltage\030\036 \001(\005\022\014\n\004sol1\030  \001"
  "(\010\022\014\n\004sol2\030! \001(\010\022\014\n\004sol3\030\" \001(\010\022\014\n\004sol4\030#"
  " \001(\010\022\014\n\004sol5\030$ \001(\010\022\014\n\004sol6\030% \001(\010\022\n\n\002hp\030&"
  " \001(\005\022\013\n\003lp1\030\' \001(\005\022\013\n\003lp2\030( \001(\005\022\013\n\003lp3\030) "
  "\001(\005\022\013\n\003lp4\030* \001(\005\022!\n\031pressureVesselTemper"
  "ature\030+ \001(\005\022$\n\034electronicsEnclosurePress"
  "ure\030, \001(\005\022\031\n\021railDisplacementX\030- \001(\005\022\031\n\021"
  "railDisplacementY\030. \001(\005\022\024\n\014tubePressure\030"
  "0 \001(\005\022\030\n\020coolantPressure1\0301 \001(\005\022\030\n\020coola"
  "ntPressure2\0302 \001(\005\022\030\n\020coolantPressure3\0303 "
  "\001(\005\022\032\n\022coolantTemperature\0304 \001(\005\022\027\n\017railT"
  "emperature\0305 \001(\005\022\024\n\014pack1Voltage\0307 \001(\005\022\024"
  "\n\014pack2Voltage\0308 \001(\005\022\024\n\014pack1Current\0309 \001"
  "(\005\022\024\n\014pack2Current\030: \001(\005\022\024\n\014rail1Voltage"
  "\030; \001(\005\022\024\n\014rail2Voltage\030< \001(\005\022\024\n\014rail3Vol"
  "tage\030= \001(\005\022\024\n\014rail4Voltage\030> \001(\005\022\027\n\017rail"
  "VoltageFlag\030H \001(\005\022\032\n\022railCurrentSensor1\030"
  "\? \001(\005\022\032\n\022railCurrentSensor2\030@ \001(\005\022\032\n\022rai"
  "lCurrentSensor3\030A \001(\005\022\032\n\022railCurrentSens"
  "or4\030B \001(\005\022\032\n\022railCurrentSensor5\030C \001(\005\022\032\n"
  "\022railCurrentSensor6\030D \001(\005\022\032\n\022railCurrent"
  "Sensor7\030E \001(\005\022\032\n\022railCurrentSensor8\030F \001("
  "\005\022\027\n\017railCurrentFlag\030I \001(\005*\235\001\n\017BrakeNode"
  "States\022\016\n\nbnsBooting\020\000\022\016\n\nbnsStandby\020\001\022\r"
  "\n\tbnsArming\020\002\022\014\n\010bnsArmed\020\003\022\r\n\tbnsFlight"
  "\020\004\022\016\n\nbnsBraking\020\005\022\016\n\nbnsVenting\020\006\022\020\n\014bn"
  "sRetrieval\020\007\022\014\n\010bnsError\020\010*\273\001\n\tPodStates"
  "\022\r\n\tpsBooting\020\000\022\r\n\tpsStandby\020\001\022\014\n\010psArmi"
  "ng\020\002\022\013\n\007psArmed\020\003\022\017\n\013psPreFlight\020\004\022\022\n\016ps"
  "Acceleration\020\005\022\016\n\npsCoasting\020\006\022\r\n\tpsBrak"
  "ing\020\007\022\017\n\013psDisarming\020\010\022\017\n\013psRetrieval\020\t\022"
  "\017\n\013psEmergency\020\n*C\n\013MotorStates\022\t\n\005msOff"
  "\020\000\022\016\n\nmsCharging\020\001\022\n\n\006msIdle\020\002\022\r\n\tmsEnga"
  "ged\020\003*G\n\027ControlsInterfaceStates\022\t\n\005ciAr"
  "m\020\000\022\014\n\010ciFlight\020\001\022\023\n\017ciEmergencyStop\020\002* "
  "\n\016InverterStates\022\016\n\niConnected\020\000*)\n\027Batt"
  "eryManagementStates\022\016\n\nbmsNominal\020\000*.\n\016R"
  "earNodeStates\022\r\n\trnBooting\020\000\022\r\n\trnNomina"
  "l\020\001*!\n\016LvdcNodeStates\022\017\n\013lvdcBooting\020\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Paradigm_2eproto = {
  false, InitDefaults_Paradigm_2eproto, 
  descriptor_table_protodef_Paradigm_2eproto,
  "Paradigm.proto", &assign_descriptors_table_Paradigm_2eproto, 3238,
};

void AddDescriptors_Paradigm_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Paradigm_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Paradigm_2eproto = []() { AddDescriptors_Paradigm_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* brakeNodeData_breakNodeState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[0];
}
bool brakeNodeData_breakNodeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const brakeNodeData_breakNodeState brakeNodeData::bnsBooting;
const brakeNodeData_breakNodeState brakeNodeData::bnsStandby;
const brakeNodeData_breakNodeState brakeNodeData::bnsArming;
const brakeNodeData_breakNodeState brakeNodeData::bnsArmed;
const brakeNodeData_breakNodeState brakeNodeData::bnsFlight;
const brakeNodeData_breakNodeState brakeNodeData::bnsBraking;
const brakeNodeData_breakNodeState brakeNodeData::bnsVenting;
const brakeNodeData_breakNodeState brakeNodeData::bnsRetrieval;
const brakeNodeData_breakNodeState brakeNodeData::bnsError;
const brakeNodeData_breakNodeState brakeNodeData::breakNodeState_MIN;
const brakeNodeData_breakNodeState brakeNodeData::breakNodeState_MAX;
const int brakeNodeData::breakNodeState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BrakeNodeStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[1];
}
bool BrakeNodeStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PodStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[2];
}
bool PodStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotorStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[3];
}
bool MotorStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlsInterfaceStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[4];
}
bool ControlsInterfaceStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InverterStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[5];
}
bool InverterStates_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BatteryManagementStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[6];
}
bool BatteryManagementStates_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RearNodeStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[7];
}
bool RearNodeStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LvdcNodeStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[8];
}
bool LvdcNodeStates_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void brakeNodeData::InitAsDefaultInstance() {
}
class brakeNodeData::HasBitSetters {
 public:
  static void set_has_id(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_state(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_sol1(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sol2(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sol3(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_sol4(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_sol5(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_sol6(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_hp(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_lp1(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_lp2(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_lp3(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_lp4(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_temp(brakeNodeData* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int brakeNodeData::kIdFieldNumber;
const int brakeNodeData::kStateFieldNumber;
const int brakeNodeData::kSol1FieldNumber;
const int brakeNodeData::kSol2FieldNumber;
const int brakeNodeData::kSol3FieldNumber;
const int brakeNodeData::kSol4FieldNumber;
const int brakeNodeData::kSol5FieldNumber;
const int brakeNodeData::kSol6FieldNumber;
const int brakeNodeData::kHpFieldNumber;
const int brakeNodeData::kLp1FieldNumber;
const int brakeNodeData::kLp2FieldNumber;
const int brakeNodeData::kLp3FieldNumber;
const int brakeNodeData::kLp4FieldNumber;
const int brakeNodeData::kTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

brakeNodeData::brakeNodeData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:brakeNodeData)
}
brakeNodeData::brakeNodeData(const brakeNodeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:brakeNodeData)
}

void brakeNodeData::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

brakeNodeData::~brakeNodeData() {
  // @@protoc_insertion_point(destructor:brakeNodeData)
  SharedDtor();
}

void brakeNodeData::SharedDtor() {
}

void brakeNodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const brakeNodeData& brakeNodeData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_brakeNodeData_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void brakeNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:brakeNodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(hp_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&lp1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&lp1_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* brakeNodeData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<brakeNodeData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol1 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sol1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol2 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sol2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol3 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_sol3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol4 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_sol4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol5 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_sol5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol6 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_sol6(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 hp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_hp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lp1 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_lp1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lp2 = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_lp2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lp3 = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_lp3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lp4 = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_lp4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 temp = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_temp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .brakeNodeData.breakNodeState state = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::brakeNodeData_breakNodeState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(14, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_state(static_cast<::brakeNodeData_breakNodeState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool brakeNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:brakeNodeData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_sol1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sol2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_sol3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol4 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_sol4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_sol5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol6 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_sol6(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_hp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_lp1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_lp2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp3 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_lp3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp4 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_lp4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 temp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_temp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .brakeNodeData.breakNodeState state = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::brakeNodeData_breakNodeState_IsValid(value)) {
            set_state(static_cast< ::brakeNodeData_breakNodeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:brakeNodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:brakeNodeData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void brakeNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:brakeNodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool sol1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sol1(), output);
  }

  // optional bool sol2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sol2(), output);
  }

  // optional bool sol3 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sol3(), output);
  }

  // optional bool sol4 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sol4(), output);
  }

  // optional bool sol5 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sol5(), output);
  }

  // optional bool sol6 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sol6(), output);
  }

  // optional int32 hp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hp(), output);
  }

  // optional int32 lp1 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lp1(), output);
  }

  // optional int32 lp2 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lp2(), output);
  }

  // optional int32 lp3 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lp3(), output);
  }

  // optional int32 lp4 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lp4(), output);
  }

  // optional int32 temp = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->temp(), output);
  }

  // optional .brakeNodeData.breakNodeState state = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:brakeNodeData)
}

::google::protobuf::uint8* brakeNodeData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:brakeNodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool sol1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sol1(), target);
  }

  // optional bool sol2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sol2(), target);
  }

  // optional bool sol3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sol3(), target);
  }

  // optional bool sol4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sol4(), target);
  }

  // optional bool sol5 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sol5(), target);
  }

  // optional bool sol6 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sol6(), target);
  }

  // optional int32 hp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hp(), target);
  }

  // optional int32 lp1 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lp1(), target);
  }

  // optional int32 lp2 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lp2(), target);
  }

  // optional int32 lp3 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lp3(), target);
  }

  // optional int32 lp4 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lp4(), target);
  }

  // optional int32 temp = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->temp(), target);
  }

  // optional .brakeNodeData.breakNodeState state = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:brakeNodeData)
  return target;
}

size_t brakeNodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:brakeNodeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional bool sol1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool sol2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool sol3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool sol4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool sol5 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool sol6 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 hp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional int32 lp1 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp1());
    }

    // optional int32 lp2 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp2());
    }

    // optional int32 lp3 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp3());
    }

    // optional int32 lp4 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp4());
    }

    // optional int32 temp = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temp());
    }

    // optional .brakeNodeData.breakNodeState state = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void brakeNodeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:brakeNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  const brakeNodeData* source =
      ::google::protobuf::DynamicCastToGenerated<brakeNodeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:brakeNodeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:brakeNodeData)
    MergeFrom(*source);
  }
}

void brakeNodeData::MergeFrom(const brakeNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:brakeNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sol1_ = from.sol1_;
    }
    if (cached_has_bits & 0x00000004u) {
      sol2_ = from.sol2_;
    }
    if (cached_has_bits & 0x00000008u) {
      sol3_ = from.sol3_;
    }
    if (cached_has_bits & 0x00000010u) {
      sol4_ = from.sol4_;
    }
    if (cached_has_bits & 0x00000020u) {
      sol5_ = from.sol5_;
    }
    if (cached_has_bits & 0x00000040u) {
      sol6_ = from.sol6_;
    }
    if (cached_has_bits & 0x00000080u) {
      hp_ = from.hp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      lp1_ = from.lp1_;
    }
    if (cached_has_bits & 0x00000200u) {
      lp2_ = from.lp2_;
    }
    if (cached_has_bits & 0x00000400u) {
      lp3_ = from.lp3_;
    }
    if (cached_has_bits & 0x00000800u) {
      lp4_ = from.lp4_;
    }
    if (cached_has_bits & 0x00001000u) {
      temp_ = from.temp_;
    }
    if (cached_has_bits & 0x00002000u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void brakeNodeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:brakeNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void brakeNodeData::CopyFrom(const brakeNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:brakeNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool brakeNodeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void brakeNodeData::Swap(brakeNodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void brakeNodeData::InternalSwap(brakeNodeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(sol1_, other->sol1_);
  swap(sol2_, other->sol2_);
  swap(sol3_, other->sol3_);
  swap(sol4_, other->sol4_);
  swap(sol5_, other->sol5_);
  swap(sol6_, other->sol6_);
  swap(hp_, other->hp_);
  swap(lp1_, other->lp1_);
  swap(lp2_, other->lp2_);
  swap(lp3_, other->lp3_);
  swap(lp4_, other->lp4_);
  swap(temp_, other->temp_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata brakeNodeData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void podCommand::InitAsDefaultInstance() {
}
class podCommand::HasBitSetters {
 public:
  static void set_has_controlsinterfacestate(podCommand* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_manualpodstate(podCommand* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_manualbrakenodestate(podCommand* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_manualmotorstate(podCommand* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_manuallvdcnodestate(podCommand* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_automaticstatetransitions(podCommand* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int podCommand::kControlsInterfaceStateFieldNumber;
const int podCommand::kManualPodStateFieldNumber;
const int podCommand::kManualBrakeNodeStateFieldNumber;
const int podCommand::kManualMotorStateFieldNumber;
const int podCommand::kManualLvdcNodeStateFieldNumber;
const int podCommand::kAutomaticStateTransitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

podCommand::podCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:podCommand)
}
podCommand::podCommand(const podCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controlsinterfacestate_, &from.controlsinterfacestate_,
    static_cast<size_t>(reinterpret_cast<char*>(&automaticstatetransitions_) -
    reinterpret_cast<char*>(&controlsinterfacestate_)) + sizeof(automaticstatetransitions_));
  // @@protoc_insertion_point(copy_constructor:podCommand)
}

void podCommand::SharedCtor() {
  ::memset(&controlsinterfacestate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&automaticstatetransitions_) -
      reinterpret_cast<char*>(&controlsinterfacestate_)) + sizeof(automaticstatetransitions_));
}

podCommand::~podCommand() {
  // @@protoc_insertion_point(destructor:podCommand)
  SharedDtor();
}

void podCommand::SharedDtor() {
}

void podCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const podCommand& podCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_podCommand_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void podCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:podCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&controlsinterfacestate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&automaticstatetransitions_) -
        reinterpret_cast<char*>(&controlsinterfacestate_)) + sizeof(automaticstatetransitions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* podCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<podCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .ControlsInterfaceStates controlsInterfaceState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ControlsInterfaceStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_controlsinterfacestate(static_cast<::ControlsInterfaceStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .PodStates manualPodState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PodStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manualpodstate(static_cast<::PodStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .BrakeNodeStates manualBrakeNodeState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::BrakeNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manualbrakenodestate(static_cast<::BrakeNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .MotorStates manualMotorState = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::MotorStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manualmotorstate(static_cast<::MotorStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .LvdcNodeStates manualLvdcNodeState = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::LvdcNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manuallvdcnodestate(static_cast<::LvdcNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool automaticStateTransitions = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_automaticstatetransitions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool podCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:podCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ControlsInterfaceStates controlsInterfaceState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControlsInterfaceStates_IsValid(value)) {
            set_controlsinterfacestate(static_cast< ::ControlsInterfaceStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PodStates manualPodState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_manualpodstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BrakeNodeStates manualBrakeNodeState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BrakeNodeStates_IsValid(value)) {
            set_manualbrakenodestate(static_cast< ::BrakeNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MotorStates manualMotorState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MotorStates_IsValid(value)) {
            set_manualmotorstate(static_cast< ::MotorStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .LvdcNodeStates manualLvdcNodeState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LvdcNodeStates_IsValid(value)) {
            set_manuallvdcnodestate(static_cast< ::LvdcNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool automaticStateTransitions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_automaticstatetransitions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automaticstatetransitions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:podCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:podCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void podCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:podCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ControlsInterfaceStates controlsInterfaceState = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->controlsinterfacestate(), output);
  }

  // optional .PodStates manualPodState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->manualpodstate(), output);
  }

  // optional .BrakeNodeStates manualBrakeNodeState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->manualbrakenodestate(), output);
  }

  // optional .MotorStates manualMotorState = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->manualmotorstate(), output);
  }

  // optional .LvdcNodeStates manualLvdcNodeState = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->manuallvdcnodestate(), output);
  }

  // optional bool automaticStateTransitions = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->automaticstatetransitions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:podCommand)
}

::google::protobuf::uint8* podCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:podCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ControlsInterfaceStates controlsInterfaceState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->controlsinterfacestate(), target);
  }

  // optional .PodStates manualPodState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->manualpodstate(), target);
  }

  // optional .BrakeNodeStates manualBrakeNodeState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->manualbrakenodestate(), target);
  }

  // optional .MotorStates manualMotorState = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->manualmotorstate(), target);
  }

  // optional .LvdcNodeStates manualLvdcNodeState = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->manuallvdcnodestate(), target);
  }

  // optional bool automaticStateTransitions = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->automaticstatetransitions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:podCommand)
  return target;
}

size_t podCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:podCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .ControlsInterfaceStates controlsInterfaceState = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->controlsinterfacestate());
    }

    // optional .PodStates manualPodState = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualpodstate());
    }

    // optional .BrakeNodeStates manualBrakeNodeState = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualbrakenodestate());
    }

    // optional .MotorStates manualMotorState = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualmotorstate());
    }

    // optional .LvdcNodeStates manualLvdcNodeState = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manuallvdcnodestate());
    }

    // optional bool automaticStateTransitions = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void podCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:podCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const podCommand* source =
      ::google::protobuf::DynamicCastToGenerated<podCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:podCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:podCommand)
    MergeFrom(*source);
  }
}

void podCommand::MergeFrom(const podCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:podCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      controlsinterfacestate_ = from.controlsinterfacestate_;
    }
    if (cached_has_bits & 0x00000002u) {
      manualpodstate_ = from.manualpodstate_;
    }
    if (cached_has_bits & 0x00000004u) {
      manualbrakenodestate_ = from.manualbrakenodestate_;
    }
    if (cached_has_bits & 0x00000008u) {
      manualmotorstate_ = from.manualmotorstate_;
    }
    if (cached_has_bits & 0x00000010u) {
      manuallvdcnodestate_ = from.manuallvdcnodestate_;
    }
    if (cached_has_bits & 0x00000020u) {
      automaticstatetransitions_ = from.automaticstatetransitions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void podCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:podCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void podCommand::CopyFrom(const podCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:podCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool podCommand::IsInitialized() const {
  return true;
}

void podCommand::Swap(podCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void podCommand::InternalSwap(podCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(controlsinterfacestate_, other->controlsinterfacestate_);
  swap(manualpodstate_, other->manualpodstate_);
  swap(manualbrakenodestate_, other->manualbrakenodestate_);
  swap(manualmotorstate_, other->manualmotorstate_);
  swap(manuallvdcnodestate_, other->manuallvdcnodestate_);
  swap(automaticstatetransitions_, other->automaticstatetransitions_);
}

::google::protobuf::Metadata podCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void telemetry::InitAsDefaultInstance() {
}
class telemetry::HasBitSetters {
 public:
  static void set_has_podstate(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_breaknodestate(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_motorstate(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_controlsinterfacestate(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_inverterstate(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_lvdcnodestate(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00010000u;
  }
  static void set_has_batterymanagementstate(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_breaknodeperceivedpodstate(telemetry* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_missiontime(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_flighttime(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_podposition(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_podvelocity(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_podaccelerationx(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_podaccelerationy(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_podaccelerationz(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_imuvelocity(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_imuaccelerationx(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_tachometervelocity(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_resolvervelocity(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_invertertemperature1(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_invertertemperature2(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_invertertemperature3(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_motorcurrent(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_motorvoltage(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_invertervoltages(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_invertercurrents(telemetry* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_batterypackminimumvoltage(telemetry* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_batterypackmaxvoltage(telemetry* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_sol1(telemetry* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_sol2(telemetry* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_sol3(telemetry* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_sol4(telemetry* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_sol5(telemetry* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_sol6(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_hp(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_lp1(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_lp2(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_lp3(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_lp4(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_pressurevesseltemperature(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_electronicsenclosurepressure(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_raildisplacementx(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_raildisplacementy(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_tubepressure(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static void set_has_coolantpressure1(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static void set_has_coolantpressure2(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00001000u;
  }
  static void set_has_coolantpressure3(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00002000u;
  }
  static void set_has_coolanttemperature(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00004000u;
  }
  static void set_has_railtemperature(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00008000u;
  }
  static void set_has_pack1voltage(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00020000u;
  }
  static void set_has_pack2voltage(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00040000u;
  }
  static void set_has_pack1current(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00080000u;
  }
  static void set_has_pack2current(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00100000u;
  }
  static void set_has_rail1voltage(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00200000u;
  }
  static void set_has_rail2voltage(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00400000u;
  }
  static void set_has_rail3voltage(telemetry* msg) {
    msg->_has_bits_[1] |= 0x00800000u;
  }
  static void set_has_rail4voltage(telemetry* msg) {
    msg->_has_bits_[1] |= 0x01000000u;
  }
  static void set_has_railvoltageflag(telemetry* msg) {
    msg->_has_bits_[2] |= 0x00000002u;
  }
  static void set_has_railcurrentsensor1(telemetry* msg) {
    msg->_has_bits_[1] |= 0x02000000u;
  }
  static void set_has_railcurrentsensor2(telemetry* msg) {
    msg->_has_bits_[1] |= 0x04000000u;
  }
  static void set_has_railcurrentsensor3(telemetry* msg) {
    msg->_has_bits_[1] |= 0x08000000u;
  }
  static void set_has_railcurrentsensor4(telemetry* msg) {
    msg->_has_bits_[1] |= 0x10000000u;
  }
  static void set_has_railcurrentsensor5(telemetry* msg) {
    msg->_has_bits_[1] |= 0x20000000u;
  }
  static void set_has_railcurrentsensor6(telemetry* msg) {
    msg->_has_bits_[1] |= 0x40000000u;
  }
  static void set_has_railcurrentsensor7(telemetry* msg) {
    msg->_has_bits_[1] |= 0x80000000u;
  }
  static void set_has_railcurrentsensor8(telemetry* msg) {
    msg->_has_bits_[2] |= 0x00000001u;
  }
  static void set_has_railcurrentflag(telemetry* msg) {
    msg->_has_bits_[2] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int telemetry::kPodStateFieldNumber;
const int telemetry::kBreakNodeStateFieldNumber;
const int telemetry::kMotorStateFieldNumber;
const int telemetry::kControlsInterfaceStateFieldNumber;
const int telemetry::kInverterStateFieldNumber;
const int telemetry::kLvdcNodeStateFieldNumber;
const int telemetry::kBatteryManagementStateFieldNumber;
const int telemetry::kBreakNodePerceivedPodStateFieldNumber;
const int telemetry::kMissionTimeFieldNumber;
const int telemetry::kFlightTimeFieldNumber;
const int telemetry::kHeartbeatFlagsFieldNumber;
const int telemetry::kHeartbeatValuesFieldNumber;
const int telemetry::kPodPositionFieldNumber;
const int telemetry::kPodVelocityFieldNumber;
const int telemetry::kPodAccelerationXFieldNumber;
const int telemetry::kPodAccelerationYFieldNumber;
const int telemetry::kPodAccelerationZFieldNumber;
const int telemetry::kImuVelocityFieldNumber;
const int telemetry::kImuAccelerationXFieldNumber;
const int telemetry::kTachometerVelocityFieldNumber;
const int telemetry::kResolverVelocityFieldNumber;
const int telemetry::kInverterTemperature1FieldNumber;
const int telemetry::kInverterTemperature2FieldNumber;
const int telemetry::kInverterTemperature3FieldNumber;
const int telemetry::kMotorCurrentFieldNumber;
const int telemetry::kMotorVoltageFieldNumber;
const int telemetry::kInverterVoltagesFieldNumber;
const int telemetry::kInverterCurrentsFieldNumber;
const int telemetry::kBatteryPackVoltagesFieldNumber;
const int telemetry::kBatteryPackCurrentFieldNumber;
const int telemetry::kBatteryCellTemperaturesFieldNumber;
const int telemetry::kBatteryPackMinimumVoltageFieldNumber;
const int telemetry::kBatteryPackMaxVoltageFieldNumber;
const int telemetry::kSol1FieldNumber;
const int telemetry::kSol2FieldNumber;
const int telemetry::kSol3FieldNumber;
const int telemetry::kSol4FieldNumber;
const int telemetry::kSol5FieldNumber;
const int telemetry::kSol6FieldNumber;
const int telemetry::kHpFieldNumber;
const int telemetry::kLp1FieldNumber;
const int telemetry::kLp2FieldNumber;
const int telemetry::kLp3FieldNumber;
const int telemetry::kLp4FieldNumber;
const int telemetry::kPressureVesselTemperatureFieldNumber;
const int telemetry::kElectronicsEnclosurePressureFieldNumber;
const int telemetry::kRailDisplacementXFieldNumber;
const int telemetry::kRailDisplacementYFieldNumber;
const int telemetry::kTubePressureFieldNumber;
const int telemetry::kCoolantPressure1FieldNumber;
const int telemetry::kCoolantPressure2FieldNumber;
const int telemetry::kCoolantPressure3FieldNumber;
const int telemetry::kCoolantTemperatureFieldNumber;
const int telemetry::kRailTemperatureFieldNumber;
const int telemetry::kPack1VoltageFieldNumber;
const int telemetry::kPack2VoltageFieldNumber;
const int telemetry::kPack1CurrentFieldNumber;
const int telemetry::kPack2CurrentFieldNumber;
const int telemetry::kRail1VoltageFieldNumber;
const int telemetry::kRail2VoltageFieldNumber;
const int telemetry::kRail3VoltageFieldNumber;
const int telemetry::kRail4VoltageFieldNumber;
const int telemetry::kRailVoltageFlagFieldNumber;
const int telemetry::kRailCurrentSensor1FieldNumber;
const int telemetry::kRailCurrentSensor2FieldNumber;
const int telemetry::kRailCurrentSensor3FieldNumber;
const int telemetry::kRailCurrentSensor4FieldNumber;
const int telemetry::kRailCurrentSensor5FieldNumber;
const int telemetry::kRailCurrentSensor6FieldNumber;
const int telemetry::kRailCurrentSensor7FieldNumber;
const int telemetry::kRailCurrentSensor8FieldNumber;
const int telemetry::kRailCurrentFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

telemetry::telemetry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry)
}
telemetry::telemetry(const telemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      heartbeatflags_(from.heartbeatflags_),
      batterypackvoltages_(from.batterypackvoltages_),
      batterypackcurrent_(from.batterypackcurrent_),
      batterycelltemperatures_(from.batterycelltemperatures_),
      heartbeatvalues_(from.heartbeatvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&podstate_, &from.podstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&railcurrentflag_) -
    reinterpret_cast<char*>(&podstate_)) + sizeof(railcurrentflag_));
  // @@protoc_insertion_point(copy_constructor:telemetry)
}

void telemetry::SharedCtor() {
  ::memset(&podstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&railcurrentflag_) -
      reinterpret_cast<char*>(&podstate_)) + sizeof(railcurrentflag_));
}

telemetry::~telemetry() {
  // @@protoc_insertion_point(destructor:telemetry)
  SharedDtor();
}

void telemetry::SharedDtor() {
}

void telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const telemetry& telemetry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_telemetry_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heartbeatflags_.Clear();
  batterypackvoltages_.Clear();
  batterypackcurrent_.Clear();
  batterycelltemperatures_.Clear();
  heartbeatvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&podstate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&podposition_) -
        reinterpret_cast<char*>(&podstate_)) + sizeof(podposition_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&podvelocity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resolvervelocity_) -
        reinterpret_cast<char*>(&podvelocity_)) + sizeof(resolvervelocity_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&invertertemperature1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batterymanagementstate_) -
        reinterpret_cast<char*>(&invertertemperature1_)) + sizeof(batterymanagementstate_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&batterypackminimumvoltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sol5_) -
        reinterpret_cast<char*>(&batterypackminimumvoltage_)) + sizeof(sol5_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&sol6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&electronicsenclosurepressure_) -
        reinterpret_cast<char*>(&sol6_)) + sizeof(electronicsenclosurepressure_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&raildisplacementx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&railtemperature_) -
        reinterpret_cast<char*>(&raildisplacementx_)) + sizeof(railtemperature_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&lvdcnodestate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rail3voltage_) -
        reinterpret_cast<char*>(&lvdcnodestate_)) + sizeof(rail3voltage_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&rail4voltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&railcurrentsensor7_) -
        reinterpret_cast<char*>(&rail4voltage_)) + sizeof(railcurrentsensor7_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&railcurrentsensor8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&railcurrentflag_) -
        reinterpret_cast<char*>(&railcurrentsensor8_)) + sizeof(railcurrentflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* telemetry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<telemetry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .PodStates podState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PodStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_podstate(static_cast<::PodStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .BrakeNodeStates breakNodeState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::BrakeNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_breaknodestate(static_cast<::BrakeNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .MotorStates motorState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::MotorStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_motorstate(static_cast<::MotorStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ControlsInterfaceStates controlsInterfaceState = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ControlsInterfaceStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_controlsinterfacestate(static_cast<::ControlsInterfaceStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .InverterStates inverterState = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::InverterStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_inverterstate(static_cast<::InverterStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 missionTime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_missiontime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 flightTime = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_flighttime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 heartbeatFlags = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            msg->add_heartbeatflags(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_heartbeatflags();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 podPosition = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_podposition(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 podVelocity = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_podvelocity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 podAccelerationX = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_podaccelerationx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 podAccelerationY = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_podaccelerationy(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 podAccelerationZ = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_podaccelerationz(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 imuVelocity = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_imuvelocity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 imuAccelerationX = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_imuaccelerationx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 tachometerVelocity = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_tachometervelocity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 resolverVelocity = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_resolvervelocity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 inverterTemperature1 = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_invertertemperature1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 inverterTemperature2 = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_invertertemperature2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 inverterTemperature3 = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_invertertemperature3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 motorCurrent = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_motorcurrent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 motorVoltage = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_motorvoltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 inverterVoltages = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_invertervoltages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 inverterCurrents = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_invertercurrents(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .BatteryManagementStates batteryManagementState = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::BatteryManagementStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(25, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_batterymanagementstate(static_cast<::BatteryManagementStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 batteryPackVoltages = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) == 208) {
          do {
            msg->add_batterypackvoltages(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 464 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_batterypackvoltages();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated int32 batteryPackCurrent = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) == 216) {
          do {
            msg->add_batterypackcurrent(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 472 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_batterypackcurrent();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated int32 batteryCellTemperatures = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) == 224) {
          do {
            msg->add_batterycelltemperatures(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 480 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_batterycelltemperatures();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 batteryPackMinimumVoltage = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_batterypackminimumvoltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 batteryPackMaxVoltage = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_batterypackmaxvoltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .PodStates breakNodePerceivedPodState = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PodStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(31, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_breaknodeperceivedpodstate(static_cast<::PodStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol1 = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_sol1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol2 = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sol2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol3 = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sol3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol4 = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sol4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol5 = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_sol5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool sol6 = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_sol6(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 hp = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_hp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lp1 = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_lp1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lp2 = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_lp2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lp3 = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_lp3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 lp4 = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_lp4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pressureVesselTemperature = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_pressurevesseltemperature(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 electronicsEnclosurePressure = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_electronicsenclosurepressure(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railDisplacementX = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_raildisplacementx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railDisplacementY = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_raildisplacementy(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 tubePressure = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_tubepressure(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 coolantPressure1 = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_coolantpressure1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 coolantPressure2 = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_coolantpressure2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 coolantPressure3 = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_coolantpressure3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 coolantTemperature = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_coolanttemperature(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railTemperature = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_railtemperature(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .LvdcNodeStates lvdcNodeState = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::LvdcNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(54, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_lvdcnodestate(static_cast<::LvdcNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pack1Voltage = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_pack1voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pack2Voltage = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_pack2voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pack1Current = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_pack1current(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pack2Current = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_pack2current(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 rail1Voltage = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_rail1voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 rail2Voltage = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_rail2voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 rail3Voltage = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_rail3voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 rail4Voltage = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_rail4voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor1 = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_railcurrentsensor1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor2 = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_railcurrentsensor2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor3 = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_railcurrentsensor3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor4 = 66;
      case 66: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_railcurrentsensor4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor5 = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_railcurrentsensor5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor6 = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_railcurrentsensor6(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor7 = 69;
      case 69: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_railcurrentsensor7(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor8 = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_railcurrentsensor8(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 heartbeatValues = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) == 56) {
          do {
            msg->add_heartbeatvalues(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1208 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_heartbeatvalues();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 railVoltageFlag = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_railvoltageflag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentFlag = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_railcurrentflag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool telemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PodStates podState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_podstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BrakeNodeStates breakNodeState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BrakeNodeStates_IsValid(value)) {
            set_breaknodestate(static_cast< ::BrakeNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MotorStates motorState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MotorStates_IsValid(value)) {
            set_motorstate(static_cast< ::MotorStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ControlsInterfaceStates controlsInterfaceState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControlsInterfaceStates_IsValid(value)) {
            set_controlsinterfacestate(static_cast< ::ControlsInterfaceStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .InverterStates inverterState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::InverterStates_IsValid(value)) {
            set_inverterstate(static_cast< ::InverterStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 missionTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_missiontime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missiontime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flightTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_flighttime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flighttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 heartbeatFlags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_heartbeatflags())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_heartbeatflags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podPosition = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_podposition(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podVelocity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_podvelocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podAccelerationX = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_podaccelerationx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podaccelerationx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podAccelerationY = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_podaccelerationy(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podaccelerationy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podAccelerationZ = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_podaccelerationz(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podaccelerationz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imuVelocity = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_imuvelocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imuvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imuAccelerationX = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_imuaccelerationx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imuaccelerationx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tachometerVelocity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_tachometervelocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tachometervelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 resolverVelocity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_resolvervelocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolvervelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterTemperature1 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_invertertemperature1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertertemperature1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterTemperature2 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_invertertemperature2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertertemperature2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterTemperature3 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_invertertemperature3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertertemperature3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 motorCurrent = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_motorcurrent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motorcurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 motorVoltage = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_motorvoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motorvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterVoltages = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_invertervoltages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertervoltages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterCurrents = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_invertercurrents(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertercurrents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BatteryManagementStates batteryManagementState = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BatteryManagementStates_IsValid(value)) {
            set_batterymanagementstate(static_cast< ::BatteryManagementStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                25, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 batteryPackVoltages = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 208u, input, this->mutable_batterypackvoltages())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_batterypackvoltages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 batteryPackCurrent = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216u, input, this->mutable_batterypackcurrent())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_batterypackcurrent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 batteryCellTemperatures = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224u, input, this->mutable_batterycelltemperatures())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (226 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_batterycelltemperatures())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 batteryPackMinimumVoltage = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_batterypackminimumvoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batterypackminimumvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 batteryPackMaxVoltage = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_batterypackmaxvoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batterypackmaxvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PodStates breakNodePerceivedPodState = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_breaknodeperceivedpodstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                31, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol1 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_sol1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol2 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_sol2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol3 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_sol3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol4 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_sol4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol5 = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {
          HasBitSetters::set_has_sol5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sol6 = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {
          HasBitSetters::set_has_sol6(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sol6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hp = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {
          HasBitSetters::set_has_hp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp1 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {
          HasBitSetters::set_has_lp1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp2 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {
          HasBitSetters::set_has_lp2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp3 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {
          HasBitSetters::set_has_lp3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lp4 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {
          HasBitSetters::set_has_lp4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lp4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pressureVesselTemperature = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {
          HasBitSetters::set_has_pressurevesseltemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pressurevesseltemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 electronicsEnclosurePressure = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_electronicsenclosurepressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &electronicsenclosurepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railDisplacementX = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_raildisplacementx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raildisplacementx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railDisplacementY = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          HasBitSetters::set_has_raildisplacementy(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raildisplacementy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tubePressure = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {
          HasBitSetters::set_has_tubepressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tubepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantPressure1 = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_coolantpressure1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolantpressure1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantPressure2 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {
          HasBitSetters::set_has_coolantpressure2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolantpressure2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantPressure3 = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {
          HasBitSetters::set_has_coolantpressure3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolantpressure3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantTemperature = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {
          HasBitSetters::set_has_coolanttemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolanttemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railTemperature = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (424 & 0xFF)) {
          HasBitSetters::set_has_railtemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railtemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .LvdcNodeStates lvdcNodeState = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (432 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LvdcNodeStates_IsValid(value)) {
            set_lvdcnodestate(static_cast< ::LvdcNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                54, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack1Voltage = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (440 & 0xFF)) {
          HasBitSetters::set_has_pack1voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack1voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack2Voltage = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (448 & 0xFF)) {
          HasBitSetters::set_has_pack2voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack2voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack1Current = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (456 & 0xFF)) {
          HasBitSetters::set_has_pack1current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack1current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack2Current = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (464 & 0xFF)) {
          HasBitSetters::set_has_pack2current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack2current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail1Voltage = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (472 & 0xFF)) {
          HasBitSetters::set_has_rail1voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail1voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail2Voltage = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (480 & 0xFF)) {
          HasBitSetters::set_has_rail2voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail2voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail3Voltage = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {
          HasBitSetters::set_has_rail3voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail3voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail4Voltage = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (496 & 0xFF)) {
          HasBitSetters::set_has_rail4voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail4voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor1 = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (504 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor2 = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (512 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor3 = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (520 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor4 = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (528 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor5 = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (536 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor6 = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (544 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor6(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor7 = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (552 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor7(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor8 = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (560 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor8(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 heartbeatValues = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (568 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 568u, input, this->mutable_heartbeatvalues())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (570 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_heartbeatvalues())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railVoltageFlag = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (576 & 0xFF)) {
          HasBitSetters::set_has_railvoltageflag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railvoltageflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentFlag = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (584 & 0xFF)) {
          HasBitSetters::set_has_railcurrentflag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void telemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PodStates podState = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->podstate(), output);
  }

  // optional .BrakeNodeStates breakNodeState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->breaknodestate(), output);
  }

  // optional .MotorStates motorState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->motorstate(), output);
  }

  // optional .ControlsInterfaceStates controlsInterfaceState = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->controlsinterfacestate(), output);
  }

  // optional .InverterStates inverterState = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->inverterstate(), output);
  }

  // optional int32 missionTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->missiontime(), output);
  }

  // optional int32 flightTime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flighttime(), output);
  }

  // repeated int32 heartbeatFlags = 8;
  for (int i = 0, n = this->heartbeatflags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->heartbeatflags(i), output);
  }

  // optional int32 podPosition = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->podposition(), output);
  }

  // optional int32 podVelocity = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->podvelocity(), output);
  }

  // optional int32 podAccelerationX = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->podaccelerationx(), output);
  }

  // optional int32 podAccelerationY = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->podaccelerationy(), output);
  }

  // optional int32 podAccelerationZ = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->podaccelerationz(), output);
  }

  // optional int32 imuVelocity = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->imuvelocity(), output);
  }

  // optional int32 imuAccelerationX = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->imuaccelerationx(), output);
  }

  // optional int32 tachometerVelocity = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tachometervelocity(), output);
  }

  // optional int32 resolverVelocity = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->resolvervelocity(), output);
  }

  // optional int32 inverterTemperature1 = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->invertertemperature1(), output);
  }

  // optional int32 inverterTemperature2 = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->invertertemperature2(), output);
  }

  // optional int32 inverterTemperature3 = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->invertertemperature3(), output);
  }

  // optional int32 motorCurrent = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->motorcurrent(), output);
  }

  // optional int32 motorVoltage = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->motorvoltage(), output);
  }

  // optional int32 inverterVoltages = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->invertervoltages(), output);
  }

  // optional int32 inverterCurrents = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->invertercurrents(), output);
  }

  // optional .BatteryManagementStates batteryManagementState = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->batterymanagementstate(), output);
  }

  // repeated int32 batteryPackVoltages = 26;
  for (int i = 0, n = this->batterypackvoltages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      26, this->batterypackvoltages(i), output);
  }

  // repeated int32 batteryPackCurrent = 27;
  for (int i = 0, n = this->batterypackcurrent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->batterypackcurrent(i), output);
  }

  // repeated int32 batteryCellTemperatures = 28;
  for (int i = 0, n = this->batterycelltemperatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->batterycelltemperatures(i), output);
  }

  // optional int32 batteryPackMinimumVoltage = 29;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->batterypackminimumvoltage(), output);
  }

  // optional int32 batteryPackMaxVoltage = 30;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->batterypackmaxvoltage(), output);
  }

  // optional .PodStates breakNodePerceivedPodState = 31;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->breaknodeperceivedpodstate(), output);
  }

  // optional bool sol1 = 32;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->sol1(), output);
  }

  // optional bool sol2 = 33;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->sol2(), output);
  }

  // optional bool sol3 = 34;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->sol3(), output);
  }

  // optional bool sol4 = 35;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->sol4(), output);
  }

  // optional bool sol5 = 36;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->sol5(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool sol6 = 37;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->sol6(), output);
  }

  // optional int32 hp = 38;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->hp(), output);
  }

  // optional int32 lp1 = 39;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->lp1(), output);
  }

  // optional int32 lp2 = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->lp2(), output);
  }

  // optional int32 lp3 = 41;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->lp3(), output);
  }

  // optional int32 lp4 = 42;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->lp4(), output);
  }

  // optional int32 pressureVesselTemperature = 43;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->pressurevesseltemperature(), output);
  }

  // optional int32 electronicsEnclosurePressure = 44;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->electronicsenclosurepressure(), output);
  }

  // optional int32 railDisplacementX = 45;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->raildisplacementx(), output);
  }

  // optional int32 railDisplacementY = 46;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->raildisplacementy(), output);
  }

  // optional int32 tubePressure = 48;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->tubepressure(), output);
  }

  // optional int32 coolantPressure1 = 49;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->coolantpressure1(), output);
  }

  // optional int32 coolantPressure2 = 50;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->coolantpressure2(), output);
  }

  // optional int32 coolantPressure3 = 51;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->coolantpressure3(), output);
  }

  // optional int32 coolantTemperature = 52;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->coolanttemperature(), output);
  }

  // optional int32 railTemperature = 53;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->railtemperature(), output);
  }

  // optional .LvdcNodeStates lvdcNodeState = 54;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      54, this->lvdcnodestate(), output);
  }

  // optional int32 pack1Voltage = 55;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->pack1voltage(), output);
  }

  // optional int32 pack2Voltage = 56;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->pack2voltage(), output);
  }

  // optional int32 pack1Current = 57;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->pack1current(), output);
  }

  // optional int32 pack2Current = 58;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->pack2current(), output);
  }

  // optional int32 rail1Voltage = 59;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->rail1voltage(), output);
  }

  // optional int32 rail2Voltage = 60;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->rail2voltage(), output);
  }

  // optional int32 rail3Voltage = 61;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->rail3voltage(), output);
  }

  // optional int32 rail4Voltage = 62;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->rail4voltage(), output);
  }

  // optional int32 railCurrentSensor1 = 63;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->railcurrentsensor1(), output);
  }

  // optional int32 railCurrentSensor2 = 64;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->railcurrentsensor2(), output);
  }

  // optional int32 railCurrentSensor3 = 65;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->railcurrentsensor3(), output);
  }

  // optional int32 railCurrentSensor4 = 66;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->railcurrentsensor4(), output);
  }

  // optional int32 railCurrentSensor5 = 67;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->railcurrentsensor5(), output);
  }

  // optional int32 railCurrentSensor6 = 68;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->railcurrentsensor6(), output);
  }

  // optional int32 railCurrentSensor7 = 69;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->railcurrentsensor7(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 railCurrentSensor8 = 70;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->railcurrentsensor8(), output);
  }

  // repeated int32 heartbeatValues = 71;
  for (int i = 0, n = this->heartbeatvalues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      71, this->heartbeatvalues(i), output);
  }

  // optional int32 railVoltageFlag = 72;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->railvoltageflag(), output);
  }

  // optional int32 railCurrentFlag = 73;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->railcurrentflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry)
}

::google::protobuf::uint8* telemetry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PodStates podState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->podstate(), target);
  }

  // optional .BrakeNodeStates breakNodeState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->breaknodestate(), target);
  }

  // optional .MotorStates motorState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->motorstate(), target);
  }

  // optional .ControlsInterfaceStates controlsInterfaceState = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->controlsinterfacestate(), target);
  }

  // optional .InverterStates inverterState = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->inverterstate(), target);
  }

  // optional int32 missionTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->missiontime(), target);
  }

  // optional int32 flightTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flighttime(), target);
  }

  // repeated int32 heartbeatFlags = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->heartbeatflags_, target);

  // optional int32 podPosition = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->podposition(), target);
  }

  // optional int32 podVelocity = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->podvelocity(), target);
  }

  // optional int32 podAccelerationX = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->podaccelerationx(), target);
  }

  // optional int32 podAccelerationY = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->podaccelerationy(), target);
  }

  // optional int32 podAccelerationZ = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->podaccelerationz(), target);
  }

  // optional int32 imuVelocity = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->imuvelocity(), target);
  }

  // optional int32 imuAccelerationX = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->imuaccelerationx(), target);
  }

  // optional int32 tachometerVelocity = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tachometervelocity(), target);
  }

  // optional int32 resolverVelocity = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->resolvervelocity(), target);
  }

  // optional int32 inverterTemperature1 = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->invertertemperature1(), target);
  }

  // optional int32 inverterTemperature2 = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->invertertemperature2(), target);
  }

  // optional int32 inverterTemperature3 = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->invertertemperature3(), target);
  }

  // optional int32 motorCurrent = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->motorcurrent(), target);
  }

  // optional int32 motorVoltage = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->motorvoltage(), target);
  }

  // optional int32 inverterVoltages = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->invertervoltages(), target);
  }

  // optional int32 inverterCurrents = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->invertercurrents(), target);
  }

  // optional .BatteryManagementStates batteryManagementState = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->batterymanagementstate(), target);
  }

  // repeated int32 batteryPackVoltages = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(26, this->batterypackvoltages_, target);

  // repeated int32 batteryPackCurrent = 27;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(27, this->batterypackcurrent_, target);

  // repeated int32 batteryCellTemperatures = 28;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(28, this->batterycelltemperatures_, target);

  // optional int32 batteryPackMinimumVoltage = 29;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->batterypackminimumvoltage(), target);
  }

  // optional int32 batteryPackMaxVoltage = 30;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->batterypackmaxvoltage(), target);
  }

  // optional .PodStates breakNodePerceivedPodState = 31;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->breaknodeperceivedpodstate(), target);
  }

  // optional bool sol1 = 32;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->sol1(), target);
  }

  // optional bool sol2 = 33;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->sol2(), target);
  }

  // optional bool sol3 = 34;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->sol3(), target);
  }

  // optional bool sol4 = 35;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->sol4(), target);
  }

  // optional bool sol5 = 36;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->sol5(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool sol6 = 37;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->sol6(), target);
  }

  // optional int32 hp = 38;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->hp(), target);
  }

  // optional int32 lp1 = 39;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->lp1(), target);
  }

  // optional int32 lp2 = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->lp2(), target);
  }

  // optional int32 lp3 = 41;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->lp3(), target);
  }

  // optional int32 lp4 = 42;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->lp4(), target);
  }

  // optional int32 pressureVesselTemperature = 43;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->pressurevesseltemperature(), target);
  }

  // optional int32 electronicsEnclosurePressure = 44;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->electronicsenclosurepressure(), target);
  }

  // optional int32 railDisplacementX = 45;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->raildisplacementx(), target);
  }

  // optional int32 railDisplacementY = 46;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->raildisplacementy(), target);
  }

  // optional int32 tubePressure = 48;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->tubepressure(), target);
  }

  // optional int32 coolantPressure1 = 49;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->coolantpressure1(), target);
  }

  // optional int32 coolantPressure2 = 50;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->coolantpressure2(), target);
  }

  // optional int32 coolantPressure3 = 51;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->coolantpressure3(), target);
  }

  // optional int32 coolantTemperature = 52;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->coolanttemperature(), target);
  }

  // optional int32 railTemperature = 53;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->railtemperature(), target);
  }

  // optional .LvdcNodeStates lvdcNodeState = 54;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      54, this->lvdcnodestate(), target);
  }

  // optional int32 pack1Voltage = 55;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->pack1voltage(), target);
  }

  // optional int32 pack2Voltage = 56;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->pack2voltage(), target);
  }

  // optional int32 pack1Current = 57;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->pack1current(), target);
  }

  // optional int32 pack2Current = 58;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->pack2current(), target);
  }

  // optional int32 rail1Voltage = 59;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->rail1voltage(), target);
  }

  // optional int32 rail2Voltage = 60;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->rail2voltage(), target);
  }

  // optional int32 rail3Voltage = 61;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->rail3voltage(), target);
  }

  // optional int32 rail4Voltage = 62;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->rail4voltage(), target);
  }

  // optional int32 railCurrentSensor1 = 63;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->railcurrentsensor1(), target);
  }

  // optional int32 railCurrentSensor2 = 64;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->railcurrentsensor2(), target);
  }

  // optional int32 railCurrentSensor3 = 65;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->railcurrentsensor3(), target);
  }

  // optional int32 railCurrentSensor4 = 66;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->railcurrentsensor4(), target);
  }

  // optional int32 railCurrentSensor5 = 67;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->railcurrentsensor5(), target);
  }

  // optional int32 railCurrentSensor6 = 68;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->railcurrentsensor6(), target);
  }

  // optional int32 railCurrentSensor7 = 69;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->railcurrentsensor7(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 railCurrentSensor8 = 70;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->railcurrentsensor8(), target);
  }

  // repeated int32 heartbeatValues = 71;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(71, this->heartbeatvalues_, target);

  // optional int32 railVoltageFlag = 72;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->railvoltageflag(), target);
  }

  // optional int32 railCurrentFlag = 73;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->railcurrentflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry)
  return target;
}

size_t telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 heartbeatFlags = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->heartbeatflags_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->heartbeatflags_size());
    total_size += data_size;
  }

  // repeated int32 batteryPackVoltages = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->batterypackvoltages_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->batterypackvoltages_size());
    total_size += data_size;
  }

  // repeated int32 batteryPackCurrent = 27;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->batterypackcurrent_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->batterypackcurrent_size());
    total_size += data_size;
  }

  // repeated int32 batteryCellTemperatures = 28;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->batterycelltemperatures_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->batterycelltemperatures_size());
    total_size += data_size;
  }

  // repeated int32 heartbeatValues = 71;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->heartbeatvalues_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->heartbeatvalues_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .PodStates podState = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->podstate());
    }

    // optional .BrakeNodeStates breakNodeState = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->breaknodestate());
    }

    // optional .MotorStates motorState = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->motorstate());
    }

    // optional .ControlsInterfaceStates controlsInterfaceState = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->controlsinterfacestate());
    }

    // optional .InverterStates inverterState = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inverterstate());
    }

    // optional int32 missionTime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missiontime());
    }

    // optional int32 flightTime = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flighttime());
    }

    // optional int32 podPosition = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podposition());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 podVelocity = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podvelocity());
    }

    // optional int32 podAccelerationX = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podaccelerationx());
    }

    // optional int32 podAccelerationY = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podaccelerationy());
    }

    // optional int32 podAccelerationZ = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podaccelerationz());
    }

    // optional int32 imuVelocity = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imuvelocity());
    }

    // optional int32 imuAccelerationX = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imuaccelerationx());
    }

    // optional int32 tachometerVelocity = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tachometervelocity());
    }

    // optional int32 resolverVelocity = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolvervelocity());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 inverterTemperature1 = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertertemperature1());
    }

    // optional int32 inverterTemperature2 = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertertemperature2());
    }

    // optional int32 inverterTemperature3 = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertertemperature3());
    }

    // optional int32 motorCurrent = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motorcurrent());
    }

    // optional int32 motorVoltage = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motorvoltage());
    }

    // optional int32 inverterVoltages = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertervoltages());
    }

    // optional int32 inverterCurrents = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertercurrents());
    }

    // optional .BatteryManagementStates batteryManagementState = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->batterymanagementstate());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 batteryPackMinimumVoltage = 29;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batterypackminimumvoltage());
    }

    // optional int32 batteryPackMaxVoltage = 30;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batterypackmaxvoltage());
    }

    // optional .PodStates breakNodePerceivedPodState = 31;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->breaknodeperceivedpodstate());
    }

    // optional bool sol1 = 32;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool sol2 = 33;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool sol3 = 34;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool sol4 = 35;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool sol5 = 36;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool sol6 = 37;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional int32 hp = 38;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 lp1 = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp1());
    }

    // optional int32 lp2 = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp2());
    }

    // optional int32 lp3 = 41;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp3());
    }

    // optional int32 lp4 = 42;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lp4());
    }

    // optional int32 pressureVesselTemperature = 43;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pressurevesseltemperature());
    }

    // optional int32 electronicsEnclosurePressure = 44;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->electronicsenclosurepressure());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 railDisplacementX = 45;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raildisplacementx());
    }

    // optional int32 railDisplacementY = 46;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raildisplacementy());
    }

    // optional int32 tubePressure = 48;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tubepressure());
    }

    // optional int32 coolantPressure1 = 49;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolantpressure1());
    }

    // optional int32 coolantPressure2 = 50;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolantpressure2());
    }

    // optional int32 coolantPressure3 = 51;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolantpressure3());
    }

    // optional int32 coolantTemperature = 52;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolanttemperature());
    }

    // optional int32 railTemperature = 53;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railtemperature());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .LvdcNodeStates lvdcNodeState = 54;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lvdcnodestate());
    }

    // optional int32 pack1Voltage = 55;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack1voltage());
    }

    // optional int32 pack2Voltage = 56;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack2voltage());
    }

    // optional int32 pack1Current = 57;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack1current());
    }

    // optional int32 pack2Current = 58;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack2current());
    }

    // optional int32 rail1Voltage = 59;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail1voltage());
    }

    // optional int32 rail2Voltage = 60;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail2voltage());
    }

    // optional int32 rail3Voltage = 61;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail3voltage());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 rail4Voltage = 62;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail4voltage());
    }

    // optional int32 railCurrentSensor1 = 63;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor1());
    }

    // optional int32 railCurrentSensor2 = 64;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor2());
    }

    // optional int32 railCurrentSensor3 = 65;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor3());
    }

    // optional int32 railCurrentSensor4 = 66;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor4());
    }

    // optional int32 railCurrentSensor5 = 67;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor5());
    }

    // optional int32 railCurrentSensor6 = 68;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor6());
    }

    // optional int32 railCurrentSensor7 = 69;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor7());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 railCurrentSensor8 = 70;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor8());
    }

    // optional int32 railVoltageFlag = 72;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railvoltageflag());
    }

    // optional int32 railCurrentFlag = 73;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void telemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const telemetry* source =
      ::google::protobuf::DynamicCastToGenerated<telemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry)
    MergeFrom(*source);
  }
}

void telemetry::MergeFrom(const telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heartbeatflags_.MergeFrom(from.heartbeatflags_);
  batterypackvoltages_.MergeFrom(from.batterypackvoltages_);
  batterypackcurrent_.MergeFrom(from.batterypackcurrent_);
  batterycelltemperatures_.MergeFrom(from.batterycelltemperatures_);
  heartbeatvalues_.MergeFrom(from.heartbeatvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      podstate_ = from.podstate_;
    }
    if (cached_has_bits & 0x00000002u) {
      breaknodestate_ = from.breaknodestate_;
    }
    if (cached_has_bits & 0x00000004u) {
      motorstate_ = from.motorstate_;
    }
    if (cached_has_bits & 0x00000008u) {
      controlsinterfacestate_ = from.controlsinterfacestate_;
    }
    if (cached_has_bits & 0x00000010u) {
      inverterstate_ = from.inverterstate_;
    }
    if (cached_has_bits & 0x00000020u) {
      missiontime_ = from.missiontime_;
    }
    if (cached_has_bits & 0x00000040u) {
      flighttime_ = from.flighttime_;
    }
    if (cached_has_bits & 0x00000080u) {
      podposition_ = from.podposition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      podvelocity_ = from.podvelocity_;
    }
    if (cached_has_bits & 0x00000200u) {
      podaccelerationx_ = from.podaccelerationx_;
    }
    if (cached_has_bits & 0x00000400u) {
      podaccelerationy_ = from.podaccelerationy_;
    }
    if (cached_has_bits & 0x00000800u) {
      podaccelerationz_ = from.podaccelerationz_;
    }
    if (cached_has_bits & 0x00001000u) {
      imuvelocity_ = from.imuvelocity_;
    }
    if (cached_has_bits & 0x00002000u) {
      imuaccelerationx_ = from.imuaccelerationx_;
    }
    if (cached_has_bits & 0x00004000u) {
      tachometervelocity_ = from.tachometervelocity_;
    }
    if (cached_has_bits & 0x00008000u) {
      resolvervelocity_ = from.resolvervelocity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      invertertemperature1_ = from.invertertemperature1_;
    }
    if (cached_has_bits & 0x00020000u) {
      invertertemperature2_ = from.invertertemperature2_;
    }
    if (cached_has_bits & 0x00040000u) {
      invertertemperature3_ = from.invertertemperature3_;
    }
    if (cached_has_bits & 0x00080000u) {
      motorcurrent_ = from.motorcurrent_;
    }
    if (cached_has_bits & 0x00100000u) {
      motorvoltage_ = from.motorvoltage_;
    }
    if (cached_has_bits & 0x00200000u) {
      invertervoltages_ = from.invertervoltages_;
    }
    if (cached_has_bits & 0x00400000u) {
      invertercurrents_ = from.invertercurrents_;
    }
    if (cached_has_bits & 0x00800000u) {
      batterymanagementstate_ = from.batterymanagementstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      batterypackminimumvoltage_ = from.batterypackminimumvoltage_;
    }
    if (cached_has_bits & 0x02000000u) {
      batterypackmaxvoltage_ = from.batterypackmaxvoltage_;
    }
    if (cached_has_bits & 0x04000000u) {
      breaknodeperceivedpodstate_ = from.breaknodeperceivedpodstate_;
    }
    if (cached_has_bits & 0x08000000u) {
      sol1_ = from.sol1_;
    }
    if (cached_has_bits & 0x10000000u) {
      sol2_ = from.sol2_;
    }
    if (cached_has_bits & 0x20000000u) {
      sol3_ = from.sol3_;
    }
    if (cached_has_bits & 0x40000000u) {
      sol4_ = from.sol4_;
    }
    if (cached_has_bits & 0x80000000u) {
      sol5_ = from.sol5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      sol6_ = from.sol6_;
    }
    if (cached_has_bits & 0x00000002u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      lp1_ = from.lp1_;
    }
    if (cached_has_bits & 0x00000008u) {
      lp2_ = from.lp2_;
    }
    if (cached_has_bits & 0x00000010u) {
      lp3_ = from.lp3_;
    }
    if (cached_has_bits & 0x00000020u) {
      lp4_ = from.lp4_;
    }
    if (cached_has_bits & 0x00000040u) {
      pressurevesseltemperature_ = from.pressurevesseltemperature_;
    }
    if (cached_has_bits & 0x00000080u) {
      electronicsenclosurepressure_ = from.electronicsenclosurepressure_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      raildisplacementx_ = from.raildisplacementx_;
    }
    if (cached_has_bits & 0x00000200u) {
      raildisplacementy_ = from.raildisplacementy_;
    }
    if (cached_has_bits & 0x00000400u) {
      tubepressure_ = from.tubepressure_;
    }
    if (cached_has_bits & 0x00000800u) {
      coolantpressure1_ = from.coolantpressure1_;
    }
    if (cached_has_bits & 0x00001000u) {
      coolantpressure2_ = from.coolantpressure2_;
    }
    if (cached_has_bits & 0x00002000u) {
      coolantpressure3_ = from.coolantpressure3_;
    }
    if (cached_has_bits & 0x00004000u) {
      coolanttemperature_ = from.coolanttemperature_;
    }
    if (cached_has_bits & 0x00008000u) {
      railtemperature_ = from.railtemperature_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      lvdcnodestate_ = from.lvdcnodestate_;
    }
    if (cached_has_bits & 0x00020000u) {
      pack1voltage_ = from.pack1voltage_;
    }
    if (cached_has_bits & 0x00040000u) {
      pack2voltage_ = from.pack2voltage_;
    }
    if (cached_has_bits & 0x00080000u) {
      pack1current_ = from.pack1current_;
    }
    if (cached_has_bits & 0x00100000u) {
      pack2current_ = from.pack2current_;
    }
    if (cached_has_bits & 0x00200000u) {
      rail1voltage_ = from.rail1voltage_;
    }
    if (cached_has_bits & 0x00400000u) {
      rail2voltage_ = from.rail2voltage_;
    }
    if (cached_has_bits & 0x00800000u) {
      rail3voltage_ = from.rail3voltage_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      rail4voltage_ = from.rail4voltage_;
    }
    if (cached_has_bits & 0x02000000u) {
      railcurrentsensor1_ = from.railcurrentsensor1_;
    }
    if (cached_has_bits & 0x04000000u) {
      railcurrentsensor2_ = from.railcurrentsensor2_;
    }
    if (cached_has_bits & 0x08000000u) {
      railcurrentsensor3_ = from.railcurrentsensor3_;
    }
    if (cached_has_bits & 0x10000000u) {
      railcurrentsensor4_ = from.railcurrentsensor4_;
    }
    if (cached_has_bits & 0x20000000u) {
      railcurrentsensor5_ = from.railcurrentsensor5_;
    }
    if (cached_has_bits & 0x40000000u) {
      railcurrentsensor6_ = from.railcurrentsensor6_;
    }
    if (cached_has_bits & 0x80000000u) {
      railcurrentsensor7_ = from.railcurrentsensor7_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      railcurrentsensor8_ = from.railcurrentsensor8_;
    }
    if (cached_has_bits & 0x00000002u) {
      railvoltageflag_ = from.railvoltageflag_;
    }
    if (cached_has_bits & 0x00000004u) {
      railcurrentflag_ = from.railcurrentflag_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void telemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void telemetry::CopyFrom(const telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool telemetry::IsInitialized() const {
  return true;
}

void telemetry::Swap(telemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void telemetry::InternalSwap(telemetry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  heartbeatflags_.InternalSwap(&other->heartbeatflags_);
  batterypackvoltages_.InternalSwap(&other->batterypackvoltages_);
  batterypackcurrent_.InternalSwap(&other->batterypackcurrent_);
  batterycelltemperatures_.InternalSwap(&other->batterycelltemperatures_);
  heartbeatvalues_.InternalSwap(&other->heartbeatvalues_);
  swap(podstate_, other->podstate_);
  swap(breaknodestate_, other->breaknodestate_);
  swap(motorstate_, other->motorstate_);
  swap(controlsinterfacestate_, other->controlsinterfacestate_);
  swap(inverterstate_, other->inverterstate_);
  swap(missiontime_, other->missiontime_);
  swap(flighttime_, other->flighttime_);
  swap(podposition_, other->podposition_);
  swap(podvelocity_, other->podvelocity_);
  swap(podaccelerationx_, other->podaccelerationx_);
  swap(podaccelerationy_, other->podaccelerationy_);
  swap(podaccelerationz_, other->podaccelerationz_);
  swap(imuvelocity_, other->imuvelocity_);
  swap(imuaccelerationx_, other->imuaccelerationx_);
  swap(tachometervelocity_, other->tachometervelocity_);
  swap(resolvervelocity_, other->resolvervelocity_);
  swap(invertertemperature1_, other->invertertemperature1_);
  swap(invertertemperature2_, other->invertertemperature2_);
  swap(invertertemperature3_, other->invertertemperature3_);
  swap(motorcurrent_, other->motorcurrent_);
  swap(motorvoltage_, other->motorvoltage_);
  swap(invertervoltages_, other->invertervoltages_);
  swap(invertercurrents_, other->invertercurrents_);
  swap(batterymanagementstate_, other->batterymanagementstate_);
  swap(batterypackminimumvoltage_, other->batterypackminimumvoltage_);
  swap(batterypackmaxvoltage_, other->batterypackmaxvoltage_);
  swap(breaknodeperceivedpodstate_, other->breaknodeperceivedpodstate_);
  swap(sol1_, other->sol1_);
  swap(sol2_, other->sol2_);
  swap(sol3_, other->sol3_);
  swap(sol4_, other->sol4_);
  swap(sol5_, other->sol5_);
  swap(sol6_, other->sol6_);
  swap(hp_, other->hp_);
  swap(lp1_, other->lp1_);
  swap(lp2_, other->lp2_);
  swap(lp3_, other->lp3_);
  swap(lp4_, other->lp4_);
  swap(pressurevesseltemperature_, other->pressurevesseltemperature_);
  swap(electronicsenclosurepressure_, other->electronicsenclosurepressure_);
  swap(raildisplacementx_, other->raildisplacementx_);
  swap(raildisplacementy_, other->raildisplacementy_);
  swap(tubepressure_, other->tubepressure_);
  swap(coolantpressure1_, other->coolantpressure1_);
  swap(coolantpressure2_, other->coolantpressure2_);
  swap(coolantpressure3_, other->coolantpressure3_);
  swap(coolanttemperature_, other->coolanttemperature_);
  swap(railtemperature_, other->railtemperature_);
  swap(lvdcnodestate_, other->lvdcnodestate_);
  swap(pack1voltage_, other->pack1voltage_);
  swap(pack2voltage_, other->pack2voltage_);
  swap(pack1current_, other->pack1current_);
  swap(pack2current_, other->pack2current_);
  swap(rail1voltage_, other->rail1voltage_);
  swap(rail2voltage_, other->rail2voltage_);
  swap(rail3voltage_, other->rail3voltage_);
  swap(rail4voltage_, other->rail4voltage_);
  swap(railcurrentsensor1_, other->railcurrentsensor1_);
  swap(railcurrentsensor2_, other->railcurrentsensor2_);
  swap(railcurrentsensor3_, other->railcurrentsensor3_);
  swap(railcurrentsensor4_, other->railcurrentsensor4_);
  swap(railcurrentsensor5_, other->railcurrentsensor5_);
  swap(railcurrentsensor6_, other->railcurrentsensor6_);
  swap(railcurrentsensor7_, other->railcurrentsensor7_);
  swap(railcurrentsensor8_, other->railcurrentsensor8_);
  swap(railvoltageflag_, other->railvoltageflag_);
  swap(railcurrentflag_, other->railcurrentflag_);
}

::google::protobuf::Metadata telemetry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::brakeNodeData* Arena::CreateMaybeMessage< ::brakeNodeData >(Arena* arena) {
  return Arena::CreateInternal< ::brakeNodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::podCommand* Arena::CreateMaybeMessage< ::podCommand >(Arena* arena) {
  return Arena::CreateInternal< ::podCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::telemetry* Arena::CreateMaybeMessage< ::telemetry >(Arena* arena) {
  return Arena::CreateInternal< ::telemetry >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

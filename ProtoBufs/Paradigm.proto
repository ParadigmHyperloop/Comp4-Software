syntax = "proto2";

// STATE ENUMS
enum BrakeNodeStates {
    bnsBooting         = 0;
    bnsStandby         = 1;
    bnsFlight          = 2;
    bnsBraking         = 3;
    bnsSolenoidControl = 4;
    bnsNone            = 5;
}

enum PodStates {
    psBooting       = 0;
    psStandby       = 1;
    psArming        = 2;
    psArmed         = 3;
    psPreFlight     = 4;
    psAcceleration  = 5;
    psCoasting      = 6;
    psBraking       = 7;
    psShutdown      = 8;
    psNone          = 9;
}

enum MotorStates {
    msOff       = 0;
    msCharging  = 1;
    msIdle      = 2;
    msEngaged   = 3;
}

enum ControlsInterfaceStates {
    ciStandby = 0;
    ciArm = 1;
    ciFlight = 2;
    ciEmergencyStop = 3;
    ciNone = 4;
    ciRestart = 5;
}

enum InverterStates {
    isNone = 0;
    isConnected = 1;
}

enum BatteryManagementStates {
    bmsNominal = 0;
}

enum LvdcNodeStates {
    lvdcBooting = 0;
    lvdcStandby = 1;
    lvdcFlight  = 2;
    lvdcNone    = 3;
}

// CONTROL LAPTOP COMMAND
message PodCommand {
    optional bool hasCommand = 7 [default = false];
    optional ControlsInterfaceStates controlsInterfaceState = 1;
    optional PodStates manualPodState = 2;
    optional BrakeNodeStates manualBrakeNodeState = 3;
    optional MotorStates manualMotorState = 4;
    optional LvdcNodeStates manualLvdcNodeState = 5;
    optional bool automaticStateTransitions = 6;
    repeated int32 solenoidConfiguration = 8;
    repeated int32 powerRailConfiguration = 9;
    repeated int32 sensorOverrideConfiguration = 10;
    optional uint32 motorTorque = 11;
    optional uint32 flightDistance = 12;
    optional uint32 maxFlightTime = 13;
}

// POD TELEMETRY
message Telemetry {
    // States
    optional PodStates podState = 1;
    optional BrakeNodeStates brakeNodeState = 2;
    optional MotorStates motorState = 3;
    optional ControlsInterfaceStates controlsInterfaceState = 4;
    optional InverterStates inverterState = 5;
    optional LvdcNodeStates lvdcNodeState = 54;
    optional BatteryManagementStates batteryManagementState = 25;
    optional PodStates breakNodePerceivedPodState = 31;

    // Time
    optional int32 missionTime = 6;
    optional int32 flightTime = 7;

    // HeatBeats
    repeated int32 heartbeatFlags = 8;
    repeated int32 heartbeatValues = 71;

    // Navigation
    optional int32 podPosition = 9;
    optional int32 podVelocity = 10;
    optional int32 podAccelerationX = 11;
    optional int32 tachometerVelocity = 16;
    optional int32 resolverVelocity = 17;

    // Inverter
    optional int32 maxIgbtTemperature = 18;
    optional int32 gateDriverTemperature = 19;
    optional int32 inverterControlBoardTemperature = 20;
    optional int32 motorTemperature = 21;
    optional int32 inverterBusVoltage = 22;
    optional int32 inverterHeartbeat = 78;
    optional int32 motorSpeed = 80;


    optional int32 inverterVoltages = 23;
    optional int32 inverterCurrents = 24;
    //optional int32 inverterInternalStates = 30;

    // HV-BMS
    optional float hvBatteryPackVoltage = 26;
    optional float hvBatteryPackCurrent = 27;
    optional float hvBatteryPackMaxCellTemperature = 28;
    optional float hvBatteryPackMaxCellVoltage = 30;
    optional float hvBatteryPackMinimumCellVoltage = 29;
    optional int32  hvBatteryPackStateOfCharge = 79;

    // Brake Node
    optional bool solenoid1 = 32;
    optional bool solenoid2 = 33;
    optional bool solenoid3 = 34;
    optional bool solenoid4 = 35;
    optional float highPressure  = 38;
    optional float lowPressure1 = 39;
    optional float lowPressure2 = 40;
    optional float lowPressure3 = 41;
    optional float lowPressure4 = 42;
    optional float pressureVesselTemperature = 43;
    optional int32 coolantTemperature = 52;

    optional int32 enclosurePressure = 44;
    optional int32 enclosureTemperature = 45;
    optional int32 railDisplacementY = 46;

    // Rear Node
    optional int32 tubePressure = 48;
    optional int32 coolantPressure1 = 49;
    optional int32 coolantPressure2 = 50;
    optional int32 coolantPressure3 = 51;
    optional float railTemperature = 53;

    // Ghost Train
    optional int32 pack1Voltage = 55;
    optional int32 pack2Voltage = 56;
    optional int32 pack1Current = 57;
    optional int32 pack2Current = 58;
    optional int32 rail1Voltage = 59;
    optional int32 rail2Voltage = 60;
    optional int32 rail3Voltage = 61;
    optional int32 rail4Voltage = 62;
    optional int32 railVoltageFlag = 72;

    optional int32 railCurrentSensor1 = 63;
    optional int32 railCurrentSensor2 = 64;
    optional int32 railCurrentSensor3 = 65;
    optional int32 railCurrentSensor4 = 66;
    optional int32 railCurrentSensor5 = 67;
    optional int32 railCurrentSensor6 = 68;
    optional int32 railCurrentSensor7 = 69;
    optional int32 railCurrentSensor8 = 70;
    optional int32 railCurrentFlag = 73;

    //Flight Profile
    optional uint32 motorTorque = 74;
    optional uint32 flightDistance = 75;
    optional uint32 maxFlightTime = 76;

    //Updates
    repeated string updateMessages = 77;

    // Navigation Testing
    optional uint32 tachRpm = 81;
    optional uint32 irRpm = 82;
    optional float tachDistance = 83;
    optional float irDistance = 84;
}

// FC => NODE COMMANDS
message FcToBrakeNode {
    optional int32 packetNum = 1;
    optional BrakeNodeStates nodeState = 2;
    optional bool solenoid1Config = 3;
    optional bool solenoid2Config = 4;
    optional bool solenoid3Config = 5;
    optional bool solenoid4Config = 6;
}

message FcToLvdcNode {
    optional int32 packetNum = 1;
    optional PodStates podState = 2;
    optional LvdcNodeStates manualNodeState = 3;
}

// NODE => FC TELEMETRY
message DtsNodeToFc {
    required int32 packetNum = 1;
    required BrakeNodeStates brakeNodeState = 2;
    required bool brakeSolenoidState = 3;
    required bool ventSolenoidState = 4;
    required float rotorTemperature = 5;
    required float pneumaticTemperature = 6;
    required float tankPressure = 7;
    required float brakePressure = 8;
}

message EnclosureNodeToFc {
    required int32 packetNum = 1;
    required float enclosurePressure = 2;
    required float enclosureTemperature = 3;
    required float coolantPressure1 = 4;
    required float coolantPressure2 = 5;
}

message LvdcNodeToFc {
    required int32 packetNum = 1;
    required LvdcNodeStates state = 2;
    required float highPowerPackVoltage = 3;
    required float lowPowerPackVoltage = 4;
    required float highPowerPackCurrent = 5;
    required float lowPowerPackCurrent = 6;

    required float lowPower5Voltage = 7;
    required float lowPower12Voltage = 8;
    required float highPower12Voltage = 9;
    required float lowPower24Voltage = 10;

    required float lowPower5Current = 11;
    required float lowPower12Current = 12;
    required float nodeCurrent = 13;
    required float inverterCurrent = 14;
    required float cooling1Current = 15;
    required float cooling2Current = 16;
}

message BrakeNodeToFc {
    required int32 packetNum = 1;
    required BrakeNodeStates state = 2;
    required bool solenoid1 = 3;
    required bool solenoid2 = 4;
    required bool solenoid3 = 5;
    required bool solenoid4 = 6;
    required float highPressure = 7;
    required float lowPressure1 = 8;
    required float lowPressure2 = 9;
    required float lowPressure3 = 10;
    required float lowPressureCommon = 11;
    required float pneumaticTemperature = 12;
    required float coolantTemperature = 13;
}

// CONFIG
message FlightConfig {
    optional uint32 retrievalTimeout = 1;
    optional int32 pdsTelemetryPort = 2 [default = 7000];
    optional int32 commandPort = 3 [default = 6000];
    optional int32 heartbeatTimeout = 4 [default = 10000];
    optional string podDriver = 5;
    //optional string controlLaptopIpAddr = 6 [default = "192.168.1.100"];
    optional string controlLaptopIpAddr = 6 [default = "127.0.1.100"];
    optional uint64 nodePort = 7 [default = 5555];
    optional uint64 nodeTimeout = 8 [default = 2000];
    optional uint64 brakeNodeServerPort = 9 [default = 5550];
    optional int32 pdsUpdateFreq = 10 [default = 100];
    optional int32 brakeNodeUpdateFreq = 11 [default = 10];
    optional int32 enclosureNodeServerNumber = 12 [default = 5551];
    optional int32 lvdcNodeServerNumber = 13 [default = 5552];
}

message DefaultFcToNode {
    optional PodStates podState = 1;
}

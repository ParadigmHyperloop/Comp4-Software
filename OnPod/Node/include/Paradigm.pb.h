/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Sun Jun 30 13:37:31 2019. */

#ifndef PB_PARADIGM_PB_H_INCLUDED
#define PB_PARADIGM_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _BrakeNodeStates {
    BrakeNodeStates_bnsBooting = 0,
    BrakeNodeStates_bnsStandby = 1,
    BrakeNodeStates_bnsFlight = 2,
    BrakeNodeStates_bnsBraking = 3,
    BrakeNodeStates_bnsSolenoidControl = 4,
    BrakeNodeStates_bnsNone = 5
} BrakeNodeStates;
#define _BrakeNodeStates_MIN BrakeNodeStates_bnsBooting
#define _BrakeNodeStates_MAX BrakeNodeStates_bnsNone
#define _BrakeNodeStates_ARRAYSIZE ((BrakeNodeStates)(BrakeNodeStates_bnsNone+1))

typedef enum _PodStates {
    PodStates_psBooting = 0,
    PodStates_psStandby = 1,
    PodStates_psArming = 2,
    PodStates_psArmed = 3,
    PodStates_psPreFlight = 4,
    PodStates_psAcceleration = 5,
    PodStates_psCoasting = 6,
    PodStates_psBraking = 7,
    PodStates_psShutdown = 8,
    PodStates_psNone = 9
} PodStates;
#define _PodStates_MIN PodStates_psBooting
#define _PodStates_MAX PodStates_psNone
#define _PodStates_ARRAYSIZE ((PodStates)(PodStates_psNone+1))

typedef enum _MotorStates {
    MotorStates_msOff = 0,
    MotorStates_msCharging = 1,
    MotorStates_msIdle = 2,
    MotorStates_msEngaged = 3
} MotorStates;
#define _MotorStates_MIN MotorStates_msOff
#define _MotorStates_MAX MotorStates_msEngaged
#define _MotorStates_ARRAYSIZE ((MotorStates)(MotorStates_msEngaged+1))

typedef enum _ControlsInterfaceStates {
    ControlsInterfaceStates_ciStandby = 0,
    ControlsInterfaceStates_ciArm = 1,
    ControlsInterfaceStates_ciFlight = 2,
    ControlsInterfaceStates_ciEmergencyStop = 3,
    ControlsInterfaceStates_ciNone = 4,
    ControlsInterfaceStates_ciRestart = 5
} ControlsInterfaceStates;
#define _ControlsInterfaceStates_MIN ControlsInterfaceStates_ciStandby
#define _ControlsInterfaceStates_MAX ControlsInterfaceStates_ciRestart
#define _ControlsInterfaceStates_ARRAYSIZE ((ControlsInterfaceStates)(ControlsInterfaceStates_ciRestart+1))

typedef enum _InverterStates {
    InverterStates_isNone = 0,
    InverterStates_isConnected = 1
} InverterStates;
#define _InverterStates_MIN InverterStates_isNone
#define _InverterStates_MAX InverterStates_isConnected
#define _InverterStates_ARRAYSIZE ((InverterStates)(InverterStates_isConnected+1))

typedef enum _BatteryManagementStates {
    BatteryManagementStates_bmsNominal = 0
} BatteryManagementStates;
#define _BatteryManagementStates_MIN BatteryManagementStates_bmsNominal
#define _BatteryManagementStates_MAX BatteryManagementStates_bmsNominal
#define _BatteryManagementStates_ARRAYSIZE ((BatteryManagementStates)(BatteryManagementStates_bmsNominal+1))

typedef enum _LvdcNodeStates {
    LvdcNodeStates_lvdcBooting = 0,
    LvdcNodeStates_lvdcStandby = 1,
    LvdcNodeStates_lvdcFlight = 2,
    LvdcNodeStates_lvdcNone = 3
} LvdcNodeStates;
#define _LvdcNodeStates_MIN LvdcNodeStates_lvdcBooting
#define _LvdcNodeStates_MAX LvdcNodeStates_lvdcNone
#define _LvdcNodeStates_ARRAYSIZE ((LvdcNodeStates)(LvdcNodeStates_lvdcNone+1))

/* Struct definitions */
typedef struct _BrakeNodeToFc {
    int32_t packetNum;
    BrakeNodeStates state;
    bool solenoid1;
    bool solenoid2;
    bool solenoid3;
    bool solenoid4;
    float highPressure;
    float lowPressure1;
    float lowPressure2;
    float lowPressure3;
    float lowPressureCommon;
    float pneumaticTemperature;
    float coolantTankPressure;
/* @@protoc_insertion_point(struct:BrakeNodeToFc) */
} BrakeNodeToFc;

typedef struct _DefaultFcToNode {
    bool has_podState;
    PodStates podState;
/* @@protoc_insertion_point(struct:DefaultFcToNode) */
} DefaultFcToNode;

typedef struct _DtsNodeToFc {
    int32_t packetNum;
    BrakeNodeStates brakeNodeState;
    bool brakeSolenoidState;
    bool ventSolenoidState;
    float rotorTemperature;
    float pneumaticTemperature;
    float tankPressure;
    float brakePressure;
/* @@protoc_insertion_point(struct:DtsNodeToFc) */
} DtsNodeToFc;

typedef struct _EnclosureNodeToFc {
    int32_t packetNum;
    float enclosurePressure;
    float enclosureTemperature;
    float coolantPressure1;
    float coolantPressure2;
/* @@protoc_insertion_point(struct:EnclosureNodeToFc) */
} EnclosureNodeToFc;

typedef struct _FcToBrakeNode {
    bool has_packetNum;
    int32_t packetNum;
    bool has_nodeState;
    BrakeNodeStates nodeState;
    bool has_solenoid1Config;
    bool solenoid1Config;
    bool has_solenoid2Config;
    bool solenoid2Config;
    bool has_solenoid3Config;
    bool solenoid3Config;
    bool has_solenoid4Config;
    bool solenoid4Config;
/* @@protoc_insertion_point(struct:FcToBrakeNode) */
} FcToBrakeNode;

typedef struct _FcToLvdcNode {
    bool has_packetNum;
    int32_t packetNum;
    bool has_podState;
    PodStates podState;
    bool has_manualNodeState;
    LvdcNodeStates manualNodeState;
/* @@protoc_insertion_point(struct:FcToLvdcNode) */
} FcToLvdcNode;

typedef struct _FlightConfig {
    bool has_retrievalTimeout;
    uint32_t retrievalTimeout;
    bool has_pdsTelemetryPort;
    int32_t pdsTelemetryPort;
    bool has_commandPort;
    int32_t commandPort;
    bool has_heartbeatTimeout;
    int32_t heartbeatTimeout;
    pb_callback_t podDriver;
    pb_callback_t controlLaptopIpAddr;
    bool has_brakeNodePort;
    uint64_t brakeNodePort;
    bool has_brakeNodeTimeout;
    uint64_t brakeNodeTimeout;
    bool has_brakeNodeServerPort;
    uint64_t brakeNodeServerPort;
/* @@protoc_insertion_point(struct:FlightConfig) */
} FlightConfig;

typedef struct _LvdcNodeToFc {
    int32_t packetNum;
    LvdcNodeStates state;
    float highPowerPackVoltage;
    float lowPowerPackVoltage;
    float highPowerPackCurrent;
    float lowPowerPackCurrent;
    float lowPower5Voltage;
    float lowPower12Voltage;
    float highPower12Voltage;
    float lowPower24Voltage;
    float lowPower5Current;
    float lowPower12Current;
    float nodeCurrent;
    float inverterCurrent;
    float cooling1Current;
    float cooling2Current;
/* @@protoc_insertion_point(struct:LvdcNodeToFc) */
} LvdcNodeToFc;

typedef struct _PodCommand {
    bool has_controlsInterfaceState;
    ControlsInterfaceStates controlsInterfaceState;
    bool has_manualPodState;
    PodStates manualPodState;
    bool has_manualBrakeNodeState;
    BrakeNodeStates manualBrakeNodeState;
    bool has_manualMotorState;
    MotorStates manualMotorState;
    bool has_manualLvdcNodeState;
    LvdcNodeStates manualLvdcNodeState;
    bool has_automaticStateTransitions;
    bool automaticStateTransitions;
    bool has_hasCommand;
    bool hasCommand;
    pb_callback_t solenoidConfiguration;
    pb_callback_t powerRailConfiguration;
    pb_callback_t sensorOverrideConfiguration;
    bool has_motorTorque;
    uint32_t motorTorque;
    bool has_flightDistance;
    uint32_t flightDistance;
    bool has_maxFlightTime;
    uint32_t maxFlightTime;
/* @@protoc_insertion_point(struct:PodCommand) */
} PodCommand;

typedef struct _Telemetry {
    bool has_podState;
    PodStates podState;
    bool has_brakeNodeState;
    BrakeNodeStates brakeNodeState;
    bool has_motorState;
    MotorStates motorState;
    bool has_controlsInterfaceState;
    ControlsInterfaceStates controlsInterfaceState;
    bool has_inverterState;
    InverterStates inverterState;
    bool has_missionTime;
    int32_t missionTime;
    bool has_flightTime;
    int32_t flightTime;
    pb_callback_t heartbeatFlags;
    bool has_podPosition;
    int32_t podPosition;
    bool has_podVelocity;
    int32_t podVelocity;
    bool has_podAccelerationX;
    int32_t podAccelerationX;
    bool has_tachometerVelocity;
    int32_t tachometerVelocity;
    bool has_resolverVelocity;
    int32_t resolverVelocity;
    bool has_maxIgbtTemperature;
    int32_t maxIgbtTemperature;
    bool has_gateDriverTemperature;
    int32_t gateDriverTemperature;
    bool has_inverterControlBoardTemperature;
    int32_t inverterControlBoardTemperature;
    bool has_motorTemperature;
    int32_t motorTemperature;
    bool has_inverterBusVoltage;
    int32_t inverterBusVoltage;
    bool has_inverterVoltages;
    int32_t inverterVoltages;
    bool has_inverterCurrents;
    int32_t inverterCurrents;
    bool has_batteryManagementState;
    BatteryManagementStates batteryManagementState;
    bool has_hvBatteryPackVoltage;
    float hvBatteryPackVoltage;
    bool has_hvBatteryPackCurrent;
    float hvBatteryPackCurrent;
    bool has_hvBatteryPackMaxCellTemperature;
    float hvBatteryPackMaxCellTemperature;
    bool has_hvBatteryPackMinimumCellVoltage;
    float hvBatteryPackMinimumCellVoltage;
    bool has_hvBatteryPackMaxCellVoltage;
    float hvBatteryPackMaxCellVoltage;
    bool has_breakNodePerceivedPodState;
    PodStates breakNodePerceivedPodState;
    bool has_solenoid1;
    bool solenoid1;
    bool has_solenoid2;
    bool solenoid2;
    bool has_solenoid3;
    bool solenoid3;
    bool has_solenoid4;
    bool solenoid4;
    bool has_highPressure;
    float highPressure;
    bool has_lowPressure1;
    float lowPressure1;
    bool has_lowPressure2;
    float lowPressure2;
    bool has_lowPressure3;
    float lowPressure3;
    bool has_lowPressure4;
    float lowPressure4;
    bool has_pressureVesselTemperature;
    float pressureVesselTemperature;
    bool has_electronicsEnclosurePressure;
    int32_t electronicsEnclosurePressure;
    bool has_railDisplacementX;
    int32_t railDisplacementX;
    bool has_railDisplacementY;
    int32_t railDisplacementY;
    bool has_tubePressure;
    int32_t tubePressure;
    bool has_coolantPressure1;
    int32_t coolantPressure1;
    bool has_coolantPressure2;
    int32_t coolantPressure2;
    bool has_coolantPressure3;
    int32_t coolantPressure3;
    bool has_coolantTemperature;
    int32_t coolantTemperature;
    bool has_railTemperature;
    float railTemperature;
    bool has_lvdcNodeState;
    LvdcNodeStates lvdcNodeState;
    bool has_pack1Voltage;
    int32_t pack1Voltage;
    bool has_pack2Voltage;
    int32_t pack2Voltage;
    bool has_pack1Current;
    int32_t pack1Current;
    bool has_pack2Current;
    int32_t pack2Current;
    bool has_rail1Voltage;
    int32_t rail1Voltage;
    bool has_rail2Voltage;
    int32_t rail2Voltage;
    bool has_rail3Voltage;
    int32_t rail3Voltage;
    bool has_rail4Voltage;
    int32_t rail4Voltage;
    bool has_railCurrentSensor1;
    int32_t railCurrentSensor1;
    bool has_railCurrentSensor2;
    int32_t railCurrentSensor2;
    bool has_railCurrentSensor3;
    int32_t railCurrentSensor3;
    bool has_railCurrentSensor4;
    int32_t railCurrentSensor4;
    bool has_railCurrentSensor5;
    int32_t railCurrentSensor5;
    bool has_railCurrentSensor6;
    int32_t railCurrentSensor6;
    bool has_railCurrentSensor7;
    int32_t railCurrentSensor7;
    bool has_railCurrentSensor8;
    int32_t railCurrentSensor8;
    pb_callback_t heartbeatValues;
    bool has_railVoltageFlag;
    int32_t railVoltageFlag;
    bool has_railCurrentFlag;
    int32_t railCurrentFlag;
    bool has_motorTorque;
    uint32_t motorTorque;
    bool has_flightDistance;
    uint32_t flightDistance;
    bool has_maxFlightTime;
    uint32_t maxFlightTime;
    pb_callback_t updateMessages;
    bool has_inverterHeartbeat;
    int32_t inverterHeartbeat;
    bool has_hvBatteryPackStateOfCharge;
    int32_t hvBatteryPackStateOfCharge;
    bool has_motorSpeed;
    int32_t motorSpeed;
/* @@protoc_insertion_point(struct:Telemetry) */
} Telemetry;

/* Default values for struct fields */
extern const bool PodCommand_hasCommand_default;
extern const int32_t FlightConfig_pdsTelemetryPort_default;
extern const int32_t FlightConfig_commandPort_default;
extern const int32_t FlightConfig_heartbeatTimeout_default;
extern const uint64_t FlightConfig_brakeNodePort_default;
extern const uint64_t FlightConfig_brakeNodeTimeout_default;
extern const uint64_t FlightConfig_brakeNodeServerPort_default;

/* Initializer values for message structs */
#define PodCommand_init_default                  {false, _ControlsInterfaceStates_MIN, false, _PodStates_MIN, false, _BrakeNodeStates_MIN, false, _MotorStates_MIN, false, _LvdcNodeStates_MIN, false, 0, false, false, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define Telemetry_init_default                   {false, _PodStates_MIN, false, _BrakeNodeStates_MIN, false, _MotorStates_MIN, false, _ControlsInterfaceStates_MIN, false, _InverterStates_MIN, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _BatteryManagementStates_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, _PodStates_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _LvdcNodeStates_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define FcToBrakeNode_init_default               {false, 0, false, _BrakeNodeStates_MIN, false, 0, false, 0, false, 0, false, 0}
#define FcToLvdcNode_init_default                {false, 0, false, _PodStates_MIN, false, _LvdcNodeStates_MIN}
#define DtsNodeToFc_init_default                 {0, _BrakeNodeStates_MIN, 0, 0, 0, 0, 0, 0}
#define EnclosureNodeToFc_init_default           {0, 0, 0, 0, 0}
#define LvdcNodeToFc_init_default                {0, _LvdcNodeStates_MIN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define BrakeNodeToFc_init_default               {0, _BrakeNodeStates_MIN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define FlightConfig_init_default                {false, 0, false, 7000, false, 6000, false, 10000, {{NULL}, NULL}, {{NULL}, NULL}, false, 5555ull, false, 4000ull, false, 5550ull}
#define DefaultFcToNode_init_default             {false, _PodStates_MIN}
#define PodCommand_init_zero                     {false, _ControlsInterfaceStates_MIN, false, _PodStates_MIN, false, _BrakeNodeStates_MIN, false, _MotorStates_MIN, false, _LvdcNodeStates_MIN, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define Telemetry_init_zero                      {false, _PodStates_MIN, false, _BrakeNodeStates_MIN, false, _MotorStates_MIN, false, _ControlsInterfaceStates_MIN, false, _InverterStates_MIN, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _BatteryManagementStates_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, _PodStates_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _LvdcNodeStates_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define FcToBrakeNode_init_zero                  {false, 0, false, _BrakeNodeStates_MIN, false, 0, false, 0, false, 0, false, 0}
#define FcToLvdcNode_init_zero                   {false, 0, false, _PodStates_MIN, false, _LvdcNodeStates_MIN}
#define DtsNodeToFc_init_zero                    {0, _BrakeNodeStates_MIN, 0, 0, 0, 0, 0, 0}
#define EnclosureNodeToFc_init_zero              {0, 0, 0, 0, 0}
#define LvdcNodeToFc_init_zero                   {0, _LvdcNodeStates_MIN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define BrakeNodeToFc_init_zero                  {0, _BrakeNodeStates_MIN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define FlightConfig_init_zero                   {false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0}
#define DefaultFcToNode_init_zero                {false, _PodStates_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define BrakeNodeToFc_packetNum_tag              1
#define BrakeNodeToFc_state_tag                  2
#define BrakeNodeToFc_solenoid1_tag              3
#define BrakeNodeToFc_solenoid2_tag              4
#define BrakeNodeToFc_solenoid3_tag              5
#define BrakeNodeToFc_solenoid4_tag              6
#define BrakeNodeToFc_highPressure_tag           7
#define BrakeNodeToFc_lowPressure1_tag           8
#define BrakeNodeToFc_lowPressure2_tag           9
#define BrakeNodeToFc_lowPressure3_tag           10
#define BrakeNodeToFc_lowPressureCommon_tag      11
#define BrakeNodeToFc_pneumaticTemperature_tag   12
#define BrakeNodeToFc_coolantTankPressure_tag    13
#define DefaultFcToNode_podState_tag             1
#define DtsNodeToFc_packetNum_tag                1
#define DtsNodeToFc_brakeNodeState_tag           2
#define DtsNodeToFc_brakeSolenoidState_tag       3
#define DtsNodeToFc_ventSolenoidState_tag        4
#define DtsNodeToFc_rotorTemperature_tag         5
#define DtsNodeToFc_pneumaticTemperature_tag     6
#define DtsNodeToFc_tankPressure_tag             7
#define DtsNodeToFc_brakePressure_tag            8
#define EnclosureNodeToFc_packetNum_tag          1
#define EnclosureNodeToFc_enclosurePressure_tag  2
#define EnclosureNodeToFc_enclosureTemperature_tag 3
#define EnclosureNodeToFc_coolantPressure1_tag   4
#define EnclosureNodeToFc_coolantPressure2_tag   5
#define FcToBrakeNode_packetNum_tag              1
#define FcToBrakeNode_nodeState_tag              2
#define FcToBrakeNode_solenoid1Config_tag        3
#define FcToBrakeNode_solenoid2Config_tag        4
#define FcToBrakeNode_solenoid3Config_tag        5
#define FcToBrakeNode_solenoid4Config_tag        6
#define FcToLvdcNode_packetNum_tag               1
#define FcToLvdcNode_podState_tag                2
#define FcToLvdcNode_manualNodeState_tag         3
#define FlightConfig_retrievalTimeout_tag        1
#define FlightConfig_pdsTelemetryPort_tag        2
#define FlightConfig_commandPort_tag             3
#define FlightConfig_heartbeatTimeout_tag        4
#define FlightConfig_podDriver_tag               5
#define FlightConfig_controlLaptopIpAddr_tag     6
#define FlightConfig_brakeNodePort_tag           7
#define FlightConfig_brakeNodeTimeout_tag        8
#define FlightConfig_brakeNodeServerPort_tag     9
#define LvdcNodeToFc_packetNum_tag               1
#define LvdcNodeToFc_state_tag                   2
#define LvdcNodeToFc_highPowerPackVoltage_tag    3
#define LvdcNodeToFc_lowPowerPackVoltage_tag     4
#define LvdcNodeToFc_highPowerPackCurrent_tag    5
#define LvdcNodeToFc_lowPowerPackCurrent_tag     6
#define LvdcNodeToFc_lowPower5Voltage_tag        7
#define LvdcNodeToFc_lowPower12Voltage_tag       8
#define LvdcNodeToFc_highPower12Voltage_tag      9
#define LvdcNodeToFc_lowPower24Voltage_tag       10
#define LvdcNodeToFc_lowPower5Current_tag        11
#define LvdcNodeToFc_lowPower12Current_tag       12
#define LvdcNodeToFc_nodeCurrent_tag             13
#define LvdcNodeToFc_inverterCurrent_tag         14
#define LvdcNodeToFc_cooling1Current_tag         15
#define LvdcNodeToFc_cooling2Current_tag         16
#define PodCommand_hasCommand_tag                7
#define PodCommand_controlsInterfaceState_tag    1
#define PodCommand_manualPodState_tag            2
#define PodCommand_manualBrakeNodeState_tag      3
#define PodCommand_manualMotorState_tag          4
#define PodCommand_manualLvdcNodeState_tag       5
#define PodCommand_automaticStateTransitions_tag 6
#define PodCommand_solenoidConfiguration_tag     8
#define PodCommand_powerRailConfiguration_tag    9
#define PodCommand_sensorOverrideConfiguration_tag 10
#define PodCommand_motorTorque_tag               11
#define PodCommand_flightDistance_tag            12
#define PodCommand_maxFlightTime_tag             13
#define Telemetry_podState_tag                   1
#define Telemetry_brakeNodeState_tag             2
#define Telemetry_motorState_tag                 3
#define Telemetry_controlsInterfaceState_tag     4
#define Telemetry_inverterState_tag              5
#define Telemetry_lvdcNodeState_tag              54
#define Telemetry_batteryManagementState_tag     25
#define Telemetry_breakNodePerceivedPodState_tag 31
#define Telemetry_missionTime_tag                6
#define Telemetry_flightTime_tag                 7
#define Telemetry_heartbeatFlags_tag             8
#define Telemetry_heartbeatValues_tag            71
#define Telemetry_podPosition_tag                9
#define Telemetry_podVelocity_tag                10
#define Telemetry_podAccelerationX_tag           11
#define Telemetry_tachometerVelocity_tag         16
#define Telemetry_resolverVelocity_tag           17
#define Telemetry_maxIgbtTemperature_tag         18
#define Telemetry_gateDriverTemperature_tag      19
#define Telemetry_inverterControlBoardTemperature_tag 20
#define Telemetry_motorTemperature_tag           21
#define Telemetry_inverterBusVoltage_tag         22
#define Telemetry_inverterHeartbeat_tag          78
#define Telemetry_motorSpeed_tag                 80
#define Telemetry_inverterVoltages_tag           23
#define Telemetry_inverterCurrents_tag           24
#define Telemetry_hvBatteryPackVoltage_tag       26
#define Telemetry_hvBatteryPackCurrent_tag       27
#define Telemetry_hvBatteryPackMaxCellTemperature_tag 28
#define Telemetry_hvBatteryPackMaxCellVoltage_tag 30
#define Telemetry_hvBatteryPackMinimumCellVoltage_tag 29
#define Telemetry_hvBatteryPackStateOfCharge_tag 79
#define Telemetry_solenoid1_tag                  32
#define Telemetry_solenoid2_tag                  33
#define Telemetry_solenoid3_tag                  34
#define Telemetry_solenoid4_tag                  35
#define Telemetry_highPressure_tag               38
#define Telemetry_lowPressure1_tag               39
#define Telemetry_lowPressure2_tag               40
#define Telemetry_lowPressure3_tag               41
#define Telemetry_lowPressure4_tag               42
#define Telemetry_pressureVesselTemperature_tag  43
#define Telemetry_electronicsEnclosurePressure_tag 44
#define Telemetry_railDisplacementX_tag          45
#define Telemetry_railDisplacementY_tag          46
#define Telemetry_tubePressure_tag               48
#define Telemetry_coolantPressure1_tag           49
#define Telemetry_coolantPressure2_tag           50
#define Telemetry_coolantPressure3_tag           51
#define Telemetry_coolantTemperature_tag         52
#define Telemetry_railTemperature_tag            53
#define Telemetry_pack1Voltage_tag               55
#define Telemetry_pack2Voltage_tag               56
#define Telemetry_pack1Current_tag               57
#define Telemetry_pack2Current_tag               58
#define Telemetry_rail1Voltage_tag               59
#define Telemetry_rail2Voltage_tag               60
#define Telemetry_rail3Voltage_tag               61
#define Telemetry_rail4Voltage_tag               62
#define Telemetry_railVoltageFlag_tag            72
#define Telemetry_railCurrentSensor1_tag         63
#define Telemetry_railCurrentSensor2_tag         64
#define Telemetry_railCurrentSensor3_tag         65
#define Telemetry_railCurrentSensor4_tag         66
#define Telemetry_railCurrentSensor5_tag         67
#define Telemetry_railCurrentSensor6_tag         68
#define Telemetry_railCurrentSensor7_tag         69
#define Telemetry_railCurrentSensor8_tag         70
#define Telemetry_railCurrentFlag_tag            73
#define Telemetry_motorTorque_tag                74
#define Telemetry_flightDistance_tag             75
#define Telemetry_maxFlightTime_tag              76
#define Telemetry_updateMessages_tag             77

/* Struct field encoding specification for nanopb */
extern const pb_field_t PodCommand_fields[14];
extern const pb_field_t Telemetry_fields[74];
extern const pb_field_t FcToBrakeNode_fields[7];
extern const pb_field_t FcToLvdcNode_fields[4];
extern const pb_field_t DtsNodeToFc_fields[9];
extern const pb_field_t EnclosureNodeToFc_fields[6];
extern const pb_field_t LvdcNodeToFc_fields[17];
extern const pb_field_t BrakeNodeToFc_fields[14];
extern const pb_field_t FlightConfig_fields[10];
extern const pb_field_t DefaultFcToNode_fields[2];

/* Maximum encoded size of messages (where known) */
/* PodCommand_size depends on runtime parameters */
/* Telemetry_size depends on runtime parameters */
#define FcToBrakeNode_size                       21
#define FcToLvdcNode_size                        15
#define DtsNodeToFc_size                         37
#define EnclosureNodeToFc_size                   31
#define LvdcNodeToFc_size                        84
#define BrakeNodeToFc_size                       56
/* FlightConfig_size depends on runtime parameters */
#define DefaultFcToNode_size                     2

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define PARADIGM_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif

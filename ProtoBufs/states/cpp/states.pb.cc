// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: states.proto

#include "states.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_states_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "states.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014states.proto*\235\001\n\017breakNodeStates\022\016\n\nbn"
      "sBooting\020\000\022\016\n\nbnsStandby\020\001\022\r\n\tbnsArming\020"
      "\002\022\014\n\010bnsArmed\020\003\022\r\n\tbnsFlight\020\004\022\016\n\nbnsBra"
      "king\020\005\022\016\n\nbnsVenting\020\006\022\020\n\014bnsRetrieval\020\007"
      "\022\014\n\010bnsError\020\010*\216\001\n\tpodStates\022\r\n\tpsBootin"
      "g\020\000\022\r\n\tpsStandby\020\001\022\014\n\010psArming\020\002\022\013\n\007psAr"
      "med\020\003\022\014\n\010psFlight\020\004\022\r\n\tpsBraking\020\005\022\r\n\tps"
      "Venting\020\006\022\017\n\013psRetrieval\020\007\022\013\n\007psError\020\010*"
      "C\n\013motorStates\022\t\n\005msOff\020\000\022\016\n\nmsCharging\020"
      "\001\022\n\n\006msIdle\020\002\022\r\n\tmsEngaged\020\003**\n\027controls"
      "InterfaceStates\022\017\n\013ciConnected\020\000* \n\016inve"
      "rterStates\022\016\n\niConnected\020\000*)\n\027batteryMan"
      "agementStates\022\016\n\nbmsNominal\020\000*.\n\016rearNod"
      "eStates\022\r\n\trnBooting\020\000\022\r\n\trnNominal\020\001*!\n"
      "\016lvdcNodeStates\022\017\n\013lvdcBooting\020\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "states.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_states_2eproto
const ::google::protobuf::EnumDescriptor* breakNodeStates_descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_enum_descriptors[0];
}
bool breakNodeStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* podStates_descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_enum_descriptors[1];
}
bool podStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* motorStates_descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_enum_descriptors[2];
}
bool motorStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* controlsInterfaceStates_descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_enum_descriptors[3];
}
bool controlsInterfaceStates_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* inverterStates_descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_enum_descriptors[4];
}
bool inverterStates_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* batteryManagementStates_descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_enum_descriptors[5];
}
bool batteryManagementStates_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rearNodeStates_descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_enum_descriptors[6];
}
bool rearNodeStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* lvdcNodeStates_descriptor() {
  protobuf_states_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_states_2eproto::file_level_enum_descriptors[7];
}
bool lvdcNodeStates_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

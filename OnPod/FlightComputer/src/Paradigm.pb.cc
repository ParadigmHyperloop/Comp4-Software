// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Paradigm.proto

#include "Paradigm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class PodCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PodCommand> _instance;
} _PodCommand_default_instance_;
class TelemetryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Telemetry> _instance;
} _Telemetry_default_instance_;
class FcToBrakeNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FcToBrakeNode> _instance;
} _FcToBrakeNode_default_instance_;
class FcToLvdcNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FcToLvdcNode> _instance;
} _FcToLvdcNode_default_instance_;
class DtsNodeToFcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DtsNodeToFc> _instance;
} _DtsNodeToFc_default_instance_;
class EnclosureNodeToFcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnclosureNodeToFc> _instance;
} _EnclosureNodeToFc_default_instance_;
class LvdcNodeToFcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LvdcNodeToFc> _instance;
} _LvdcNodeToFc_default_instance_;
class BrakeNodeToFcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BrakeNodeToFc> _instance;
} _BrakeNodeToFc_default_instance_;
class flightConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<flightConfig> _instance;
} _flightConfig_default_instance_;
class DefaultFcToNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DefaultFcToNode> _instance;
} _DefaultFcToNode_default_instance_;
static void InitDefaultsPodCommand_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PodCommand_default_instance_;
    new (ptr) ::PodCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PodCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PodCommand_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPodCommand_Paradigm_2eproto}, {}};

static void InitDefaultsTelemetry_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Telemetry_default_instance_;
    new (ptr) ::Telemetry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Telemetry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Telemetry_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTelemetry_Paradigm_2eproto}, {}};

static void InitDefaultsFcToBrakeNode_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FcToBrakeNode_default_instance_;
    new (ptr) ::FcToBrakeNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FcToBrakeNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FcToBrakeNode_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFcToBrakeNode_Paradigm_2eproto}, {}};

static void InitDefaultsFcToLvdcNode_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FcToLvdcNode_default_instance_;
    new (ptr) ::FcToLvdcNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FcToLvdcNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FcToLvdcNode_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFcToLvdcNode_Paradigm_2eproto}, {}};

static void InitDefaultsDtsNodeToFc_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DtsNodeToFc_default_instance_;
    new (ptr) ::DtsNodeToFc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DtsNodeToFc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DtsNodeToFc_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDtsNodeToFc_Paradigm_2eproto}, {}};

static void InitDefaultsEnclosureNodeToFc_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnclosureNodeToFc_default_instance_;
    new (ptr) ::EnclosureNodeToFc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnclosureNodeToFc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EnclosureNodeToFc_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnclosureNodeToFc_Paradigm_2eproto}, {}};

static void InitDefaultsLvdcNodeToFc_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LvdcNodeToFc_default_instance_;
    new (ptr) ::LvdcNodeToFc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LvdcNodeToFc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LvdcNodeToFc_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLvdcNodeToFc_Paradigm_2eproto}, {}};

static void InitDefaultsBrakeNodeToFc_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BrakeNodeToFc_default_instance_;
    new (ptr) ::BrakeNodeToFc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrakeNodeToFc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BrakeNodeToFc_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrakeNodeToFc_Paradigm_2eproto}, {}};

static void InitDefaultsflightConfig_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.DefaultConstruct();
  *::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get_mutable() = ::std::string("192.168.1.100", 13);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get_mutable());
  {
    void* ptr = &::_flightConfig_default_instance_;
    new (ptr) ::flightConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flightConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_flightConfig_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsflightConfig_Paradigm_2eproto}, {}};

static void InitDefaultsDefaultFcToNode_Paradigm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DefaultFcToNode_default_instance_;
    new (ptr) ::DefaultFcToNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DefaultFcToNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DefaultFcToNode_Paradigm_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDefaultFcToNode_Paradigm_2eproto}, {}};

void InitDefaults_Paradigm_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PodCommand_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Telemetry_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FcToBrakeNode_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FcToLvdcNode_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DtsNodeToFc_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnclosureNodeToFc_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LvdcNodeToFc_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BrakeNodeToFc_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_flightConfig_Paradigm_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DefaultFcToNode_Paradigm_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Paradigm_2eproto[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_Paradigm_2eproto[7];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Paradigm_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Paradigm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PodCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PodCommand, hascommand_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, controlsinterfacestate_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, manualpodstate_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, manualbrakenodestate_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, manualmotorstate_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, manuallvdcnodestate_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, automaticstatetransitions_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, solenoidconfiguration_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, powerrailconfiguration_),
  PROTOBUF_FIELD_OFFSET(::PodCommand, sensoroverrideconfiguration_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Telemetry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Telemetry, podstate_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, breaknodestate_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, motorstate_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, controlsinterfacestate_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, inverterstate_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, lvdcnodestate_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, batterymanagementstate_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, breaknodeperceivedpodstate_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, missiontime_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, flighttime_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, heartbeatflags_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, heartbeatvalues_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, podposition_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, podvelocity_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, podaccelerationx_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, podaccelerationy_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, podaccelerationz_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, imuvelocity_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, imuaccelerationx_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, tachometervelocity_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, resolvervelocity_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, maxigbttemperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, gatedrivertemperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, invertercontrolboardtemperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, motortemperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, inverterbusvoltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, invertervoltages_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, invertercurrents_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, hvbatterypackvoltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, hvbatterypackcurrent_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, hvbatterycelltemperatures_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, hvbatterypackminimumcellvoltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, hvbatterypackmaxcellvoltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, solenoid1_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, solenoid2_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, solenoid3_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, solenoid4_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, highpressure_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, lowpressure1_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, lowpressure2_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, lowpressure3_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, lowpressure4_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, pressurevesseltemperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, electronicsenclosurepressure_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, raildisplacementx_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, raildisplacementy_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, tubepressure_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, coolantpressure1_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, coolantpressure2_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, coolantpressure3_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, coolanttemperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railtemperature_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, pack1voltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, pack2voltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, pack1current_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, pack2current_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, rail1voltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, rail2voltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, rail3voltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, rail4voltage_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railvoltageflag_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railcurrentsensor1_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railcurrentsensor2_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railcurrentsensor3_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railcurrentsensor4_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railcurrentsensor5_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railcurrentsensor6_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railcurrentsensor7_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railcurrentsensor8_),
  PROTOBUF_FIELD_OFFSET(::Telemetry, railcurrentflag_),
  0,
  1,
  2,
  3,
  4,
  48,
  23,
  28,
  5,
  6,
  ~0u,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  24,
  25,
  ~0u,
  26,
  27,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  65,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  66,
  PROTOBUF_FIELD_OFFSET(::FcToBrakeNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FcToBrakeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FcToBrakeNode, packetnum_),
  PROTOBUF_FIELD_OFFSET(::FcToBrakeNode, podstate_),
  PROTOBUF_FIELD_OFFSET(::FcToBrakeNode, manualnodestate_),
  PROTOBUF_FIELD_OFFSET(::FcToBrakeNode, solenoid1config_),
  PROTOBUF_FIELD_OFFSET(::FcToBrakeNode, solenoid2config_),
  PROTOBUF_FIELD_OFFSET(::FcToBrakeNode, solenoid3config_),
  PROTOBUF_FIELD_OFFSET(::FcToBrakeNode, solenoid4config_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::FcToLvdcNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FcToLvdcNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FcToLvdcNode, packetnum_),
  PROTOBUF_FIELD_OFFSET(::FcToLvdcNode, podstate_),
  PROTOBUF_FIELD_OFFSET(::FcToLvdcNode, manualnodestate_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, packetnum_),
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, brakenodestate_),
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, brakesolenoidstate_),
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, ventsolenoidstate_),
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, rotortemperature_),
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, pneumatictemperature_),
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, tankpressure_),
  PROTOBUF_FIELD_OFFSET(::DtsNodeToFc, brakepressure_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::EnclosureNodeToFc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EnclosureNodeToFc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnclosureNodeToFc, packetnum_),
  PROTOBUF_FIELD_OFFSET(::EnclosureNodeToFc, enclosurepressure_),
  PROTOBUF_FIELD_OFFSET(::EnclosureNodeToFc, enclosuretemperature_),
  PROTOBUF_FIELD_OFFSET(::EnclosureNodeToFc, coolantlinepressure_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, highpowerpackvoltage_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, lowpowerpackvoltage_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, highpowerpackcurrent_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, lowpowerpackcurrent_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, rail5voltage_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, rail12lowpowervoltage_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, rail12highpowervoltage_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, rail24voltage_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, rail5current_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, rail12lowpowercurrent_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, rail24current_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, railinvertercurrent_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, railcooling1current_),
  PROTOBUF_FIELD_OFFSET(::LvdcNodeToFc, railcooling2current_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, packetnum_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, state_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, solenoid1_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, solenoid2_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, solenoid3_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, solenoid4_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, highpressure_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, lowpressure1_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, lowpressure2_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, lowpressure3_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, lowpressurecommon_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, pneumatictemperature_),
  PROTOBUF_FIELD_OFFSET(::BrakeNodeToFc, coolanttankpressure_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::flightConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flightConfig, retrievaltimeout_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, maxflighttime_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, motorspeed_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, pdstelemetryport_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, commandport_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, flightlength_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, heartbeattimeout_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, poddriver_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, controllaptopipaddr_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, brakenodeport_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, brakenodetimeout_),
  PROTOBUF_FIELD_OFFSET(::flightConfig, brakenodeserverport_),
  5,
  2,
  3,
  7,
  8,
  4,
  6,
  0,
  1,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::DefaultFcToNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DefaultFcToNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DefaultFcToNode, podstate_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::PodCommand)},
  { 25, 100, sizeof(::Telemetry)},
  { 170, 182, sizeof(::FcToBrakeNode)},
  { 189, 197, sizeof(::FcToLvdcNode)},
  { 200, 213, sizeof(::DtsNodeToFc)},
  { 221, 230, sizeof(::EnclosureNodeToFc)},
  { 234, 253, sizeof(::LvdcNodeToFc)},
  { 267, 285, sizeof(::BrakeNodeToFc)},
  { 298, 315, sizeof(::flightConfig)},
  { 327, 333, sizeof(::DefaultFcToNode)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PodCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Telemetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FcToBrakeNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FcToLvdcNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DtsNodeToFc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EnclosureNodeToFc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LvdcNodeToFc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BrakeNodeToFc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_flightConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DefaultFcToNode_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Paradigm_2eproto = {
  {}, AddDescriptors_Paradigm_2eproto, "Paradigm.proto", schemas,
  file_default_instances, TableStruct_Paradigm_2eproto::offsets,
  file_level_metadata_Paradigm_2eproto, 10, file_level_enum_descriptors_Paradigm_2eproto, file_level_service_descriptors_Paradigm_2eproto,
};

const char descriptor_table_protodef_Paradigm_2eproto[] =
  "\n\016Paradigm.proto\"\222\003\n\nPodCommand\022\031\n\nhasCo"
  "mmand\030\007 \001(\010:\005false\0228\n\026controlsInterfaceS"
  "tate\030\001 \001(\0162\030.ControlsInterfaceStates\022\"\n\016"
  "manualPodState\030\002 \001(\0162\n.PodStates\022.\n\024manu"
  "alBrakeNodeState\030\003 \001(\0162\020.BrakeNodeStates"
  "\022&\n\020manualMotorState\030\004 \001(\0162\014.MotorStates"
  "\022,\n\023manualLvdcNodeState\030\005 \001(\0162\017.LvdcNode"
  "States\022!\n\031automaticStateTransitions\030\006 \001("
  "\010\022\035\n\025solenoidConfiguration\030\010 \003(\005\022\036\n\026powe"
  "rRailConfiguration\030\t \003(\005\022#\n\033sensorOverri"
  "deConfiguration\030\n \003(\005\"\257\017\n\tTelemetry\022\034\n\010p"
  "odState\030\001 \001(\0162\n.PodStates\022(\n\016breakNodeSt"
  "ate\030\002 \001(\0162\020.BrakeNodeStates\022 \n\nmotorStat"
  "e\030\003 \001(\0162\014.MotorStates\0228\n\026controlsInterfa"
  "ceState\030\004 \001(\0162\030.ControlsInterfaceStates\022"
  "&\n\rinverterState\030\005 \001(\0162\017.InverterStates\022"
  "&\n\rlvdcNodeState\0306 \001(\0162\017.LvdcNodeStates\022"
  "8\n\026batteryManagementState\030\031 \001(\0162\030.Batter"
  "yManagementStates\022.\n\032breakNodePerceivedP"
  "odState\030\037 \001(\0162\n.PodStates\022\023\n\013missionTime"
  "\030\006 \001(\005\022\022\n\nflightTime\030\007 \001(\005\022\026\n\016heartbeatF"
  "lags\030\010 \003(\005\022\027\n\017heartbeatValues\030G \003(\005\022\023\n\013p"
  "odPosition\030\t \001(\005\022\023\n\013podVelocity\030\n \001(\005\022\030\n"
  "\020podAccelerationX\030\013 \001(\005\022\030\n\020podAccelerati"
  "onY\030\014 \001(\005\022\030\n\020podAccelerationZ\030\r \001(\005\022\023\n\013i"
  "muVelocity\030\016 \001(\005\022\030\n\020imuAccelerationX\030\017 \001"
  "(\005\022\032\n\022tachometerVelocity\030\020 \001(\005\022\030\n\020resolv"
  "erVelocity\030\021 \001(\005\022\032\n\022maxIgbtTemperature\030\022"
  " \001(\005\022\035\n\025gateDriverTemperature\030\023 \001(\005\022\'\n\037i"
  "nverterControlBoardTemperature\030\024 \001(\005\022\030\n\020"
  "motorTemperature\030\025 \001(\005\022\032\n\022inverterBusVol"
  "tage\030\026 \001(\005\022\030\n\020inverterVoltages\030\027 \001(\005\022\030\n\020"
  "inverterCurrents\030\030 \001(\005\022\034\n\024hvBatteryPackV"
  "oltage\030\032 \001(\002\022\034\n\024hvBatteryPackCurrent\030\033 \001"
  "(\002\022!\n\031hvBatteryCellTemperatures\030\034 \003(\005\022\'\n"
  "\037hvBatteryPackMinimumCellVoltage\030\035 \001(\002\022#"
  "\n\033hvBatteryPackMaxCellVoltage\030\036 \001(\002\022\021\n\ts"
  "olenoid1\030  \001(\010\022\021\n\tsolenoid2\030! \001(\010\022\021\n\tsol"
  "enoid3\030\" \001(\010\022\021\n\tsolenoid4\030# \001(\010\022\024\n\014highP"
  "ressure\030& \001(\002\022\024\n\014lowPressure1\030\' \001(\002\022\024\n\014l"
  "owPressure2\030( \001(\002\022\024\n\014lowPressure3\030) \001(\002\022"
  "\024\n\014lowPressure4\030* \001(\002\022!\n\031pressureVesselT"
  "emperature\030+ \001(\002\022$\n\034electronicsEnclosure"
  "Pressure\030, \001(\005\022\031\n\021railDisplacementX\030- \001("
  "\005\022\031\n\021railDisplacementY\030. \001(\005\022\024\n\014tubePres"
  "sure\0300 \001(\005\022\030\n\020coolantPressure1\0301 \001(\005\022\030\n\020"
  "coolantPressure2\0302 \001(\005\022\030\n\020coolantPressur"
  "e3\0303 \001(\005\022\032\n\022coolantTemperature\0304 \001(\005\022\027\n\017"
  "railTemperature\0305 \001(\002\022\024\n\014pack1Voltage\0307 "
  "\001(\005\022\024\n\014pack2Voltage\0308 \001(\005\022\024\n\014pack1Curren"
  "t\0309 \001(\005\022\024\n\014pack2Current\030: \001(\005\022\024\n\014rail1Vo"
  "ltage\030; \001(\005\022\024\n\014rail2Voltage\030< \001(\005\022\024\n\014rai"
  "l3Voltage\030= \001(\005\022\024\n\014rail4Voltage\030> \001(\005\022\027\n"
  "\017railVoltageFlag\030H \001(\005\022\032\n\022railCurrentSen"
  "sor1\030\? \001(\005\022\032\n\022railCurrentSensor2\030@ \001(\005\022\032"
  "\n\022railCurrentSensor3\030A \001(\005\022\032\n\022railCurren"
  "tSensor4\030B \001(\005\022\032\n\022railCurrentSensor5\030C \001"
  "(\005\022\032\n\022railCurrentSensor6\030D \001(\005\022\032\n\022railCu"
  "rrentSensor7\030E \001(\005\022\032\n\022railCurrentSensor8"
  "\030F \001(\005\022\027\n\017railCurrentFlag\030I \001(\005\"\317\001\n\rFcTo"
  "BrakeNode\022\021\n\tpacketNum\030\001 \001(\005\022\034\n\010podState"
  "\030\002 \001(\0162\n.PodStates\022)\n\017manualNodeState\030\003 "
  "\001(\0162\020.BrakeNodeStates\022\027\n\017solenoid1Config"
  "\030\004 \001(\010\022\027\n\017solenoid2Config\030\005 \001(\010\022\027\n\017solen"
  "oid3Config\030\006 \001(\010\022\027\n\017solenoid4Config\030\007 \001("
  "\010\"i\n\014FcToLvdcNode\022\021\n\tpacketNum\030\001 \001(\005\022\034\n\010"
  "podState\030\002 \001(\0162\n.PodStates\022(\n\017manualNode"
  "State\030\003 \001(\0162\017.LvdcNodeStates\"\346\001\n\013DtsNode"
  "ToFc\022\021\n\tpacketNum\030\001 \002(\005\022(\n\016brakeNodeStat"
  "e\030\002 \002(\0162\020.BrakeNodeStates\022\032\n\022brakeSoleno"
  "idState\030\003 \002(\010\022\031\n\021ventSolenoidState\030\004 \002(\010"
  "\022\030\n\020rotorTemperature\030\005 \002(\002\022\034\n\024pneumaticT"
  "emperature\030\006 \002(\002\022\024\n\014tankPressure\030\007 \002(\002\022\025"
  "\n\rbrakePressure\030\010 \002(\002\"|\n\021EnclosureNodeTo"
  "Fc\022\021\n\tpacketNum\030\001 \002(\005\022\031\n\021enclosurePressu"
  "re\030\002 \002(\002\022\034\n\024enclosureTemperature\030\003 \002(\002\022\033"
  "\n\023coolantLinePressure\030\004 \002(\002\"\223\003\n\014LvdcNode"
  "ToFc\022\034\n\024highPowerPackVoltage\030\001 \002(\002\022\033\n\023lo"
  "wPowerPackVoltage\030\002 \002(\002\022\034\n\024highPowerPack"
  "Current\030\003 \002(\002\022\033\n\023lowPowerPackCurrent\030\004 \002"
  "(\002\022\024\n\014rail5Voltage\030\005 \002(\002\022\035\n\025rail12LowPow"
  "erVoltage\030\006 \002(\002\022\036\n\026rail12HighPowerVoltag"
  "e\030\007 \002(\002\022\025\n\rrail24Voltage\030\010 \002(\002\022\024\n\014rail5C"
  "urrent\030\t \002(\002\022\035\n\025rail12LowPowerCurrent\030\n "
  "\002(\002\022\025\n\rrail24Current\030\013 \002(\002\022\033\n\023railInvert"
  "erCurrent\030\014 \002(\002\022\033\n\023railCooling1Current\030\r"
  " \002(\002\022\033\n\023railCooling2Current\030\016 \002(\002\"\275\002\n\rBr"
  "akeNodeToFc\022\021\n\tpacketNum\030\001 \002(\005\022\037\n\005state\030"
  "\002 \002(\0162\020.BrakeNodeStates\022\021\n\tsolenoid1\030\003 \002"
  "(\010\022\021\n\tsolenoid2\030\004 \002(\010\022\021\n\tsolenoid3\030\005 \002(\010"
  "\022\021\n\tsolenoid4\030\006 \002(\010\022\024\n\014highPressure\030\007 \002("
  "\002\022\024\n\014lowPressure1\030\010 \002(\002\022\024\n\014lowPressure2\030"
  "\t \002(\002\022\024\n\014lowPressure3\030\n \002(\002\022\031\n\021lowPressu"
  "reCommon\030\013 \002(\002\022\034\n\024pneumaticTemperature\030\014"
  " \002(\002\022\033\n\023coolantTankPressure\030\r \002(\002\"\344\002\n\014fl"
  "ightConfig\022\030\n\020retrievalTimeout\030\001 \001(\r\022\025\n\r"
  "maxFlightTime\030\002 \001(\004\022\022\n\nmotorSpeed\030\003 \001(\004\022"
  "\036\n\020pdsTelemetryPort\030\004 \001(\005:\0047000\022\031\n\013comma"
  "ndPort\030\005 \001(\005:\0046000\022\024\n\014flightLength\030\006 \001(\004"
  "\022\037\n\020heartbeatTimeout\030\007 \001(\005:\00510000\022\021\n\tpod"
  "Driver\030\010 \001(\t\022*\n\023controlLaptopIpAddr\030\t \001("
  "\t:\r192.168.1.100\022\033\n\rbrakeNodePort\030\n \001(\004:"
  "\0045555\022\036\n\020brakeNodeTimeout\030\013 \001(\004:\0044000\022!\n"
  "\023brakeNodeServerPort\030\014 \001(\004:\0045555\"/\n\017Defa"
  "ultFcToNode\022\034\n\010podState\030\001 \001(\0162\n.PodState"
  "s*u\n\017BrakeNodeStates\022\016\n\nbnsBooting\020\000\022\016\n\n"
  "bnsStandby\020\001\022\r\n\tbnsFlight\020\002\022\016\n\nbnsBrakin"
  "g\020\003\022\026\n\022bnsSolenoidControl\020\004\022\013\n\007bnsNone\020\005"
  "*\244\001\n\tPodStates\022\r\n\tpsBooting\020\000\022\r\n\tpsStand"
  "by\020\001\022\014\n\010psArming\020\002\022\013\n\007psArmed\020\003\022\017\n\013psPre"
  "Flight\020\004\022\022\n\016psAcceleration\020\005\022\016\n\npsCoasti"
  "ng\020\006\022\r\n\tpsBraking\020\007\022\016\n\npsShutdown\020\010\022\n\n\006p"
  "sNone\020\t*C\n\013MotorStates\022\t\n\005msOff\020\000\022\016\n\nmsC"
  "harging\020\001\022\n\n\006msIdle\020\002\022\r\n\tmsEngaged\020\003*p\n\027"
  "ControlsInterfaceStates\022\r\n\tciStandby\020\000\022\t"
  "\n\005ciArm\020\001\022\014\n\010ciFlight\020\002\022\014\n\010ciDisarm\020\003\022\n\n"
  "\006ciTaxi\020\004\022\023\n\017ciEmergencyStop\020\005* \n\016Invert"
  "erStates\022\016\n\niConnected\020\000*)\n\027BatteryManag"
  "ementStates\022\016\n\nbmsNominal\020\000*P\n\016LvdcNodeS"
  "tates\022\017\n\013lvdcBooting\020\000\022\017\n\013lvdcStandby\020\001\022"
  "\016\n\nlvdcFlight\020\002\022\014\n\010lvdcNone\020\003"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Paradigm_2eproto = {
  false, InitDefaults_Paradigm_2eproto, 
  descriptor_table_protodef_Paradigm_2eproto,
  "Paradigm.proto", &assign_descriptors_table_Paradigm_2eproto, 4829,
};

void AddDescriptors_Paradigm_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Paradigm_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Paradigm_2eproto = []() { AddDescriptors_Paradigm_2eproto(); return true; }();
const ::google::protobuf::EnumDescriptor* BrakeNodeStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[0];
}
bool BrakeNodeStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PodStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[1];
}
bool PodStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotorStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[2];
}
bool MotorStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlsInterfaceStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[3];
}
bool ControlsInterfaceStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InverterStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[4];
}
bool InverterStates_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BatteryManagementStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[5];
}
bool BatteryManagementStates_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LvdcNodeStates_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Paradigm_2eproto);
  return file_level_enum_descriptors_Paradigm_2eproto[6];
}
bool LvdcNodeStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PodCommand::InitAsDefaultInstance() {
}
class PodCommand::HasBitSetters {
 public:
  static void set_has_hascommand(PodCommand* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_controlsinterfacestate(PodCommand* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_manualpodstate(PodCommand* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_manualbrakenodestate(PodCommand* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_manualmotorstate(PodCommand* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_manuallvdcnodestate(PodCommand* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_automaticstatetransitions(PodCommand* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PodCommand::kHasCommandFieldNumber;
const int PodCommand::kControlsInterfaceStateFieldNumber;
const int PodCommand::kManualPodStateFieldNumber;
const int PodCommand::kManualBrakeNodeStateFieldNumber;
const int PodCommand::kManualMotorStateFieldNumber;
const int PodCommand::kManualLvdcNodeStateFieldNumber;
const int PodCommand::kAutomaticStateTransitionsFieldNumber;
const int PodCommand::kSolenoidConfigurationFieldNumber;
const int PodCommand::kPowerRailConfigurationFieldNumber;
const int PodCommand::kSensorOverrideConfigurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PodCommand::PodCommand()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PodCommand)
}
PodCommand::PodCommand(const PodCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      solenoidconfiguration_(from.solenoidconfiguration_),
      powerrailconfiguration_(from.powerrailconfiguration_),
      sensoroverrideconfiguration_(from.sensoroverrideconfiguration_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controlsinterfacestate_, &from.controlsinterfacestate_,
    static_cast<size_t>(reinterpret_cast<char*>(&automaticstatetransitions_) -
    reinterpret_cast<char*>(&controlsinterfacestate_)) + sizeof(automaticstatetransitions_));
  // @@protoc_insertion_point(copy_constructor:PodCommand)
}

void PodCommand::SharedCtor() {
  ::memset(&controlsinterfacestate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&automaticstatetransitions_) -
      reinterpret_cast<char*>(&controlsinterfacestate_)) + sizeof(automaticstatetransitions_));
}

PodCommand::~PodCommand() {
  // @@protoc_insertion_point(destructor:PodCommand)
  SharedDtor();
}

void PodCommand::SharedDtor() {
}

void PodCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PodCommand& PodCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PodCommand_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void PodCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:PodCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  solenoidconfiguration_.Clear();
  powerrailconfiguration_.Clear();
  sensoroverrideconfiguration_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&controlsinterfacestate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&automaticstatetransitions_) -
        reinterpret_cast<char*>(&controlsinterfacestate_)) + sizeof(automaticstatetransitions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PodCommand::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PodCommand*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .ControlsInterfaceStates controlsInterfaceState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ControlsInterfaceStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_controlsinterfacestate(static_cast<::ControlsInterfaceStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .PodStates manualPodState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PodStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manualpodstate(static_cast<::PodStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .BrakeNodeStates manualBrakeNodeState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::BrakeNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manualbrakenodestate(static_cast<::BrakeNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .MotorStates manualMotorState = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::MotorStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manualmotorstate(static_cast<::MotorStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .LvdcNodeStates manualLvdcNodeState = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::LvdcNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manuallvdcnodestate(static_cast<::LvdcNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool automaticStateTransitions = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_automaticstatetransitions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool hasCommand = 7 [default = false];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_hascommand(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 solenoidConfiguration = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            msg->add_solenoidconfiguration(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_solenoidconfiguration();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated int32 powerRailConfiguration = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 72) {
          do {
            msg->add_powerrailconfiguration(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_powerrailconfiguration();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated int32 sensorOverrideConfiguration = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 80) {
          do {
            msg->add_sensoroverrideconfiguration(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 80 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_sensoroverrideconfiguration();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PodCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PodCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ControlsInterfaceStates controlsInterfaceState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControlsInterfaceStates_IsValid(value)) {
            set_controlsinterfacestate(static_cast< ::ControlsInterfaceStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PodStates manualPodState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_manualpodstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BrakeNodeStates manualBrakeNodeState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BrakeNodeStates_IsValid(value)) {
            set_manualbrakenodestate(static_cast< ::BrakeNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MotorStates manualMotorState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MotorStates_IsValid(value)) {
            set_manualmotorstate(static_cast< ::MotorStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .LvdcNodeStates manualLvdcNodeState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LvdcNodeStates_IsValid(value)) {
            set_manuallvdcnodestate(static_cast< ::LvdcNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool automaticStateTransitions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_automaticstatetransitions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automaticstatetransitions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hasCommand = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_hascommand(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hascommand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 solenoidConfiguration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_solenoidconfiguration())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_solenoidconfiguration())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 powerRailConfiguration = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72u, input, this->mutable_powerrailconfiguration())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_powerrailconfiguration())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 sensorOverrideConfiguration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80u, input, this->mutable_sensoroverrideconfiguration())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sensoroverrideconfiguration())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PodCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PodCommand)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PodCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PodCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ControlsInterfaceStates controlsInterfaceState = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->controlsinterfacestate(), output);
  }

  // optional .PodStates manualPodState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->manualpodstate(), output);
  }

  // optional .BrakeNodeStates manualBrakeNodeState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->manualbrakenodestate(), output);
  }

  // optional .MotorStates manualMotorState = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->manualmotorstate(), output);
  }

  // optional .LvdcNodeStates manualLvdcNodeState = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->manuallvdcnodestate(), output);
  }

  // optional bool automaticStateTransitions = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->automaticstatetransitions(), output);
  }

  // optional bool hasCommand = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hascommand(), output);
  }

  // repeated int32 solenoidConfiguration = 8;
  for (int i = 0, n = this->solenoidconfiguration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->solenoidconfiguration(i), output);
  }

  // repeated int32 powerRailConfiguration = 9;
  for (int i = 0, n = this->powerrailconfiguration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->powerrailconfiguration(i), output);
  }

  // repeated int32 sensorOverrideConfiguration = 10;
  for (int i = 0, n = this->sensoroverrideconfiguration_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->sensoroverrideconfiguration(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PodCommand)
}

::google::protobuf::uint8* PodCommand::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PodCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ControlsInterfaceStates controlsInterfaceState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->controlsinterfacestate(), target);
  }

  // optional .PodStates manualPodState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->manualpodstate(), target);
  }

  // optional .BrakeNodeStates manualBrakeNodeState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->manualbrakenodestate(), target);
  }

  // optional .MotorStates manualMotorState = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->manualmotorstate(), target);
  }

  // optional .LvdcNodeStates manualLvdcNodeState = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->manuallvdcnodestate(), target);
  }

  // optional bool automaticStateTransitions = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->automaticstatetransitions(), target);
  }

  // optional bool hasCommand = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hascommand(), target);
  }

  // repeated int32 solenoidConfiguration = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->solenoidconfiguration_, target);

  // repeated int32 powerRailConfiguration = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(9, this->powerrailconfiguration_, target);

  // repeated int32 sensorOverrideConfiguration = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(10, this->sensoroverrideconfiguration_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PodCommand)
  return target;
}

size_t PodCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PodCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 solenoidConfiguration = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->solenoidconfiguration_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->solenoidconfiguration_size());
    total_size += data_size;
  }

  // repeated int32 powerRailConfiguration = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->powerrailconfiguration_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->powerrailconfiguration_size());
    total_size += data_size;
  }

  // repeated int32 sensorOverrideConfiguration = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->sensoroverrideconfiguration_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sensoroverrideconfiguration_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .ControlsInterfaceStates controlsInterfaceState = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->controlsinterfacestate());
    }

    // optional .PodStates manualPodState = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualpodstate());
    }

    // optional .BrakeNodeStates manualBrakeNodeState = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualbrakenodestate());
    }

    // optional .MotorStates manualMotorState = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualmotorstate());
    }

    // optional .LvdcNodeStates manualLvdcNodeState = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manuallvdcnodestate());
    }

    // optional bool hasCommand = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool automaticStateTransitions = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PodCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PodCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PodCommand* source =
      ::google::protobuf::DynamicCastToGenerated<PodCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PodCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PodCommand)
    MergeFrom(*source);
  }
}

void PodCommand::MergeFrom(const PodCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PodCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  solenoidconfiguration_.MergeFrom(from.solenoidconfiguration_);
  powerrailconfiguration_.MergeFrom(from.powerrailconfiguration_);
  sensoroverrideconfiguration_.MergeFrom(from.sensoroverrideconfiguration_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      controlsinterfacestate_ = from.controlsinterfacestate_;
    }
    if (cached_has_bits & 0x00000002u) {
      manualpodstate_ = from.manualpodstate_;
    }
    if (cached_has_bits & 0x00000004u) {
      manualbrakenodestate_ = from.manualbrakenodestate_;
    }
    if (cached_has_bits & 0x00000008u) {
      manualmotorstate_ = from.manualmotorstate_;
    }
    if (cached_has_bits & 0x00000010u) {
      manuallvdcnodestate_ = from.manuallvdcnodestate_;
    }
    if (cached_has_bits & 0x00000020u) {
      hascommand_ = from.hascommand_;
    }
    if (cached_has_bits & 0x00000040u) {
      automaticstatetransitions_ = from.automaticstatetransitions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PodCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PodCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodCommand::CopyFrom(const PodCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PodCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodCommand::IsInitialized() const {
  return true;
}

void PodCommand::Swap(PodCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PodCommand::InternalSwap(PodCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  solenoidconfiguration_.InternalSwap(&other->solenoidconfiguration_);
  powerrailconfiguration_.InternalSwap(&other->powerrailconfiguration_);
  sensoroverrideconfiguration_.InternalSwap(&other->sensoroverrideconfiguration_);
  swap(controlsinterfacestate_, other->controlsinterfacestate_);
  swap(manualpodstate_, other->manualpodstate_);
  swap(manualbrakenodestate_, other->manualbrakenodestate_);
  swap(manualmotorstate_, other->manualmotorstate_);
  swap(manuallvdcnodestate_, other->manuallvdcnodestate_);
  swap(hascommand_, other->hascommand_);
  swap(automaticstatetransitions_, other->automaticstatetransitions_);
}

::google::protobuf::Metadata PodCommand::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Telemetry::InitAsDefaultInstance() {
}
class Telemetry::HasBitSetters {
 public:
  static void set_has_podstate(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_breaknodestate(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_motorstate(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_controlsinterfacestate(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_inverterstate(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_lvdcnodestate(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00010000u;
  }
  static void set_has_batterymanagementstate(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_breaknodeperceivedpodstate(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_missiontime(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_flighttime(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_podposition(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_podvelocity(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_podaccelerationx(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_podaccelerationy(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_podaccelerationz(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_imuvelocity(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_imuaccelerationx(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_tachometervelocity(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_resolvervelocity(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_maxigbttemperature(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_gatedrivertemperature(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_invertercontrolboardtemperature(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_motortemperature(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_inverterbusvoltage(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_invertervoltages(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_invertercurrents(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_hvbatterypackvoltage(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_hvbatterypackcurrent(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_hvbatterypackminimumcellvoltage(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_hvbatterypackmaxcellvoltage(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_solenoid1(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_solenoid2(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_solenoid3(Telemetry* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_solenoid4(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static void set_has_highpressure(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static void set_has_lowpressure1(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static void set_has_lowpressure2(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static void set_has_lowpressure3(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static void set_has_lowpressure4(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static void set_has_pressurevesseltemperature(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static void set_has_electronicsenclosurepressure(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static void set_has_raildisplacementx(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static void set_has_raildisplacementy(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static void set_has_tubepressure(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static void set_has_coolantpressure1(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static void set_has_coolantpressure2(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00001000u;
  }
  static void set_has_coolantpressure3(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00002000u;
  }
  static void set_has_coolanttemperature(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00004000u;
  }
  static void set_has_railtemperature(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00008000u;
  }
  static void set_has_pack1voltage(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00020000u;
  }
  static void set_has_pack2voltage(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00040000u;
  }
  static void set_has_pack1current(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00080000u;
  }
  static void set_has_pack2current(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00100000u;
  }
  static void set_has_rail1voltage(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00200000u;
  }
  static void set_has_rail2voltage(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00400000u;
  }
  static void set_has_rail3voltage(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x00800000u;
  }
  static void set_has_rail4voltage(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x01000000u;
  }
  static void set_has_railvoltageflag(Telemetry* msg) {
    msg->_has_bits_[2] |= 0x00000002u;
  }
  static void set_has_railcurrentsensor1(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x02000000u;
  }
  static void set_has_railcurrentsensor2(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x04000000u;
  }
  static void set_has_railcurrentsensor3(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x08000000u;
  }
  static void set_has_railcurrentsensor4(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x10000000u;
  }
  static void set_has_railcurrentsensor5(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x20000000u;
  }
  static void set_has_railcurrentsensor6(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x40000000u;
  }
  static void set_has_railcurrentsensor7(Telemetry* msg) {
    msg->_has_bits_[1] |= 0x80000000u;
  }
  static void set_has_railcurrentsensor8(Telemetry* msg) {
    msg->_has_bits_[2] |= 0x00000001u;
  }
  static void set_has_railcurrentflag(Telemetry* msg) {
    msg->_has_bits_[2] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Telemetry::kPodStateFieldNumber;
const int Telemetry::kBreakNodeStateFieldNumber;
const int Telemetry::kMotorStateFieldNumber;
const int Telemetry::kControlsInterfaceStateFieldNumber;
const int Telemetry::kInverterStateFieldNumber;
const int Telemetry::kLvdcNodeStateFieldNumber;
const int Telemetry::kBatteryManagementStateFieldNumber;
const int Telemetry::kBreakNodePerceivedPodStateFieldNumber;
const int Telemetry::kMissionTimeFieldNumber;
const int Telemetry::kFlightTimeFieldNumber;
const int Telemetry::kHeartbeatFlagsFieldNumber;
const int Telemetry::kHeartbeatValuesFieldNumber;
const int Telemetry::kPodPositionFieldNumber;
const int Telemetry::kPodVelocityFieldNumber;
const int Telemetry::kPodAccelerationXFieldNumber;
const int Telemetry::kPodAccelerationYFieldNumber;
const int Telemetry::kPodAccelerationZFieldNumber;
const int Telemetry::kImuVelocityFieldNumber;
const int Telemetry::kImuAccelerationXFieldNumber;
const int Telemetry::kTachometerVelocityFieldNumber;
const int Telemetry::kResolverVelocityFieldNumber;
const int Telemetry::kMaxIgbtTemperatureFieldNumber;
const int Telemetry::kGateDriverTemperatureFieldNumber;
const int Telemetry::kInverterControlBoardTemperatureFieldNumber;
const int Telemetry::kMotorTemperatureFieldNumber;
const int Telemetry::kInverterBusVoltageFieldNumber;
const int Telemetry::kInverterVoltagesFieldNumber;
const int Telemetry::kInverterCurrentsFieldNumber;
const int Telemetry::kHvBatteryPackVoltageFieldNumber;
const int Telemetry::kHvBatteryPackCurrentFieldNumber;
const int Telemetry::kHvBatteryCellTemperaturesFieldNumber;
const int Telemetry::kHvBatteryPackMinimumCellVoltageFieldNumber;
const int Telemetry::kHvBatteryPackMaxCellVoltageFieldNumber;
const int Telemetry::kSolenoid1FieldNumber;
const int Telemetry::kSolenoid2FieldNumber;
const int Telemetry::kSolenoid3FieldNumber;
const int Telemetry::kSolenoid4FieldNumber;
const int Telemetry::kHighPressureFieldNumber;
const int Telemetry::kLowPressure1FieldNumber;
const int Telemetry::kLowPressure2FieldNumber;
const int Telemetry::kLowPressure3FieldNumber;
const int Telemetry::kLowPressure4FieldNumber;
const int Telemetry::kPressureVesselTemperatureFieldNumber;
const int Telemetry::kElectronicsEnclosurePressureFieldNumber;
const int Telemetry::kRailDisplacementXFieldNumber;
const int Telemetry::kRailDisplacementYFieldNumber;
const int Telemetry::kTubePressureFieldNumber;
const int Telemetry::kCoolantPressure1FieldNumber;
const int Telemetry::kCoolantPressure2FieldNumber;
const int Telemetry::kCoolantPressure3FieldNumber;
const int Telemetry::kCoolantTemperatureFieldNumber;
const int Telemetry::kRailTemperatureFieldNumber;
const int Telemetry::kPack1VoltageFieldNumber;
const int Telemetry::kPack2VoltageFieldNumber;
const int Telemetry::kPack1CurrentFieldNumber;
const int Telemetry::kPack2CurrentFieldNumber;
const int Telemetry::kRail1VoltageFieldNumber;
const int Telemetry::kRail2VoltageFieldNumber;
const int Telemetry::kRail3VoltageFieldNumber;
const int Telemetry::kRail4VoltageFieldNumber;
const int Telemetry::kRailVoltageFlagFieldNumber;
const int Telemetry::kRailCurrentSensor1FieldNumber;
const int Telemetry::kRailCurrentSensor2FieldNumber;
const int Telemetry::kRailCurrentSensor3FieldNumber;
const int Telemetry::kRailCurrentSensor4FieldNumber;
const int Telemetry::kRailCurrentSensor5FieldNumber;
const int Telemetry::kRailCurrentSensor6FieldNumber;
const int Telemetry::kRailCurrentSensor7FieldNumber;
const int Telemetry::kRailCurrentSensor8FieldNumber;
const int Telemetry::kRailCurrentFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Telemetry::Telemetry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Telemetry)
}
Telemetry::Telemetry(const Telemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      heartbeatflags_(from.heartbeatflags_),
      hvbatterycelltemperatures_(from.hvbatterycelltemperatures_),
      heartbeatvalues_(from.heartbeatvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&podstate_, &from.podstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&railcurrentflag_) -
    reinterpret_cast<char*>(&podstate_)) + sizeof(railcurrentflag_));
  // @@protoc_insertion_point(copy_constructor:Telemetry)
}

void Telemetry::SharedCtor() {
  ::memset(&podstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&railcurrentflag_) -
      reinterpret_cast<char*>(&podstate_)) + sizeof(railcurrentflag_));
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:Telemetry)
  SharedDtor();
}

void Telemetry::SharedDtor() {
}

void Telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Telemetry& Telemetry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Telemetry_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heartbeatflags_.Clear();
  hvbatterycelltemperatures_.Clear();
  heartbeatvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&podstate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&podposition_) -
        reinterpret_cast<char*>(&podstate_)) + sizeof(podposition_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&podvelocity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resolvervelocity_) -
        reinterpret_cast<char*>(&podvelocity_)) + sizeof(resolvervelocity_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&maxigbttemperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batterymanagementstate_) -
        reinterpret_cast<char*>(&maxigbttemperature_)) + sizeof(batterymanagementstate_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&hvbatterypackvoltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solenoid3_) -
        reinterpret_cast<char*>(&hvbatterypackvoltage_)) + sizeof(solenoid3_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&solenoid4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&electronicsenclosurepressure_) -
        reinterpret_cast<char*>(&solenoid4_)) + sizeof(electronicsenclosurepressure_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&raildisplacementx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&railtemperature_) -
        reinterpret_cast<char*>(&raildisplacementx_)) + sizeof(railtemperature_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&lvdcnodestate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rail3voltage_) -
        reinterpret_cast<char*>(&lvdcnodestate_)) + sizeof(rail3voltage_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&rail4voltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&railcurrentsensor7_) -
        reinterpret_cast<char*>(&rail4voltage_)) + sizeof(railcurrentsensor7_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&railcurrentsensor8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&railcurrentflag_) -
        reinterpret_cast<char*>(&railcurrentsensor8_)) + sizeof(railcurrentflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Telemetry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Telemetry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .PodStates podState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PodStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_podstate(static_cast<::PodStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .BrakeNodeStates breakNodeState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::BrakeNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_breaknodestate(static_cast<::BrakeNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .MotorStates motorState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::MotorStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_motorstate(static_cast<::MotorStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ControlsInterfaceStates controlsInterfaceState = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ControlsInterfaceStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_controlsinterfacestate(static_cast<::ControlsInterfaceStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .InverterStates inverterState = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::InverterStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_inverterstate(static_cast<::InverterStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 missionTime = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_missiontime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 flightTime = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_flighttime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 heartbeatFlags = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 64) {
          do {
            msg->add_heartbeatflags(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_heartbeatflags();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 podPosition = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_podposition(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 podVelocity = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_podvelocity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 podAccelerationX = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_podaccelerationx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 podAccelerationY = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_podaccelerationy(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 podAccelerationZ = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_podaccelerationz(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 imuVelocity = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_imuvelocity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 imuAccelerationX = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_imuaccelerationx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 tachometerVelocity = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_tachometervelocity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 resolverVelocity = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_resolvervelocity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 maxIgbtTemperature = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_maxigbttemperature(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 gateDriverTemperature = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_gatedrivertemperature(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 inverterControlBoardTemperature = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_invertercontrolboardtemperature(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 motorTemperature = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_motortemperature(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 inverterBusVoltage = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_inverterbusvoltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 inverterVoltages = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_invertervoltages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 inverterCurrents = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_invertercurrents(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .BatteryManagementStates batteryManagementState = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::BatteryManagementStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(25, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_batterymanagementstate(static_cast<::BatteryManagementStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float hvBatteryPackVoltage = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 213) goto handle_unusual;
        msg->set_hvbatterypackvoltage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float hvBatteryPackCurrent = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 221) goto handle_unusual;
        msg->set_hvbatterypackcurrent(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // repeated int32 hvBatteryCellTemperatures = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) == 224) {
          do {
            msg->add_hvbatterycelltemperatures(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 480 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_hvbatterycelltemperatures();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional float hvBatteryPackMinimumCellVoltage = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 237) goto handle_unusual;
        msg->set_hvbatterypackminimumcellvoltage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float hvBatteryPackMaxCellVoltage = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 245) goto handle_unusual;
        msg->set_hvbatterypackmaxcellvoltage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional .PodStates breakNodePerceivedPodState = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PodStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(31, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_breaknodeperceivedpodstate(static_cast<::PodStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solenoid1 = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_solenoid1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solenoid2 = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_solenoid2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solenoid3 = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_solenoid3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solenoid4 = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_solenoid4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float highPressure = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_highpressure(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float lowPressure1 = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_lowpressure1(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float lowPressure2 = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_lowpressure2(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float lowPressure3 = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_lowpressure3(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float lowPressure4 = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_lowpressure4(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float pressureVesselTemperature = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_pressurevesseltemperature(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int32 electronicsEnclosurePressure = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_electronicsenclosurepressure(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railDisplacementX = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_raildisplacementx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railDisplacementY = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_raildisplacementy(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 tubePressure = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_tubepressure(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 coolantPressure1 = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_coolantpressure1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 coolantPressure2 = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_coolantpressure2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 coolantPressure3 = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_coolantpressure3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 coolantTemperature = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_coolanttemperature(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float railTemperature = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 173) goto handle_unusual;
        msg->set_railtemperature(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional .LvdcNodeStates lvdcNodeState = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::LvdcNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(54, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_lvdcnodestate(static_cast<::LvdcNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pack1Voltage = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_pack1voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pack2Voltage = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_pack2voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pack1Current = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_pack1current(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pack2Current = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_pack2current(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 rail1Voltage = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_rail1voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 rail2Voltage = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_rail2voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 rail3Voltage = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_rail3voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 rail4Voltage = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_rail4voltage(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor1 = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_railcurrentsensor1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor2 = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_railcurrentsensor2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor3 = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_railcurrentsensor3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor4 = 66;
      case 66: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_railcurrentsensor4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor5 = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_railcurrentsensor5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor6 = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_railcurrentsensor6(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor7 = 69;
      case 69: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_railcurrentsensor7(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentSensor8 = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_railcurrentsensor8(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 heartbeatValues = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) == 56) {
          do {
            msg->add_heartbeatvalues(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 1208 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_heartbeatvalues();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional int32 railVoltageFlag = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_railvoltageflag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 railCurrentFlag = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_railcurrentflag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Telemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Telemetry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PodStates podState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_podstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BrakeNodeStates breakNodeState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BrakeNodeStates_IsValid(value)) {
            set_breaknodestate(static_cast< ::BrakeNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MotorStates motorState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MotorStates_IsValid(value)) {
            set_motorstate(static_cast< ::MotorStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ControlsInterfaceStates controlsInterfaceState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ControlsInterfaceStates_IsValid(value)) {
            set_controlsinterfacestate(static_cast< ::ControlsInterfaceStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .InverterStates inverterState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::InverterStates_IsValid(value)) {
            set_inverterstate(static_cast< ::InverterStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 missionTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_missiontime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missiontime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flightTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_flighttime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flighttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 heartbeatFlags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_heartbeatflags())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_heartbeatflags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podPosition = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_podposition(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podVelocity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_podvelocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podAccelerationX = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_podaccelerationx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podaccelerationx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podAccelerationY = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_podaccelerationy(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podaccelerationy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 podAccelerationZ = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_podaccelerationz(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &podaccelerationz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imuVelocity = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_imuvelocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imuvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 imuAccelerationX = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_imuaccelerationx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imuaccelerationx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tachometerVelocity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_tachometervelocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tachometervelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 resolverVelocity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_resolvervelocity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolvervelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxIgbtTemperature = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_maxigbttemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxigbttemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gateDriverTemperature = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_gatedrivertemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatedrivertemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterControlBoardTemperature = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_invertercontrolboardtemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertercontrolboardtemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 motorTemperature = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_motortemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motortemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterBusVoltage = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_inverterbusvoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inverterbusvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterVoltages = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_invertervoltages(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertervoltages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inverterCurrents = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_invertercurrents(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invertercurrents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BatteryManagementStates batteryManagementState = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BatteryManagementStates_IsValid(value)) {
            set_batterymanagementstate(static_cast< ::BatteryManagementStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                25, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hvBatteryPackVoltage = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (213 & 0xFF)) {
          HasBitSetters::set_has_hvbatterypackvoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hvbatterypackvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hvBatteryPackCurrent = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (221 & 0xFF)) {
          HasBitSetters::set_has_hvbatterypackcurrent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hvbatterypackcurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 hvBatteryCellTemperatures = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224u, input, this->mutable_hvbatterycelltemperatures())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (226 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hvbatterycelltemperatures())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hvBatteryPackMinimumCellVoltage = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (237 & 0xFF)) {
          HasBitSetters::set_has_hvbatterypackminimumcellvoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hvbatterypackminimumcellvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hvBatteryPackMaxCellVoltage = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (245 & 0xFF)) {
          HasBitSetters::set_has_hvbatterypackmaxcellvoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hvbatterypackmaxcellvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PodStates breakNodePerceivedPodState = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_breaknodeperceivedpodstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                31, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solenoid1 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_solenoid1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solenoid2 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_solenoid2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solenoid3 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_solenoid3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solenoid4 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {
          HasBitSetters::set_has_solenoid4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float highPressure = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (309 & 0xFF)) {
          HasBitSetters::set_has_highpressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &highpressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lowPressure1 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (317 & 0xFF)) {
          HasBitSetters::set_has_lowpressure1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpressure1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lowPressure2 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (325 & 0xFF)) {
          HasBitSetters::set_has_lowpressure2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpressure2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lowPressure3 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (333 & 0xFF)) {
          HasBitSetters::set_has_lowpressure3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpressure3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lowPressure4 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (341 & 0xFF)) {
          HasBitSetters::set_has_lowpressure4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpressure4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pressureVesselTemperature = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (349 & 0xFF)) {
          HasBitSetters::set_has_pressurevesseltemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressurevesseltemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 electronicsEnclosurePressure = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (352 & 0xFF)) {
          HasBitSetters::set_has_electronicsenclosurepressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &electronicsenclosurepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railDisplacementX = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (360 & 0xFF)) {
          HasBitSetters::set_has_raildisplacementx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raildisplacementx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railDisplacementY = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (368 & 0xFF)) {
          HasBitSetters::set_has_raildisplacementy(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raildisplacementy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tubePressure = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (384 & 0xFF)) {
          HasBitSetters::set_has_tubepressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tubepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantPressure1 = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {
          HasBitSetters::set_has_coolantpressure1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolantpressure1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantPressure2 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (400 & 0xFF)) {
          HasBitSetters::set_has_coolantpressure2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolantpressure2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantPressure3 = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {
          HasBitSetters::set_has_coolantpressure3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolantpressure3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 coolantTemperature = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (416 & 0xFF)) {
          HasBitSetters::set_has_coolanttemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolanttemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float railTemperature = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (429 & 0xFF)) {
          HasBitSetters::set_has_railtemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &railtemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .LvdcNodeStates lvdcNodeState = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (432 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LvdcNodeStates_IsValid(value)) {
            set_lvdcnodestate(static_cast< ::LvdcNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                54, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack1Voltage = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (440 & 0xFF)) {
          HasBitSetters::set_has_pack1voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack1voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack2Voltage = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (448 & 0xFF)) {
          HasBitSetters::set_has_pack2voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack2voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack1Current = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (456 & 0xFF)) {
          HasBitSetters::set_has_pack1current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack1current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack2Current = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (464 & 0xFF)) {
          HasBitSetters::set_has_pack2current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack2current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail1Voltage = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (472 & 0xFF)) {
          HasBitSetters::set_has_rail1voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail1voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail2Voltage = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (480 & 0xFF)) {
          HasBitSetters::set_has_rail2voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail2voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail3Voltage = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (488 & 0xFF)) {
          HasBitSetters::set_has_rail3voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail3voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rail4Voltage = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (496 & 0xFF)) {
          HasBitSetters::set_has_rail4voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rail4voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor1 = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (504 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor2 = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (512 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor3 = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (520 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor4 = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (528 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor5 = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (536 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor6 = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (544 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor6(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor7 = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (552 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor7(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentSensor8 = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (560 & 0xFF)) {
          HasBitSetters::set_has_railcurrentsensor8(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentsensor8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 heartbeatValues = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (568 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 568u, input, this->mutable_heartbeatvalues())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (570 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_heartbeatvalues())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railVoltageFlag = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (576 & 0xFF)) {
          HasBitSetters::set_has_railvoltageflag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railvoltageflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 railCurrentFlag = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (584 & 0xFF)) {
          HasBitSetters::set_has_railcurrentflag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &railcurrentflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Telemetry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Telemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PodStates podState = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->podstate(), output);
  }

  // optional .BrakeNodeStates breakNodeState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->breaknodestate(), output);
  }

  // optional .MotorStates motorState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->motorstate(), output);
  }

  // optional .ControlsInterfaceStates controlsInterfaceState = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->controlsinterfacestate(), output);
  }

  // optional .InverterStates inverterState = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->inverterstate(), output);
  }

  // optional int32 missionTime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->missiontime(), output);
  }

  // optional int32 flightTime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flighttime(), output);
  }

  // repeated int32 heartbeatFlags = 8;
  for (int i = 0, n = this->heartbeatflags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->heartbeatflags(i), output);
  }

  // optional int32 podPosition = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->podposition(), output);
  }

  // optional int32 podVelocity = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->podvelocity(), output);
  }

  // optional int32 podAccelerationX = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->podaccelerationx(), output);
  }

  // optional int32 podAccelerationY = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->podaccelerationy(), output);
  }

  // optional int32 podAccelerationZ = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->podaccelerationz(), output);
  }

  // optional int32 imuVelocity = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->imuvelocity(), output);
  }

  // optional int32 imuAccelerationX = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->imuaccelerationx(), output);
  }

  // optional int32 tachometerVelocity = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tachometervelocity(), output);
  }

  // optional int32 resolverVelocity = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->resolvervelocity(), output);
  }

  // optional int32 maxIgbtTemperature = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->maxigbttemperature(), output);
  }

  // optional int32 gateDriverTemperature = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->gatedrivertemperature(), output);
  }

  // optional int32 inverterControlBoardTemperature = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->invertercontrolboardtemperature(), output);
  }

  // optional int32 motorTemperature = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->motortemperature(), output);
  }

  // optional int32 inverterBusVoltage = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->inverterbusvoltage(), output);
  }

  // optional int32 inverterVoltages = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->invertervoltages(), output);
  }

  // optional int32 inverterCurrents = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->invertercurrents(), output);
  }

  // optional .BatteryManagementStates batteryManagementState = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->batterymanagementstate(), output);
  }

  // optional float hvBatteryPackVoltage = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->hvbatterypackvoltage(), output);
  }

  // optional float hvBatteryPackCurrent = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->hvbatterypackcurrent(), output);
  }

  // repeated int32 hvBatteryCellTemperatures = 28;
  for (int i = 0, n = this->hvbatterycelltemperatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->hvbatterycelltemperatures(i), output);
  }

  // optional float hvBatteryPackMinimumCellVoltage = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->hvbatterypackminimumcellvoltage(), output);
  }

  // optional float hvBatteryPackMaxCellVoltage = 30;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->hvbatterypackmaxcellvoltage(), output);
  }

  // optional .PodStates breakNodePerceivedPodState = 31;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->breaknodeperceivedpodstate(), output);
  }

  // optional bool solenoid1 = 32;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->solenoid1(), output);
  }

  // optional bool solenoid2 = 33;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->solenoid2(), output);
  }

  // optional bool solenoid3 = 34;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->solenoid3(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool solenoid4 = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->solenoid4(), output);
  }

  // optional float highPressure = 38;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->highpressure(), output);
  }

  // optional float lowPressure1 = 39;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->lowpressure1(), output);
  }

  // optional float lowPressure2 = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->lowpressure2(), output);
  }

  // optional float lowPressure3 = 41;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->lowpressure3(), output);
  }

  // optional float lowPressure4 = 42;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->lowpressure4(), output);
  }

  // optional float pressureVesselTemperature = 43;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->pressurevesseltemperature(), output);
  }

  // optional int32 electronicsEnclosurePressure = 44;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->electronicsenclosurepressure(), output);
  }

  // optional int32 railDisplacementX = 45;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->raildisplacementx(), output);
  }

  // optional int32 railDisplacementY = 46;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->raildisplacementy(), output);
  }

  // optional int32 tubePressure = 48;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->tubepressure(), output);
  }

  // optional int32 coolantPressure1 = 49;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->coolantpressure1(), output);
  }

  // optional int32 coolantPressure2 = 50;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->coolantpressure2(), output);
  }

  // optional int32 coolantPressure3 = 51;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->coolantpressure3(), output);
  }

  // optional int32 coolantTemperature = 52;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->coolanttemperature(), output);
  }

  // optional float railTemperature = 53;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(53, this->railtemperature(), output);
  }

  // optional .LvdcNodeStates lvdcNodeState = 54;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      54, this->lvdcnodestate(), output);
  }

  // optional int32 pack1Voltage = 55;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->pack1voltage(), output);
  }

  // optional int32 pack2Voltage = 56;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->pack2voltage(), output);
  }

  // optional int32 pack1Current = 57;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->pack1current(), output);
  }

  // optional int32 pack2Current = 58;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->pack2current(), output);
  }

  // optional int32 rail1Voltage = 59;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->rail1voltage(), output);
  }

  // optional int32 rail2Voltage = 60;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->rail2voltage(), output);
  }

  // optional int32 rail3Voltage = 61;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->rail3voltage(), output);
  }

  // optional int32 rail4Voltage = 62;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->rail4voltage(), output);
  }

  // optional int32 railCurrentSensor1 = 63;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->railcurrentsensor1(), output);
  }

  // optional int32 railCurrentSensor2 = 64;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->railcurrentsensor2(), output);
  }

  // optional int32 railCurrentSensor3 = 65;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->railcurrentsensor3(), output);
  }

  // optional int32 railCurrentSensor4 = 66;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->railcurrentsensor4(), output);
  }

  // optional int32 railCurrentSensor5 = 67;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->railcurrentsensor5(), output);
  }

  // optional int32 railCurrentSensor6 = 68;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->railcurrentsensor6(), output);
  }

  // optional int32 railCurrentSensor7 = 69;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->railcurrentsensor7(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 railCurrentSensor8 = 70;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->railcurrentsensor8(), output);
  }

  // repeated int32 heartbeatValues = 71;
  for (int i = 0, n = this->heartbeatvalues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      71, this->heartbeatvalues(i), output);
  }

  // optional int32 railVoltageFlag = 72;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->railvoltageflag(), output);
  }

  // optional int32 railCurrentFlag = 73;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->railcurrentflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Telemetry)
}

::google::protobuf::uint8* Telemetry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Telemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PodStates podState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->podstate(), target);
  }

  // optional .BrakeNodeStates breakNodeState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->breaknodestate(), target);
  }

  // optional .MotorStates motorState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->motorstate(), target);
  }

  // optional .ControlsInterfaceStates controlsInterfaceState = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->controlsinterfacestate(), target);
  }

  // optional .InverterStates inverterState = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->inverterstate(), target);
  }

  // optional int32 missionTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->missiontime(), target);
  }

  // optional int32 flightTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flighttime(), target);
  }

  // repeated int32 heartbeatFlags = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->heartbeatflags_, target);

  // optional int32 podPosition = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->podposition(), target);
  }

  // optional int32 podVelocity = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->podvelocity(), target);
  }

  // optional int32 podAccelerationX = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->podaccelerationx(), target);
  }

  // optional int32 podAccelerationY = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->podaccelerationy(), target);
  }

  // optional int32 podAccelerationZ = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->podaccelerationz(), target);
  }

  // optional int32 imuVelocity = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->imuvelocity(), target);
  }

  // optional int32 imuAccelerationX = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->imuaccelerationx(), target);
  }

  // optional int32 tachometerVelocity = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tachometervelocity(), target);
  }

  // optional int32 resolverVelocity = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->resolvervelocity(), target);
  }

  // optional int32 maxIgbtTemperature = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->maxigbttemperature(), target);
  }

  // optional int32 gateDriverTemperature = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->gatedrivertemperature(), target);
  }

  // optional int32 inverterControlBoardTemperature = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->invertercontrolboardtemperature(), target);
  }

  // optional int32 motorTemperature = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->motortemperature(), target);
  }

  // optional int32 inverterBusVoltage = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->inverterbusvoltage(), target);
  }

  // optional int32 inverterVoltages = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->invertervoltages(), target);
  }

  // optional int32 inverterCurrents = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->invertercurrents(), target);
  }

  // optional .BatteryManagementStates batteryManagementState = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->batterymanagementstate(), target);
  }

  // optional float hvBatteryPackVoltage = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->hvbatterypackvoltage(), target);
  }

  // optional float hvBatteryPackCurrent = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->hvbatterypackcurrent(), target);
  }

  // repeated int32 hvBatteryCellTemperatures = 28;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(28, this->hvbatterycelltemperatures_, target);

  // optional float hvBatteryPackMinimumCellVoltage = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->hvbatterypackminimumcellvoltage(), target);
  }

  // optional float hvBatteryPackMaxCellVoltage = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->hvbatterypackmaxcellvoltage(), target);
  }

  // optional .PodStates breakNodePerceivedPodState = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->breaknodeperceivedpodstate(), target);
  }

  // optional bool solenoid1 = 32;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->solenoid1(), target);
  }

  // optional bool solenoid2 = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->solenoid2(), target);
  }

  // optional bool solenoid3 = 34;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->solenoid3(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool solenoid4 = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->solenoid4(), target);
  }

  // optional float highPressure = 38;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->highpressure(), target);
  }

  // optional float lowPressure1 = 39;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->lowpressure1(), target);
  }

  // optional float lowPressure2 = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->lowpressure2(), target);
  }

  // optional float lowPressure3 = 41;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->lowpressure3(), target);
  }

  // optional float lowPressure4 = 42;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->lowpressure4(), target);
  }

  // optional float pressureVesselTemperature = 43;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->pressurevesseltemperature(), target);
  }

  // optional int32 electronicsEnclosurePressure = 44;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->electronicsenclosurepressure(), target);
  }

  // optional int32 railDisplacementX = 45;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->raildisplacementx(), target);
  }

  // optional int32 railDisplacementY = 46;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->raildisplacementy(), target);
  }

  // optional int32 tubePressure = 48;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->tubepressure(), target);
  }

  // optional int32 coolantPressure1 = 49;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->coolantpressure1(), target);
  }

  // optional int32 coolantPressure2 = 50;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->coolantpressure2(), target);
  }

  // optional int32 coolantPressure3 = 51;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->coolantpressure3(), target);
  }

  // optional int32 coolantTemperature = 52;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->coolanttemperature(), target);
  }

  // optional float railTemperature = 53;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(53, this->railtemperature(), target);
  }

  // optional .LvdcNodeStates lvdcNodeState = 54;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      54, this->lvdcnodestate(), target);
  }

  // optional int32 pack1Voltage = 55;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->pack1voltage(), target);
  }

  // optional int32 pack2Voltage = 56;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->pack2voltage(), target);
  }

  // optional int32 pack1Current = 57;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->pack1current(), target);
  }

  // optional int32 pack2Current = 58;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->pack2current(), target);
  }

  // optional int32 rail1Voltage = 59;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->rail1voltage(), target);
  }

  // optional int32 rail2Voltage = 60;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->rail2voltage(), target);
  }

  // optional int32 rail3Voltage = 61;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->rail3voltage(), target);
  }

  // optional int32 rail4Voltage = 62;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->rail4voltage(), target);
  }

  // optional int32 railCurrentSensor1 = 63;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->railcurrentsensor1(), target);
  }

  // optional int32 railCurrentSensor2 = 64;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->railcurrentsensor2(), target);
  }

  // optional int32 railCurrentSensor3 = 65;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->railcurrentsensor3(), target);
  }

  // optional int32 railCurrentSensor4 = 66;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->railcurrentsensor4(), target);
  }

  // optional int32 railCurrentSensor5 = 67;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->railcurrentsensor5(), target);
  }

  // optional int32 railCurrentSensor6 = 68;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->railcurrentsensor6(), target);
  }

  // optional int32 railCurrentSensor7 = 69;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->railcurrentsensor7(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 railCurrentSensor8 = 70;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->railcurrentsensor8(), target);
  }

  // repeated int32 heartbeatValues = 71;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(71, this->heartbeatvalues_, target);

  // optional int32 railVoltageFlag = 72;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->railvoltageflag(), target);
  }

  // optional int32 railCurrentFlag = 73;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->railcurrentflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Telemetry)
  return target;
}

size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Telemetry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 heartbeatFlags = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->heartbeatflags_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->heartbeatflags_size());
    total_size += data_size;
  }

  // repeated int32 hvBatteryCellTemperatures = 28;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->hvbatterycelltemperatures_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->hvbatterycelltemperatures_size());
    total_size += data_size;
  }

  // repeated int32 heartbeatValues = 71;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->heartbeatvalues_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->heartbeatvalues_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .PodStates podState = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->podstate());
    }

    // optional .BrakeNodeStates breakNodeState = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->breaknodestate());
    }

    // optional .MotorStates motorState = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->motorstate());
    }

    // optional .ControlsInterfaceStates controlsInterfaceState = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->controlsinterfacestate());
    }

    // optional .InverterStates inverterState = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inverterstate());
    }

    // optional int32 missionTime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missiontime());
    }

    // optional int32 flightTime = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flighttime());
    }

    // optional int32 podPosition = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podposition());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 podVelocity = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podvelocity());
    }

    // optional int32 podAccelerationX = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podaccelerationx());
    }

    // optional int32 podAccelerationY = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podaccelerationy());
    }

    // optional int32 podAccelerationZ = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->podaccelerationz());
    }

    // optional int32 imuVelocity = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imuvelocity());
    }

    // optional int32 imuAccelerationX = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imuaccelerationx());
    }

    // optional int32 tachometerVelocity = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tachometervelocity());
    }

    // optional int32 resolverVelocity = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolvervelocity());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 maxIgbtTemperature = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxigbttemperature());
    }

    // optional int32 gateDriverTemperature = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gatedrivertemperature());
    }

    // optional int32 inverterControlBoardTemperature = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertercontrolboardtemperature());
    }

    // optional int32 motorTemperature = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motortemperature());
    }

    // optional int32 inverterBusVoltage = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inverterbusvoltage());
    }

    // optional int32 inverterVoltages = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertervoltages());
    }

    // optional int32 inverterCurrents = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invertercurrents());
    }

    // optional .BatteryManagementStates batteryManagementState = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->batterymanagementstate());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float hvBatteryPackVoltage = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float hvBatteryPackCurrent = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float hvBatteryPackMinimumCellVoltage = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float hvBatteryPackMaxCellVoltage = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional .PodStates breakNodePerceivedPodState = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->breaknodeperceivedpodstate());
    }

    // optional bool solenoid1 = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool solenoid2 = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool solenoid3 = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool solenoid4 = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional float highPressure = 38;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float lowPressure1 = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float lowPressure2 = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float lowPressure3 = 41;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float lowPressure4 = 42;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float pressureVesselTemperature = 43;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional int32 electronicsEnclosurePressure = 44;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->electronicsenclosurepressure());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 railDisplacementX = 45;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raildisplacementx());
    }

    // optional int32 railDisplacementY = 46;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raildisplacementy());
    }

    // optional int32 tubePressure = 48;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tubepressure());
    }

    // optional int32 coolantPressure1 = 49;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolantpressure1());
    }

    // optional int32 coolantPressure2 = 50;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolantpressure2());
    }

    // optional int32 coolantPressure3 = 51;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolantpressure3());
    }

    // optional int32 coolantTemperature = 52;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolanttemperature());
    }

    // optional float railTemperature = 53;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .LvdcNodeStates lvdcNodeState = 54;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lvdcnodestate());
    }

    // optional int32 pack1Voltage = 55;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack1voltage());
    }

    // optional int32 pack2Voltage = 56;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack2voltage());
    }

    // optional int32 pack1Current = 57;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack1current());
    }

    // optional int32 pack2Current = 58;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack2current());
    }

    // optional int32 rail1Voltage = 59;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail1voltage());
    }

    // optional int32 rail2Voltage = 60;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail2voltage());
    }

    // optional int32 rail3Voltage = 61;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail3voltage());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 rail4Voltage = 62;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rail4voltage());
    }

    // optional int32 railCurrentSensor1 = 63;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor1());
    }

    // optional int32 railCurrentSensor2 = 64;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor2());
    }

    // optional int32 railCurrentSensor3 = 65;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor3());
    }

    // optional int32 railCurrentSensor4 = 66;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor4());
    }

    // optional int32 railCurrentSensor5 = 67;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor5());
    }

    // optional int32 railCurrentSensor6 = 68;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor6());
    }

    // optional int32 railCurrentSensor7 = 69;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor7());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 railCurrentSensor8 = 70;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentsensor8());
    }

    // optional int32 railVoltageFlag = 72;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railvoltageflag());
    }

    // optional int32 railCurrentFlag = 73;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->railcurrentflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Telemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const Telemetry* source =
      ::google::protobuf::DynamicCastToGenerated<Telemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Telemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Telemetry)
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heartbeatflags_.MergeFrom(from.heartbeatflags_);
  hvbatterycelltemperatures_.MergeFrom(from.hvbatterycelltemperatures_);
  heartbeatvalues_.MergeFrom(from.heartbeatvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      podstate_ = from.podstate_;
    }
    if (cached_has_bits & 0x00000002u) {
      breaknodestate_ = from.breaknodestate_;
    }
    if (cached_has_bits & 0x00000004u) {
      motorstate_ = from.motorstate_;
    }
    if (cached_has_bits & 0x00000008u) {
      controlsinterfacestate_ = from.controlsinterfacestate_;
    }
    if (cached_has_bits & 0x00000010u) {
      inverterstate_ = from.inverterstate_;
    }
    if (cached_has_bits & 0x00000020u) {
      missiontime_ = from.missiontime_;
    }
    if (cached_has_bits & 0x00000040u) {
      flighttime_ = from.flighttime_;
    }
    if (cached_has_bits & 0x00000080u) {
      podposition_ = from.podposition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      podvelocity_ = from.podvelocity_;
    }
    if (cached_has_bits & 0x00000200u) {
      podaccelerationx_ = from.podaccelerationx_;
    }
    if (cached_has_bits & 0x00000400u) {
      podaccelerationy_ = from.podaccelerationy_;
    }
    if (cached_has_bits & 0x00000800u) {
      podaccelerationz_ = from.podaccelerationz_;
    }
    if (cached_has_bits & 0x00001000u) {
      imuvelocity_ = from.imuvelocity_;
    }
    if (cached_has_bits & 0x00002000u) {
      imuaccelerationx_ = from.imuaccelerationx_;
    }
    if (cached_has_bits & 0x00004000u) {
      tachometervelocity_ = from.tachometervelocity_;
    }
    if (cached_has_bits & 0x00008000u) {
      resolvervelocity_ = from.resolvervelocity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      maxigbttemperature_ = from.maxigbttemperature_;
    }
    if (cached_has_bits & 0x00020000u) {
      gatedrivertemperature_ = from.gatedrivertemperature_;
    }
    if (cached_has_bits & 0x00040000u) {
      invertercontrolboardtemperature_ = from.invertercontrolboardtemperature_;
    }
    if (cached_has_bits & 0x00080000u) {
      motortemperature_ = from.motortemperature_;
    }
    if (cached_has_bits & 0x00100000u) {
      inverterbusvoltage_ = from.inverterbusvoltage_;
    }
    if (cached_has_bits & 0x00200000u) {
      invertervoltages_ = from.invertervoltages_;
    }
    if (cached_has_bits & 0x00400000u) {
      invertercurrents_ = from.invertercurrents_;
    }
    if (cached_has_bits & 0x00800000u) {
      batterymanagementstate_ = from.batterymanagementstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      hvbatterypackvoltage_ = from.hvbatterypackvoltage_;
    }
    if (cached_has_bits & 0x02000000u) {
      hvbatterypackcurrent_ = from.hvbatterypackcurrent_;
    }
    if (cached_has_bits & 0x04000000u) {
      hvbatterypackminimumcellvoltage_ = from.hvbatterypackminimumcellvoltage_;
    }
    if (cached_has_bits & 0x08000000u) {
      hvbatterypackmaxcellvoltage_ = from.hvbatterypackmaxcellvoltage_;
    }
    if (cached_has_bits & 0x10000000u) {
      breaknodeperceivedpodstate_ = from.breaknodeperceivedpodstate_;
    }
    if (cached_has_bits & 0x20000000u) {
      solenoid1_ = from.solenoid1_;
    }
    if (cached_has_bits & 0x40000000u) {
      solenoid2_ = from.solenoid2_;
    }
    if (cached_has_bits & 0x80000000u) {
      solenoid3_ = from.solenoid3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      solenoid4_ = from.solenoid4_;
    }
    if (cached_has_bits & 0x00000002u) {
      highpressure_ = from.highpressure_;
    }
    if (cached_has_bits & 0x00000004u) {
      lowpressure1_ = from.lowpressure1_;
    }
    if (cached_has_bits & 0x00000008u) {
      lowpressure2_ = from.lowpressure2_;
    }
    if (cached_has_bits & 0x00000010u) {
      lowpressure3_ = from.lowpressure3_;
    }
    if (cached_has_bits & 0x00000020u) {
      lowpressure4_ = from.lowpressure4_;
    }
    if (cached_has_bits & 0x00000040u) {
      pressurevesseltemperature_ = from.pressurevesseltemperature_;
    }
    if (cached_has_bits & 0x00000080u) {
      electronicsenclosurepressure_ = from.electronicsenclosurepressure_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      raildisplacementx_ = from.raildisplacementx_;
    }
    if (cached_has_bits & 0x00000200u) {
      raildisplacementy_ = from.raildisplacementy_;
    }
    if (cached_has_bits & 0x00000400u) {
      tubepressure_ = from.tubepressure_;
    }
    if (cached_has_bits & 0x00000800u) {
      coolantpressure1_ = from.coolantpressure1_;
    }
    if (cached_has_bits & 0x00001000u) {
      coolantpressure2_ = from.coolantpressure2_;
    }
    if (cached_has_bits & 0x00002000u) {
      coolantpressure3_ = from.coolantpressure3_;
    }
    if (cached_has_bits & 0x00004000u) {
      coolanttemperature_ = from.coolanttemperature_;
    }
    if (cached_has_bits & 0x00008000u) {
      railtemperature_ = from.railtemperature_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      lvdcnodestate_ = from.lvdcnodestate_;
    }
    if (cached_has_bits & 0x00020000u) {
      pack1voltage_ = from.pack1voltage_;
    }
    if (cached_has_bits & 0x00040000u) {
      pack2voltage_ = from.pack2voltage_;
    }
    if (cached_has_bits & 0x00080000u) {
      pack1current_ = from.pack1current_;
    }
    if (cached_has_bits & 0x00100000u) {
      pack2current_ = from.pack2current_;
    }
    if (cached_has_bits & 0x00200000u) {
      rail1voltage_ = from.rail1voltage_;
    }
    if (cached_has_bits & 0x00400000u) {
      rail2voltage_ = from.rail2voltage_;
    }
    if (cached_has_bits & 0x00800000u) {
      rail3voltage_ = from.rail3voltage_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      rail4voltage_ = from.rail4voltage_;
    }
    if (cached_has_bits & 0x02000000u) {
      railcurrentsensor1_ = from.railcurrentsensor1_;
    }
    if (cached_has_bits & 0x04000000u) {
      railcurrentsensor2_ = from.railcurrentsensor2_;
    }
    if (cached_has_bits & 0x08000000u) {
      railcurrentsensor3_ = from.railcurrentsensor3_;
    }
    if (cached_has_bits & 0x10000000u) {
      railcurrentsensor4_ = from.railcurrentsensor4_;
    }
    if (cached_has_bits & 0x20000000u) {
      railcurrentsensor5_ = from.railcurrentsensor5_;
    }
    if (cached_has_bits & 0x40000000u) {
      railcurrentsensor6_ = from.railcurrentsensor6_;
    }
    if (cached_has_bits & 0x80000000u) {
      railcurrentsensor7_ = from.railcurrentsensor7_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      railcurrentsensor8_ = from.railcurrentsensor8_;
    }
    if (cached_has_bits & 0x00000002u) {
      railvoltageflag_ = from.railvoltageflag_;
    }
    if (cached_has_bits & 0x00000004u) {
      railcurrentflag_ = from.railcurrentflag_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void Telemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  return true;
}

void Telemetry::Swap(Telemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Telemetry::InternalSwap(Telemetry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  heartbeatflags_.InternalSwap(&other->heartbeatflags_);
  hvbatterycelltemperatures_.InternalSwap(&other->hvbatterycelltemperatures_);
  heartbeatvalues_.InternalSwap(&other->heartbeatvalues_);
  swap(podstate_, other->podstate_);
  swap(breaknodestate_, other->breaknodestate_);
  swap(motorstate_, other->motorstate_);
  swap(controlsinterfacestate_, other->controlsinterfacestate_);
  swap(inverterstate_, other->inverterstate_);
  swap(missiontime_, other->missiontime_);
  swap(flighttime_, other->flighttime_);
  swap(podposition_, other->podposition_);
  swap(podvelocity_, other->podvelocity_);
  swap(podaccelerationx_, other->podaccelerationx_);
  swap(podaccelerationy_, other->podaccelerationy_);
  swap(podaccelerationz_, other->podaccelerationz_);
  swap(imuvelocity_, other->imuvelocity_);
  swap(imuaccelerationx_, other->imuaccelerationx_);
  swap(tachometervelocity_, other->tachometervelocity_);
  swap(resolvervelocity_, other->resolvervelocity_);
  swap(maxigbttemperature_, other->maxigbttemperature_);
  swap(gatedrivertemperature_, other->gatedrivertemperature_);
  swap(invertercontrolboardtemperature_, other->invertercontrolboardtemperature_);
  swap(motortemperature_, other->motortemperature_);
  swap(inverterbusvoltage_, other->inverterbusvoltage_);
  swap(invertervoltages_, other->invertervoltages_);
  swap(invertercurrents_, other->invertercurrents_);
  swap(batterymanagementstate_, other->batterymanagementstate_);
  swap(hvbatterypackvoltage_, other->hvbatterypackvoltage_);
  swap(hvbatterypackcurrent_, other->hvbatterypackcurrent_);
  swap(hvbatterypackminimumcellvoltage_, other->hvbatterypackminimumcellvoltage_);
  swap(hvbatterypackmaxcellvoltage_, other->hvbatterypackmaxcellvoltage_);
  swap(breaknodeperceivedpodstate_, other->breaknodeperceivedpodstate_);
  swap(solenoid1_, other->solenoid1_);
  swap(solenoid2_, other->solenoid2_);
  swap(solenoid3_, other->solenoid3_);
  swap(solenoid4_, other->solenoid4_);
  swap(highpressure_, other->highpressure_);
  swap(lowpressure1_, other->lowpressure1_);
  swap(lowpressure2_, other->lowpressure2_);
  swap(lowpressure3_, other->lowpressure3_);
  swap(lowpressure4_, other->lowpressure4_);
  swap(pressurevesseltemperature_, other->pressurevesseltemperature_);
  swap(electronicsenclosurepressure_, other->electronicsenclosurepressure_);
  swap(raildisplacementx_, other->raildisplacementx_);
  swap(raildisplacementy_, other->raildisplacementy_);
  swap(tubepressure_, other->tubepressure_);
  swap(coolantpressure1_, other->coolantpressure1_);
  swap(coolantpressure2_, other->coolantpressure2_);
  swap(coolantpressure3_, other->coolantpressure3_);
  swap(coolanttemperature_, other->coolanttemperature_);
  swap(railtemperature_, other->railtemperature_);
  swap(lvdcnodestate_, other->lvdcnodestate_);
  swap(pack1voltage_, other->pack1voltage_);
  swap(pack2voltage_, other->pack2voltage_);
  swap(pack1current_, other->pack1current_);
  swap(pack2current_, other->pack2current_);
  swap(rail1voltage_, other->rail1voltage_);
  swap(rail2voltage_, other->rail2voltage_);
  swap(rail3voltage_, other->rail3voltage_);
  swap(rail4voltage_, other->rail4voltage_);
  swap(railcurrentsensor1_, other->railcurrentsensor1_);
  swap(railcurrentsensor2_, other->railcurrentsensor2_);
  swap(railcurrentsensor3_, other->railcurrentsensor3_);
  swap(railcurrentsensor4_, other->railcurrentsensor4_);
  swap(railcurrentsensor5_, other->railcurrentsensor5_);
  swap(railcurrentsensor6_, other->railcurrentsensor6_);
  swap(railcurrentsensor7_, other->railcurrentsensor7_);
  swap(railcurrentsensor8_, other->railcurrentsensor8_);
  swap(railvoltageflag_, other->railvoltageflag_);
  swap(railcurrentflag_, other->railcurrentflag_);
}

::google::protobuf::Metadata Telemetry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FcToBrakeNode::InitAsDefaultInstance() {
}
class FcToBrakeNode::HasBitSetters {
 public:
  static void set_has_packetnum(FcToBrakeNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_podstate(FcToBrakeNode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_manualnodestate(FcToBrakeNode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_solenoid1config(FcToBrakeNode* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_solenoid2config(FcToBrakeNode* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_solenoid3config(FcToBrakeNode* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_solenoid4config(FcToBrakeNode* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FcToBrakeNode::kPacketNumFieldNumber;
const int FcToBrakeNode::kPodStateFieldNumber;
const int FcToBrakeNode::kManualNodeStateFieldNumber;
const int FcToBrakeNode::kSolenoid1ConfigFieldNumber;
const int FcToBrakeNode::kSolenoid2ConfigFieldNumber;
const int FcToBrakeNode::kSolenoid3ConfigFieldNumber;
const int FcToBrakeNode::kSolenoid4ConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FcToBrakeNode::FcToBrakeNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FcToBrakeNode)
}
FcToBrakeNode::FcToBrakeNode(const FcToBrakeNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packetnum_, &from.packetnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&solenoid4config_) -
    reinterpret_cast<char*>(&packetnum_)) + sizeof(solenoid4config_));
  // @@protoc_insertion_point(copy_constructor:FcToBrakeNode)
}

void FcToBrakeNode::SharedCtor() {
  ::memset(&packetnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&solenoid4config_) -
      reinterpret_cast<char*>(&packetnum_)) + sizeof(solenoid4config_));
}

FcToBrakeNode::~FcToBrakeNode() {
  // @@protoc_insertion_point(destructor:FcToBrakeNode)
  SharedDtor();
}

void FcToBrakeNode::SharedDtor() {
}

void FcToBrakeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FcToBrakeNode& FcToBrakeNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FcToBrakeNode_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void FcToBrakeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:FcToBrakeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&packetnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solenoid4config_) -
        reinterpret_cast<char*>(&packetnum_)) + sizeof(solenoid4config_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FcToBrakeNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FcToBrakeNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 packetNum = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_packetnum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .PodStates podState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PodStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_podstate(static_cast<::PodStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .BrakeNodeStates manualNodeState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::BrakeNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manualnodestate(static_cast<::BrakeNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solenoid1Config = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_solenoid1config(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solenoid2Config = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_solenoid2config(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solenoid3Config = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_solenoid3config(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool solenoid4Config = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_solenoid4config(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FcToBrakeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FcToBrakeNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packetNum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_packetnum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PodStates podState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_podstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .BrakeNodeStates manualNodeState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BrakeNodeStates_IsValid(value)) {
            set_manualnodestate(static_cast< ::BrakeNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solenoid1Config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_solenoid1config(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid1config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solenoid2Config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_solenoid2config(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid2config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solenoid3Config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_solenoid3config(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid3config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solenoid4Config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_solenoid4config(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid4config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FcToBrakeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FcToBrakeNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FcToBrakeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FcToBrakeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetnum(), output);
  }

  // optional .PodStates podState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->podstate(), output);
  }

  // optional .BrakeNodeStates manualNodeState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->manualnodestate(), output);
  }

  // optional bool solenoid1Config = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->solenoid1config(), output);
  }

  // optional bool solenoid2Config = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->solenoid2config(), output);
  }

  // optional bool solenoid3Config = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->solenoid3config(), output);
  }

  // optional bool solenoid4Config = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->solenoid4config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FcToBrakeNode)
}

::google::protobuf::uint8* FcToBrakeNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FcToBrakeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetnum(), target);
  }

  // optional .PodStates podState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->podstate(), target);
  }

  // optional .BrakeNodeStates manualNodeState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->manualnodestate(), target);
  }

  // optional bool solenoid1Config = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->solenoid1config(), target);
  }

  // optional bool solenoid2Config = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->solenoid2config(), target);
  }

  // optional bool solenoid3Config = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->solenoid3config(), target);
  }

  // optional bool solenoid4Config = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->solenoid4config(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FcToBrakeNode)
  return target;
}

size_t FcToBrakeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FcToBrakeNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 packetNum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetnum());
    }

    // optional .PodStates podState = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->podstate());
    }

    // optional .BrakeNodeStates manualNodeState = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualnodestate());
    }

    // optional bool solenoid1Config = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool solenoid2Config = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool solenoid3Config = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool solenoid4Config = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FcToBrakeNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FcToBrakeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const FcToBrakeNode* source =
      ::google::protobuf::DynamicCastToGenerated<FcToBrakeNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FcToBrakeNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FcToBrakeNode)
    MergeFrom(*source);
  }
}

void FcToBrakeNode::MergeFrom(const FcToBrakeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FcToBrakeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      packetnum_ = from.packetnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      podstate_ = from.podstate_;
    }
    if (cached_has_bits & 0x00000004u) {
      manualnodestate_ = from.manualnodestate_;
    }
    if (cached_has_bits & 0x00000008u) {
      solenoid1config_ = from.solenoid1config_;
    }
    if (cached_has_bits & 0x00000010u) {
      solenoid2config_ = from.solenoid2config_;
    }
    if (cached_has_bits & 0x00000020u) {
      solenoid3config_ = from.solenoid3config_;
    }
    if (cached_has_bits & 0x00000040u) {
      solenoid4config_ = from.solenoid4config_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FcToBrakeNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FcToBrakeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FcToBrakeNode::CopyFrom(const FcToBrakeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FcToBrakeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FcToBrakeNode::IsInitialized() const {
  return true;
}

void FcToBrakeNode::Swap(FcToBrakeNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FcToBrakeNode::InternalSwap(FcToBrakeNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packetnum_, other->packetnum_);
  swap(podstate_, other->podstate_);
  swap(manualnodestate_, other->manualnodestate_);
  swap(solenoid1config_, other->solenoid1config_);
  swap(solenoid2config_, other->solenoid2config_);
  swap(solenoid3config_, other->solenoid3config_);
  swap(solenoid4config_, other->solenoid4config_);
}

::google::protobuf::Metadata FcToBrakeNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FcToLvdcNode::InitAsDefaultInstance() {
}
class FcToLvdcNode::HasBitSetters {
 public:
  static void set_has_packetnum(FcToLvdcNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_podstate(FcToLvdcNode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_manualnodestate(FcToLvdcNode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FcToLvdcNode::kPacketNumFieldNumber;
const int FcToLvdcNode::kPodStateFieldNumber;
const int FcToLvdcNode::kManualNodeStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FcToLvdcNode::FcToLvdcNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FcToLvdcNode)
}
FcToLvdcNode::FcToLvdcNode(const FcToLvdcNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packetnum_, &from.packetnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&manualnodestate_) -
    reinterpret_cast<char*>(&packetnum_)) + sizeof(manualnodestate_));
  // @@protoc_insertion_point(copy_constructor:FcToLvdcNode)
}

void FcToLvdcNode::SharedCtor() {
  ::memset(&packetnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manualnodestate_) -
      reinterpret_cast<char*>(&packetnum_)) + sizeof(manualnodestate_));
}

FcToLvdcNode::~FcToLvdcNode() {
  // @@protoc_insertion_point(destructor:FcToLvdcNode)
  SharedDtor();
}

void FcToLvdcNode::SharedDtor() {
}

void FcToLvdcNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FcToLvdcNode& FcToLvdcNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FcToLvdcNode_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void FcToLvdcNode::Clear() {
// @@protoc_insertion_point(message_clear_start:FcToLvdcNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packetnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manualnodestate_) -
        reinterpret_cast<char*>(&packetnum_)) + sizeof(manualnodestate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FcToLvdcNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FcToLvdcNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 packetNum = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_packetnum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .PodStates podState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PodStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_podstate(static_cast<::PodStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .LvdcNodeStates manualNodeState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::LvdcNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_manualnodestate(static_cast<::LvdcNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FcToLvdcNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FcToLvdcNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packetNum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_packetnum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PodStates podState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_podstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .LvdcNodeStates manualNodeState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LvdcNodeStates_IsValid(value)) {
            set_manualnodestate(static_cast< ::LvdcNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FcToLvdcNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FcToLvdcNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FcToLvdcNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FcToLvdcNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetnum(), output);
  }

  // optional .PodStates podState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->podstate(), output);
  }

  // optional .LvdcNodeStates manualNodeState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->manualnodestate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FcToLvdcNode)
}

::google::protobuf::uint8* FcToLvdcNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FcToLvdcNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetnum(), target);
  }

  // optional .PodStates podState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->podstate(), target);
  }

  // optional .LvdcNodeStates manualNodeState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->manualnodestate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FcToLvdcNode)
  return target;
}

size_t FcToLvdcNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FcToLvdcNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 packetNum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetnum());
    }

    // optional .PodStates podState = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->podstate());
    }

    // optional .LvdcNodeStates manualNodeState = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manualnodestate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FcToLvdcNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FcToLvdcNode)
  GOOGLE_DCHECK_NE(&from, this);
  const FcToLvdcNode* source =
      ::google::protobuf::DynamicCastToGenerated<FcToLvdcNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FcToLvdcNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FcToLvdcNode)
    MergeFrom(*source);
  }
}

void FcToLvdcNode::MergeFrom(const FcToLvdcNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FcToLvdcNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packetnum_ = from.packetnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      podstate_ = from.podstate_;
    }
    if (cached_has_bits & 0x00000004u) {
      manualnodestate_ = from.manualnodestate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FcToLvdcNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FcToLvdcNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FcToLvdcNode::CopyFrom(const FcToLvdcNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FcToLvdcNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FcToLvdcNode::IsInitialized() const {
  return true;
}

void FcToLvdcNode::Swap(FcToLvdcNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FcToLvdcNode::InternalSwap(FcToLvdcNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packetnum_, other->packetnum_);
  swap(podstate_, other->podstate_);
  swap(manualnodestate_, other->manualnodestate_);
}

::google::protobuf::Metadata FcToLvdcNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DtsNodeToFc::InitAsDefaultInstance() {
}
class DtsNodeToFc::HasBitSetters {
 public:
  static void set_has_packetnum(DtsNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_brakenodestate(DtsNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_brakesolenoidstate(DtsNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ventsolenoidstate(DtsNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_rotortemperature(DtsNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_pneumatictemperature(DtsNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_tankpressure(DtsNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_brakepressure(DtsNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DtsNodeToFc::kPacketNumFieldNumber;
const int DtsNodeToFc::kBrakeNodeStateFieldNumber;
const int DtsNodeToFc::kBrakeSolenoidStateFieldNumber;
const int DtsNodeToFc::kVentSolenoidStateFieldNumber;
const int DtsNodeToFc::kRotorTemperatureFieldNumber;
const int DtsNodeToFc::kPneumaticTemperatureFieldNumber;
const int DtsNodeToFc::kTankPressureFieldNumber;
const int DtsNodeToFc::kBrakePressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DtsNodeToFc::DtsNodeToFc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DtsNodeToFc)
}
DtsNodeToFc::DtsNodeToFc(const DtsNodeToFc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packetnum_, &from.packetnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&brakepressure_) -
    reinterpret_cast<char*>(&packetnum_)) + sizeof(brakepressure_));
  // @@protoc_insertion_point(copy_constructor:DtsNodeToFc)
}

void DtsNodeToFc::SharedCtor() {
  ::memset(&packetnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brakepressure_) -
      reinterpret_cast<char*>(&packetnum_)) + sizeof(brakepressure_));
}

DtsNodeToFc::~DtsNodeToFc() {
  // @@protoc_insertion_point(destructor:DtsNodeToFc)
  SharedDtor();
}

void DtsNodeToFc::SharedDtor() {
}

void DtsNodeToFc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DtsNodeToFc& DtsNodeToFc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DtsNodeToFc_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void DtsNodeToFc::Clear() {
// @@protoc_insertion_point(message_clear_start:DtsNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&packetnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brakepressure_) -
        reinterpret_cast<char*>(&packetnum_)) + sizeof(brakepressure_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DtsNodeToFc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DtsNodeToFc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 packetNum = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_packetnum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .BrakeNodeStates brakeNodeState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::BrakeNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_brakenodestate(static_cast<::BrakeNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool brakeSolenoidState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_brakesolenoidstate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool ventSolenoidState = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ventsolenoidstate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required float rotorTemperature = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_rotortemperature(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float pneumaticTemperature = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_pneumatictemperature(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float tankPressure = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_tankpressure(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float brakePressure = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_brakepressure(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DtsNodeToFc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DtsNodeToFc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 packetNum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_packetnum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .BrakeNodeStates brakeNodeState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BrakeNodeStates_IsValid(value)) {
            set_brakenodestate(static_cast< ::BrakeNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool brakeSolenoidState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_brakesolenoidstate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brakesolenoidstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ventSolenoidState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_ventsolenoidstate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ventsolenoidstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rotorTemperature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_rotortemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotortemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pneumaticTemperature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_pneumatictemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pneumatictemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tankPressure = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_tankpressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tankpressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float brakePressure = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_brakepressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brakepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DtsNodeToFc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DtsNodeToFc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DtsNodeToFc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DtsNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetnum(), output);
  }

  // required .BrakeNodeStates brakeNodeState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->brakenodestate(), output);
  }

  // required bool brakeSolenoidState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->brakesolenoidstate(), output);
  }

  // required bool ventSolenoidState = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ventsolenoidstate(), output);
  }

  // required float rotorTemperature = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotortemperature(), output);
  }

  // required float pneumaticTemperature = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pneumatictemperature(), output);
  }

  // required float tankPressure = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tankpressure(), output);
  }

  // required float brakePressure = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->brakepressure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DtsNodeToFc)
}

::google::protobuf::uint8* DtsNodeToFc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DtsNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetnum(), target);
  }

  // required .BrakeNodeStates brakeNodeState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->brakenodestate(), target);
  }

  // required bool brakeSolenoidState = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->brakesolenoidstate(), target);
  }

  // required bool ventSolenoidState = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ventsolenoidstate(), target);
  }

  // required float rotorTemperature = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rotortemperature(), target);
  }

  // required float pneumaticTemperature = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pneumatictemperature(), target);
  }

  // required float tankPressure = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tankpressure(), target);
  }

  // required float brakePressure = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->brakepressure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DtsNodeToFc)
  return target;
}

size_t DtsNodeToFc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DtsNodeToFc)
  size_t total_size = 0;

  if (has_packetnum()) {
    // required int32 packetNum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packetnum());
  }

  if (has_brakenodestate()) {
    // required .BrakeNodeStates brakeNodeState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->brakenodestate());
  }

  if (has_brakesolenoidstate()) {
    // required bool brakeSolenoidState = 3;
    total_size += 1 + 1;
  }

  if (has_ventsolenoidstate()) {
    // required bool ventSolenoidState = 4;
    total_size += 1 + 1;
  }

  if (has_rotortemperature()) {
    // required float rotorTemperature = 5;
    total_size += 1 + 4;
  }

  if (has_pneumatictemperature()) {
    // required float pneumaticTemperature = 6;
    total_size += 1 + 4;
  }

  if (has_tankpressure()) {
    // required float tankPressure = 7;
    total_size += 1 + 4;
  }

  if (has_brakepressure()) {
    // required float brakePressure = 8;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t DtsNodeToFc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DtsNodeToFc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required int32 packetNum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packetnum());

    // required .BrakeNodeStates brakeNodeState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->brakenodestate());

    // required bool brakeSolenoidState = 3;
    total_size += 1 + 1;

    // required bool ventSolenoidState = 4;
    total_size += 1 + 1;

    // required float rotorTemperature = 5;
    total_size += 1 + 4;

    // required float pneumaticTemperature = 6;
    total_size += 1 + 4;

    // required float tankPressure = 7;
    total_size += 1 + 4;

    // required float brakePressure = 8;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DtsNodeToFc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DtsNodeToFc)
  GOOGLE_DCHECK_NE(&from, this);
  const DtsNodeToFc* source =
      ::google::protobuf::DynamicCastToGenerated<DtsNodeToFc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DtsNodeToFc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DtsNodeToFc)
    MergeFrom(*source);
  }
}

void DtsNodeToFc::MergeFrom(const DtsNodeToFc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DtsNodeToFc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      packetnum_ = from.packetnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      brakenodestate_ = from.brakenodestate_;
    }
    if (cached_has_bits & 0x00000004u) {
      brakesolenoidstate_ = from.brakesolenoidstate_;
    }
    if (cached_has_bits & 0x00000008u) {
      ventsolenoidstate_ = from.ventsolenoidstate_;
    }
    if (cached_has_bits & 0x00000010u) {
      rotortemperature_ = from.rotortemperature_;
    }
    if (cached_has_bits & 0x00000020u) {
      pneumatictemperature_ = from.pneumatictemperature_;
    }
    if (cached_has_bits & 0x00000040u) {
      tankpressure_ = from.tankpressure_;
    }
    if (cached_has_bits & 0x00000080u) {
      brakepressure_ = from.brakepressure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DtsNodeToFc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DtsNodeToFc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtsNodeToFc::CopyFrom(const DtsNodeToFc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DtsNodeToFc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtsNodeToFc::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void DtsNodeToFc::Swap(DtsNodeToFc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DtsNodeToFc::InternalSwap(DtsNodeToFc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packetnum_, other->packetnum_);
  swap(brakenodestate_, other->brakenodestate_);
  swap(brakesolenoidstate_, other->brakesolenoidstate_);
  swap(ventsolenoidstate_, other->ventsolenoidstate_);
  swap(rotortemperature_, other->rotortemperature_);
  swap(pneumatictemperature_, other->pneumatictemperature_);
  swap(tankpressure_, other->tankpressure_);
  swap(brakepressure_, other->brakepressure_);
}

::google::protobuf::Metadata DtsNodeToFc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EnclosureNodeToFc::InitAsDefaultInstance() {
}
class EnclosureNodeToFc::HasBitSetters {
 public:
  static void set_has_packetnum(EnclosureNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_enclosurepressure(EnclosureNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_enclosuretemperature(EnclosureNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_coolantlinepressure(EnclosureNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnclosureNodeToFc::kPacketNumFieldNumber;
const int EnclosureNodeToFc::kEnclosurePressureFieldNumber;
const int EnclosureNodeToFc::kEnclosureTemperatureFieldNumber;
const int EnclosureNodeToFc::kCoolantLinePressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnclosureNodeToFc::EnclosureNodeToFc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnclosureNodeToFc)
}
EnclosureNodeToFc::EnclosureNodeToFc(const EnclosureNodeToFc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packetnum_, &from.packetnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&coolantlinepressure_) -
    reinterpret_cast<char*>(&packetnum_)) + sizeof(coolantlinepressure_));
  // @@protoc_insertion_point(copy_constructor:EnclosureNodeToFc)
}

void EnclosureNodeToFc::SharedCtor() {
  ::memset(&packetnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coolantlinepressure_) -
      reinterpret_cast<char*>(&packetnum_)) + sizeof(coolantlinepressure_));
}

EnclosureNodeToFc::~EnclosureNodeToFc() {
  // @@protoc_insertion_point(destructor:EnclosureNodeToFc)
  SharedDtor();
}

void EnclosureNodeToFc::SharedDtor() {
}

void EnclosureNodeToFc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnclosureNodeToFc& EnclosureNodeToFc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EnclosureNodeToFc_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void EnclosureNodeToFc::Clear() {
// @@protoc_insertion_point(message_clear_start:EnclosureNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&packetnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coolantlinepressure_) -
        reinterpret_cast<char*>(&packetnum_)) + sizeof(coolantlinepressure_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnclosureNodeToFc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EnclosureNodeToFc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 packetNum = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_packetnum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required float enclosurePressure = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_enclosurepressure(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float enclosureTemperature = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_enclosuretemperature(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float coolantLinePressure = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_coolantlinepressure(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnclosureNodeToFc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnclosureNodeToFc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 packetNum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_packetnum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float enclosurePressure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_enclosurepressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enclosurepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float enclosureTemperature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_enclosuretemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enclosuretemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float coolantLinePressure = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_coolantlinepressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coolantlinepressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnclosureNodeToFc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnclosureNodeToFc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnclosureNodeToFc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnclosureNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetnum(), output);
  }

  // required float enclosurePressure = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->enclosurepressure(), output);
  }

  // required float enclosureTemperature = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->enclosuretemperature(), output);
  }

  // required float coolantLinePressure = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->coolantlinepressure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnclosureNodeToFc)
}

::google::protobuf::uint8* EnclosureNodeToFc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnclosureNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetnum(), target);
  }

  // required float enclosurePressure = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->enclosurepressure(), target);
  }

  // required float enclosureTemperature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->enclosuretemperature(), target);
  }

  // required float coolantLinePressure = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->coolantlinepressure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnclosureNodeToFc)
  return target;
}

size_t EnclosureNodeToFc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EnclosureNodeToFc)
  size_t total_size = 0;

  if (has_packetnum()) {
    // required int32 packetNum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packetnum());
  }

  if (has_enclosurepressure()) {
    // required float enclosurePressure = 2;
    total_size += 1 + 4;
  }

  if (has_enclosuretemperature()) {
    // required float enclosureTemperature = 3;
    total_size += 1 + 4;
  }

  if (has_coolantlinepressure()) {
    // required float coolantLinePressure = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t EnclosureNodeToFc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnclosureNodeToFc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 packetNum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packetnum());

    // required float enclosurePressure = 2;
    total_size += 1 + 4;

    // required float enclosureTemperature = 3;
    total_size += 1 + 4;

    // required float coolantLinePressure = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnclosureNodeToFc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnclosureNodeToFc)
  GOOGLE_DCHECK_NE(&from, this);
  const EnclosureNodeToFc* source =
      ::google::protobuf::DynamicCastToGenerated<EnclosureNodeToFc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnclosureNodeToFc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnclosureNodeToFc)
    MergeFrom(*source);
  }
}

void EnclosureNodeToFc::MergeFrom(const EnclosureNodeToFc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnclosureNodeToFc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      packetnum_ = from.packetnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      enclosurepressure_ = from.enclosurepressure_;
    }
    if (cached_has_bits & 0x00000004u) {
      enclosuretemperature_ = from.enclosuretemperature_;
    }
    if (cached_has_bits & 0x00000008u) {
      coolantlinepressure_ = from.coolantlinepressure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnclosureNodeToFc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnclosureNodeToFc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnclosureNodeToFc::CopyFrom(const EnclosureNodeToFc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnclosureNodeToFc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnclosureNodeToFc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void EnclosureNodeToFc::Swap(EnclosureNodeToFc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnclosureNodeToFc::InternalSwap(EnclosureNodeToFc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packetnum_, other->packetnum_);
  swap(enclosurepressure_, other->enclosurepressure_);
  swap(enclosuretemperature_, other->enclosuretemperature_);
  swap(coolantlinepressure_, other->coolantlinepressure_);
}

::google::protobuf::Metadata EnclosureNodeToFc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LvdcNodeToFc::InitAsDefaultInstance() {
}
class LvdcNodeToFc::HasBitSetters {
 public:
  static void set_has_highpowerpackvoltage(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_lowpowerpackvoltage(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_highpowerpackcurrent(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_lowpowerpackcurrent(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_rail5voltage(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_rail12lowpowervoltage(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_rail12highpowervoltage(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_rail24voltage(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_rail5current(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_rail12lowpowercurrent(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_rail24current(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_railinvertercurrent(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_railcooling1current(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_railcooling2current(LvdcNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LvdcNodeToFc::kHighPowerPackVoltageFieldNumber;
const int LvdcNodeToFc::kLowPowerPackVoltageFieldNumber;
const int LvdcNodeToFc::kHighPowerPackCurrentFieldNumber;
const int LvdcNodeToFc::kLowPowerPackCurrentFieldNumber;
const int LvdcNodeToFc::kRail5VoltageFieldNumber;
const int LvdcNodeToFc::kRail12LowPowerVoltageFieldNumber;
const int LvdcNodeToFc::kRail12HighPowerVoltageFieldNumber;
const int LvdcNodeToFc::kRail24VoltageFieldNumber;
const int LvdcNodeToFc::kRail5CurrentFieldNumber;
const int LvdcNodeToFc::kRail12LowPowerCurrentFieldNumber;
const int LvdcNodeToFc::kRail24CurrentFieldNumber;
const int LvdcNodeToFc::kRailInverterCurrentFieldNumber;
const int LvdcNodeToFc::kRailCooling1CurrentFieldNumber;
const int LvdcNodeToFc::kRailCooling2CurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LvdcNodeToFc::LvdcNodeToFc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LvdcNodeToFc)
}
LvdcNodeToFc::LvdcNodeToFc(const LvdcNodeToFc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&highpowerpackvoltage_, &from.highpowerpackvoltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&railcooling2current_) -
    reinterpret_cast<char*>(&highpowerpackvoltage_)) + sizeof(railcooling2current_));
  // @@protoc_insertion_point(copy_constructor:LvdcNodeToFc)
}

void LvdcNodeToFc::SharedCtor() {
  ::memset(&highpowerpackvoltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&railcooling2current_) -
      reinterpret_cast<char*>(&highpowerpackvoltage_)) + sizeof(railcooling2current_));
}

LvdcNodeToFc::~LvdcNodeToFc() {
  // @@protoc_insertion_point(destructor:LvdcNodeToFc)
  SharedDtor();
}

void LvdcNodeToFc::SharedDtor() {
}

void LvdcNodeToFc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LvdcNodeToFc& LvdcNodeToFc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LvdcNodeToFc_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void LvdcNodeToFc::Clear() {
// @@protoc_insertion_point(message_clear_start:LvdcNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&highpowerpackvoltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rail24voltage_) -
        reinterpret_cast<char*>(&highpowerpackvoltage_)) + sizeof(rail24voltage_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&rail5current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&railcooling2current_) -
        reinterpret_cast<char*>(&rail5current_)) + sizeof(railcooling2current_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LvdcNodeToFc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LvdcNodeToFc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required float highPowerPackVoltage = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_highpowerpackvoltage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float lowPowerPackVoltage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_lowpowerpackvoltage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float highPowerPackCurrent = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_highpowerpackcurrent(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float lowPowerPackCurrent = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_lowpowerpackcurrent(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float rail5Voltage = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_rail5voltage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float rail12LowPowerVoltage = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_rail12lowpowervoltage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float rail12HighPowerVoltage = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_rail12highpowervoltage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float rail24Voltage = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_rail24voltage(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float rail5Current = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_rail5current(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float rail12LowPowerCurrent = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_rail12lowpowercurrent(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float rail24Current = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_rail24current(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float railInverterCurrent = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_railinvertercurrent(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float railCooling1Current = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_railcooling1current(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float railCooling2Current = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 117) goto handle_unusual;
        msg->set_railcooling2current(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LvdcNodeToFc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LvdcNodeToFc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float highPowerPackVoltage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_highpowerpackvoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &highpowerpackvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lowPowerPackVoltage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_lowpowerpackvoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpowerpackvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float highPowerPackCurrent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_highpowerpackcurrent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &highpowerpackcurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lowPowerPackCurrent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_lowpowerpackcurrent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpowerpackcurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rail5Voltage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_rail5voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rail5voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rail12LowPowerVoltage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_rail12lowpowervoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rail12lowpowervoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rail12HighPowerVoltage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_rail12highpowervoltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rail12highpowervoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rail24Voltage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_rail24voltage(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rail24voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rail5Current = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_rail5current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rail5current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rail12LowPowerCurrent = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_rail12lowpowercurrent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rail12lowpowercurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float rail24Current = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_rail24current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rail24current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float railInverterCurrent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_railinvertercurrent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &railinvertercurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float railCooling1Current = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_railcooling1current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &railcooling1current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float railCooling2Current = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (117 & 0xFF)) {
          HasBitSetters::set_has_railcooling2current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &railcooling2current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LvdcNodeToFc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LvdcNodeToFc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LvdcNodeToFc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LvdcNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float highPowerPackVoltage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->highpowerpackvoltage(), output);
  }

  // required float lowPowerPackVoltage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lowpowerpackvoltage(), output);
  }

  // required float highPowerPackCurrent = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->highpowerpackcurrent(), output);
  }

  // required float lowPowerPackCurrent = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lowpowerpackcurrent(), output);
  }

  // required float rail5Voltage = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rail5voltage(), output);
  }

  // required float rail12LowPowerVoltage = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rail12lowpowervoltage(), output);
  }

  // required float rail12HighPowerVoltage = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rail12highpowervoltage(), output);
  }

  // required float rail24Voltage = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rail24voltage(), output);
  }

  // required float rail5Current = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->rail5current(), output);
  }

  // required float rail12LowPowerCurrent = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->rail12lowpowercurrent(), output);
  }

  // required float rail24Current = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->rail24current(), output);
  }

  // required float railInverterCurrent = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->railinvertercurrent(), output);
  }

  // required float railCooling1Current = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->railcooling1current(), output);
  }

  // required float railCooling2Current = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->railcooling2current(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LvdcNodeToFc)
}

::google::protobuf::uint8* LvdcNodeToFc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LvdcNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float highPowerPackVoltage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->highpowerpackvoltage(), target);
  }

  // required float lowPowerPackVoltage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lowpowerpackvoltage(), target);
  }

  // required float highPowerPackCurrent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->highpowerpackcurrent(), target);
  }

  // required float lowPowerPackCurrent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lowpowerpackcurrent(), target);
  }

  // required float rail5Voltage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rail5voltage(), target);
  }

  // required float rail12LowPowerVoltage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rail12lowpowervoltage(), target);
  }

  // required float rail12HighPowerVoltage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rail12highpowervoltage(), target);
  }

  // required float rail24Voltage = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rail24voltage(), target);
  }

  // required float rail5Current = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->rail5current(), target);
  }

  // required float rail12LowPowerCurrent = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->rail12lowpowercurrent(), target);
  }

  // required float rail24Current = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->rail24current(), target);
  }

  // required float railInverterCurrent = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->railinvertercurrent(), target);
  }

  // required float railCooling1Current = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->railcooling1current(), target);
  }

  // required float railCooling2Current = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->railcooling2current(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LvdcNodeToFc)
  return target;
}

size_t LvdcNodeToFc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LvdcNodeToFc)
  size_t total_size = 0;

  if (has_highpowerpackvoltage()) {
    // required float highPowerPackVoltage = 1;
    total_size += 1 + 4;
  }

  if (has_lowpowerpackvoltage()) {
    // required float lowPowerPackVoltage = 2;
    total_size += 1 + 4;
  }

  if (has_highpowerpackcurrent()) {
    // required float highPowerPackCurrent = 3;
    total_size += 1 + 4;
  }

  if (has_lowpowerpackcurrent()) {
    // required float lowPowerPackCurrent = 4;
    total_size += 1 + 4;
  }

  if (has_rail5voltage()) {
    // required float rail5Voltage = 5;
    total_size += 1 + 4;
  }

  if (has_rail12lowpowervoltage()) {
    // required float rail12LowPowerVoltage = 6;
    total_size += 1 + 4;
  }

  if (has_rail12highpowervoltage()) {
    // required float rail12HighPowerVoltage = 7;
    total_size += 1 + 4;
  }

  if (has_rail24voltage()) {
    // required float rail24Voltage = 8;
    total_size += 1 + 4;
  }

  if (has_rail5current()) {
    // required float rail5Current = 9;
    total_size += 1 + 4;
  }

  if (has_rail12lowpowercurrent()) {
    // required float rail12LowPowerCurrent = 10;
    total_size += 1 + 4;
  }

  if (has_rail24current()) {
    // required float rail24Current = 11;
    total_size += 1 + 4;
  }

  if (has_railinvertercurrent()) {
    // required float railInverterCurrent = 12;
    total_size += 1 + 4;
  }

  if (has_railcooling1current()) {
    // required float railCooling1Current = 13;
    total_size += 1 + 4;
  }

  if (has_railcooling2current()) {
    // required float railCooling2Current = 14;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LvdcNodeToFc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LvdcNodeToFc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required float highPowerPackVoltage = 1;
    total_size += 1 + 4;

    // required float lowPowerPackVoltage = 2;
    total_size += 1 + 4;

    // required float highPowerPackCurrent = 3;
    total_size += 1 + 4;

    // required float lowPowerPackCurrent = 4;
    total_size += 1 + 4;

    // required float rail5Voltage = 5;
    total_size += 1 + 4;

    // required float rail12LowPowerVoltage = 6;
    total_size += 1 + 4;

    // required float rail12HighPowerVoltage = 7;
    total_size += 1 + 4;

    // required float rail24Voltage = 8;
    total_size += 1 + 4;

    // required float rail5Current = 9;
    total_size += 1 + 4;

    // required float rail12LowPowerCurrent = 10;
    total_size += 1 + 4;

    // required float rail24Current = 11;
    total_size += 1 + 4;

    // required float railInverterCurrent = 12;
    total_size += 1 + 4;

    // required float railCooling1Current = 13;
    total_size += 1 + 4;

    // required float railCooling2Current = 14;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LvdcNodeToFc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LvdcNodeToFc)
  GOOGLE_DCHECK_NE(&from, this);
  const LvdcNodeToFc* source =
      ::google::protobuf::DynamicCastToGenerated<LvdcNodeToFc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LvdcNodeToFc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LvdcNodeToFc)
    MergeFrom(*source);
  }
}

void LvdcNodeToFc::MergeFrom(const LvdcNodeToFc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LvdcNodeToFc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      highpowerpackvoltage_ = from.highpowerpackvoltage_;
    }
    if (cached_has_bits & 0x00000002u) {
      lowpowerpackvoltage_ = from.lowpowerpackvoltage_;
    }
    if (cached_has_bits & 0x00000004u) {
      highpowerpackcurrent_ = from.highpowerpackcurrent_;
    }
    if (cached_has_bits & 0x00000008u) {
      lowpowerpackcurrent_ = from.lowpowerpackcurrent_;
    }
    if (cached_has_bits & 0x00000010u) {
      rail5voltage_ = from.rail5voltage_;
    }
    if (cached_has_bits & 0x00000020u) {
      rail12lowpowervoltage_ = from.rail12lowpowervoltage_;
    }
    if (cached_has_bits & 0x00000040u) {
      rail12highpowervoltage_ = from.rail12highpowervoltage_;
    }
    if (cached_has_bits & 0x00000080u) {
      rail24voltage_ = from.rail24voltage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      rail5current_ = from.rail5current_;
    }
    if (cached_has_bits & 0x00000200u) {
      rail12lowpowercurrent_ = from.rail12lowpowercurrent_;
    }
    if (cached_has_bits & 0x00000400u) {
      rail24current_ = from.rail24current_;
    }
    if (cached_has_bits & 0x00000800u) {
      railinvertercurrent_ = from.railinvertercurrent_;
    }
    if (cached_has_bits & 0x00001000u) {
      railcooling1current_ = from.railcooling1current_;
    }
    if (cached_has_bits & 0x00002000u) {
      railcooling2current_ = from.railcooling2current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LvdcNodeToFc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LvdcNodeToFc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LvdcNodeToFc::CopyFrom(const LvdcNodeToFc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LvdcNodeToFc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvdcNodeToFc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  return true;
}

void LvdcNodeToFc::Swap(LvdcNodeToFc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LvdcNodeToFc::InternalSwap(LvdcNodeToFc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(highpowerpackvoltage_, other->highpowerpackvoltage_);
  swap(lowpowerpackvoltage_, other->lowpowerpackvoltage_);
  swap(highpowerpackcurrent_, other->highpowerpackcurrent_);
  swap(lowpowerpackcurrent_, other->lowpowerpackcurrent_);
  swap(rail5voltage_, other->rail5voltage_);
  swap(rail12lowpowervoltage_, other->rail12lowpowervoltage_);
  swap(rail12highpowervoltage_, other->rail12highpowervoltage_);
  swap(rail24voltage_, other->rail24voltage_);
  swap(rail5current_, other->rail5current_);
  swap(rail12lowpowercurrent_, other->rail12lowpowercurrent_);
  swap(rail24current_, other->rail24current_);
  swap(railinvertercurrent_, other->railinvertercurrent_);
  swap(railcooling1current_, other->railcooling1current_);
  swap(railcooling2current_, other->railcooling2current_);
}

::google::protobuf::Metadata LvdcNodeToFc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BrakeNodeToFc::InitAsDefaultInstance() {
}
class BrakeNodeToFc::HasBitSetters {
 public:
  static void set_has_packetnum(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_state(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_solenoid1(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_solenoid2(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_solenoid3(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_solenoid4(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_highpressure(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_lowpressure1(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_lowpressure2(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_lowpressure3(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_lowpressurecommon(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_pneumatictemperature(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_coolanttankpressure(BrakeNodeToFc* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrakeNodeToFc::kPacketNumFieldNumber;
const int BrakeNodeToFc::kStateFieldNumber;
const int BrakeNodeToFc::kSolenoid1FieldNumber;
const int BrakeNodeToFc::kSolenoid2FieldNumber;
const int BrakeNodeToFc::kSolenoid3FieldNumber;
const int BrakeNodeToFc::kSolenoid4FieldNumber;
const int BrakeNodeToFc::kHighPressureFieldNumber;
const int BrakeNodeToFc::kLowPressure1FieldNumber;
const int BrakeNodeToFc::kLowPressure2FieldNumber;
const int BrakeNodeToFc::kLowPressure3FieldNumber;
const int BrakeNodeToFc::kLowPressureCommonFieldNumber;
const int BrakeNodeToFc::kPneumaticTemperatureFieldNumber;
const int BrakeNodeToFc::kCoolantTankPressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrakeNodeToFc::BrakeNodeToFc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrakeNodeToFc)
}
BrakeNodeToFc::BrakeNodeToFc(const BrakeNodeToFc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packetnum_, &from.packetnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&coolanttankpressure_) -
    reinterpret_cast<char*>(&packetnum_)) + sizeof(coolanttankpressure_));
  // @@protoc_insertion_point(copy_constructor:BrakeNodeToFc)
}

void BrakeNodeToFc::SharedCtor() {
  ::memset(&packetnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coolanttankpressure_) -
      reinterpret_cast<char*>(&packetnum_)) + sizeof(coolanttankpressure_));
}

BrakeNodeToFc::~BrakeNodeToFc() {
  // @@protoc_insertion_point(destructor:BrakeNodeToFc)
  SharedDtor();
}

void BrakeNodeToFc::SharedDtor() {
}

void BrakeNodeToFc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrakeNodeToFc& BrakeNodeToFc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BrakeNodeToFc_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void BrakeNodeToFc::Clear() {
// @@protoc_insertion_point(message_clear_start:BrakeNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&packetnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lowpressure1_) -
        reinterpret_cast<char*>(&packetnum_)) + sizeof(lowpressure1_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&lowpressure2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coolanttankpressure_) -
        reinterpret_cast<char*>(&lowpressure2_)) + sizeof(coolanttankpressure_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BrakeNodeToFc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BrakeNodeToFc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 packetNum = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_packetnum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .BrakeNodeStates state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::BrakeNodeStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_state(static_cast<::BrakeNodeStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool solenoid1 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_solenoid1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool solenoid2 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_solenoid2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool solenoid3 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_solenoid3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool solenoid4 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_solenoid4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required float highPressure = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_highpressure(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float lowPressure1 = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_lowpressure1(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float lowPressure2 = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_lowpressure2(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float lowPressure3 = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_lowpressure3(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float lowPressureCommon = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 93) goto handle_unusual;
        msg->set_lowpressurecommon(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float pneumaticTemperature = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 101) goto handle_unusual;
        msg->set_pneumatictemperature(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float coolantTankPressure = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 109) goto handle_unusual;
        msg->set_coolanttankpressure(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BrakeNodeToFc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrakeNodeToFc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 packetNum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_packetnum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .BrakeNodeStates state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BrakeNodeStates_IsValid(value)) {
            set_state(static_cast< ::BrakeNodeStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool solenoid1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_solenoid1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool solenoid2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_solenoid2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool solenoid3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_solenoid3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool solenoid4 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_solenoid4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solenoid4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float highPressure = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_highpressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &highpressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lowPressure1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_lowpressure1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpressure1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lowPressure2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_lowpressure2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpressure2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lowPressure3 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_lowpressure3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpressure3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lowPressureCommon = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (93 & 0xFF)) {
          HasBitSetters::set_has_lowpressurecommon(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lowpressurecommon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pneumaticTemperature = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (101 & 0xFF)) {
          HasBitSetters::set_has_pneumatictemperature(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pneumatictemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float coolantTankPressure = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (109 & 0xFF)) {
          HasBitSetters::set_has_coolanttankpressure(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coolanttankpressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrakeNodeToFc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrakeNodeToFc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BrakeNodeToFc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrakeNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetnum(), output);
  }

  // required .BrakeNodeStates state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required bool solenoid1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->solenoid1(), output);
  }

  // required bool solenoid2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->solenoid2(), output);
  }

  // required bool solenoid3 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->solenoid3(), output);
  }

  // required bool solenoid4 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->solenoid4(), output);
  }

  // required float highPressure = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->highpressure(), output);
  }

  // required float lowPressure1 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->lowpressure1(), output);
  }

  // required float lowPressure2 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->lowpressure2(), output);
  }

  // required float lowPressure3 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lowpressure3(), output);
  }

  // required float lowPressureCommon = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lowpressurecommon(), output);
  }

  // required float pneumaticTemperature = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pneumatictemperature(), output);
  }

  // required float coolantTankPressure = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->coolanttankpressure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrakeNodeToFc)
}

::google::protobuf::uint8* BrakeNodeToFc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrakeNodeToFc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 packetNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetnum(), target);
  }

  // required .BrakeNodeStates state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required bool solenoid1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->solenoid1(), target);
  }

  // required bool solenoid2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->solenoid2(), target);
  }

  // required bool solenoid3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->solenoid3(), target);
  }

  // required bool solenoid4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->solenoid4(), target);
  }

  // required float highPressure = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->highpressure(), target);
  }

  // required float lowPressure1 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->lowpressure1(), target);
  }

  // required float lowPressure2 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->lowpressure2(), target);
  }

  // required float lowPressure3 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lowpressure3(), target);
  }

  // required float lowPressureCommon = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lowpressurecommon(), target);
  }

  // required float pneumaticTemperature = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pneumatictemperature(), target);
  }

  // required float coolantTankPressure = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->coolanttankpressure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrakeNodeToFc)
  return target;
}

size_t BrakeNodeToFc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BrakeNodeToFc)
  size_t total_size = 0;

  if (has_packetnum()) {
    // required int32 packetNum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packetnum());
  }

  if (has_state()) {
    // required .BrakeNodeStates state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_solenoid1()) {
    // required bool solenoid1 = 3;
    total_size += 1 + 1;
  }

  if (has_solenoid2()) {
    // required bool solenoid2 = 4;
    total_size += 1 + 1;
  }

  if (has_solenoid3()) {
    // required bool solenoid3 = 5;
    total_size += 1 + 1;
  }

  if (has_solenoid4()) {
    // required bool solenoid4 = 6;
    total_size += 1 + 1;
  }

  if (has_highpressure()) {
    // required float highPressure = 7;
    total_size += 1 + 4;
  }

  if (has_lowpressure1()) {
    // required float lowPressure1 = 8;
    total_size += 1 + 4;
  }

  if (has_lowpressure2()) {
    // required float lowPressure2 = 9;
    total_size += 1 + 4;
  }

  if (has_lowpressure3()) {
    // required float lowPressure3 = 10;
    total_size += 1 + 4;
  }

  if (has_lowpressurecommon()) {
    // required float lowPressureCommon = 11;
    total_size += 1 + 4;
  }

  if (has_pneumatictemperature()) {
    // required float pneumaticTemperature = 12;
    total_size += 1 + 4;
  }

  if (has_coolanttankpressure()) {
    // required float coolantTankPressure = 13;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t BrakeNodeToFc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrakeNodeToFc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required int32 packetNum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packetnum());

    // required .BrakeNodeStates state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required bool solenoid1 = 3;
    total_size += 1 + 1;

    // required bool solenoid2 = 4;
    total_size += 1 + 1;

    // required bool solenoid3 = 5;
    total_size += 1 + 1;

    // required bool solenoid4 = 6;
    total_size += 1 + 1;

    // required float highPressure = 7;
    total_size += 1 + 4;

    // required float lowPressure1 = 8;
    total_size += 1 + 4;

    // required float lowPressure2 = 9;
    total_size += 1 + 4;

    // required float lowPressure3 = 10;
    total_size += 1 + 4;

    // required float lowPressureCommon = 11;
    total_size += 1 + 4;

    // required float pneumaticTemperature = 12;
    total_size += 1 + 4;

    // required float coolantTankPressure = 13;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrakeNodeToFc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrakeNodeToFc)
  GOOGLE_DCHECK_NE(&from, this);
  const BrakeNodeToFc* source =
      ::google::protobuf::DynamicCastToGenerated<BrakeNodeToFc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrakeNodeToFc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrakeNodeToFc)
    MergeFrom(*source);
  }
}

void BrakeNodeToFc::MergeFrom(const BrakeNodeToFc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrakeNodeToFc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      packetnum_ = from.packetnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      solenoid1_ = from.solenoid1_;
    }
    if (cached_has_bits & 0x00000008u) {
      solenoid2_ = from.solenoid2_;
    }
    if (cached_has_bits & 0x00000010u) {
      solenoid3_ = from.solenoid3_;
    }
    if (cached_has_bits & 0x00000020u) {
      solenoid4_ = from.solenoid4_;
    }
    if (cached_has_bits & 0x00000040u) {
      highpressure_ = from.highpressure_;
    }
    if (cached_has_bits & 0x00000080u) {
      lowpressure1_ = from.lowpressure1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      lowpressure2_ = from.lowpressure2_;
    }
    if (cached_has_bits & 0x00000200u) {
      lowpressure3_ = from.lowpressure3_;
    }
    if (cached_has_bits & 0x00000400u) {
      lowpressurecommon_ = from.lowpressurecommon_;
    }
    if (cached_has_bits & 0x00000800u) {
      pneumatictemperature_ = from.pneumatictemperature_;
    }
    if (cached_has_bits & 0x00001000u) {
      coolanttankpressure_ = from.coolanttankpressure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BrakeNodeToFc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrakeNodeToFc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrakeNodeToFc::CopyFrom(const BrakeNodeToFc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrakeNodeToFc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrakeNodeToFc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void BrakeNodeToFc::Swap(BrakeNodeToFc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrakeNodeToFc::InternalSwap(BrakeNodeToFc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(packetnum_, other->packetnum_);
  swap(state_, other->state_);
  swap(solenoid1_, other->solenoid1_);
  swap(solenoid2_, other->solenoid2_);
  swap(solenoid3_, other->solenoid3_);
  swap(solenoid4_, other->solenoid4_);
  swap(highpressure_, other->highpressure_);
  swap(lowpressure1_, other->lowpressure1_);
  swap(lowpressure2_, other->lowpressure2_);
  swap(lowpressure3_, other->lowpressure3_);
  swap(lowpressurecommon_, other->lowpressurecommon_);
  swap(pneumatictemperature_, other->pneumatictemperature_);
  swap(coolanttankpressure_, other->coolanttankpressure_);
}

::google::protobuf::Metadata BrakeNodeToFc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void flightConfig::InitAsDefaultInstance() {
}
class flightConfig::HasBitSetters {
 public:
  static void set_has_retrievaltimeout(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_maxflighttime(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_motorspeed(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_pdstelemetryport(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_commandport(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_flightlength(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_heartbeattimeout(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_poddriver(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_controllaptopipaddr(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_brakenodeport(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_brakenodetimeout(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_brakenodeserverport(flightConfig* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
};

::google::protobuf::internal::ExplicitlyConstructed<::std::string> flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flightConfig::kRetrievalTimeoutFieldNumber;
const int flightConfig::kMaxFlightTimeFieldNumber;
const int flightConfig::kMotorSpeedFieldNumber;
const int flightConfig::kPdsTelemetryPortFieldNumber;
const int flightConfig::kCommandPortFieldNumber;
const int flightConfig::kFlightLengthFieldNumber;
const int flightConfig::kHeartbeatTimeoutFieldNumber;
const int flightConfig::kPodDriverFieldNumber;
const int flightConfig::kControlLaptopIpAddrFieldNumber;
const int flightConfig::kBrakeNodePortFieldNumber;
const int flightConfig::kBrakeNodeTimeoutFieldNumber;
const int flightConfig::kBrakeNodeServerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flightConfig::flightConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flightConfig)
}
flightConfig::flightConfig(const flightConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  poddriver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_poddriver()) {
    poddriver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poddriver_);
  }
  controllaptopipaddr_.UnsafeSetDefault(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get());
  if (from.has_controllaptopipaddr()) {
    controllaptopipaddr_.AssignWithDefault(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get(), from.controllaptopipaddr_);
  }
  ::memcpy(&maxflighttime_, &from.maxflighttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&brakenodeserverport_) -
    reinterpret_cast<char*>(&maxflighttime_)) + sizeof(brakenodeserverport_));
  // @@protoc_insertion_point(copy_constructor:flightConfig)
}

void flightConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_flightConfig_Paradigm_2eproto.base);
  poddriver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controllaptopipaddr_.UnsafeSetDefault(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get());
  ::memset(&maxflighttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retrievaltimeout_) -
      reinterpret_cast<char*>(&maxflighttime_)) + sizeof(retrievaltimeout_));
  heartbeattimeout_ = 10000;
  pdstelemetryport_ = 7000;
  commandport_ = 6000;
  brakenodeport_ = PROTOBUF_ULONGLONG(5555);
  brakenodetimeout_ = PROTOBUF_ULONGLONG(4000);
  brakenodeserverport_ = PROTOBUF_ULONGLONG(5555);
}

flightConfig::~flightConfig() {
  // @@protoc_insertion_point(destructor:flightConfig)
  SharedDtor();
}

void flightConfig::SharedDtor() {
  poddriver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  controllaptopipaddr_.DestroyNoArena(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get());
}

void flightConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flightConfig& flightConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_flightConfig_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void flightConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:flightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      poddriver_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      controllaptopipaddr_.UnsafeMutablePointer()->assign(*&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get());
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&maxflighttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retrievaltimeout_) -
        reinterpret_cast<char*>(&maxflighttime_)) + sizeof(retrievaltimeout_));
    heartbeattimeout_ = 10000;
    pdstelemetryport_ = 7000;
  }
  if (cached_has_bits & 0x00000f00u) {
    commandport_ = 6000;
    brakenodeport_ = PROTOBUF_ULONGLONG(5555);
    brakenodetimeout_ = PROTOBUF_ULONGLONG(4000);
    brakenodeserverport_ = PROTOBUF_ULONGLONG(5555);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* flightConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<flightConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 retrievalTimeout = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_retrievaltimeout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 maxFlightTime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_maxflighttime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 motorSpeed = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_motorspeed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pdsTelemetryPort = 4 [default = 7000];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_pdstelemetryport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 commandPort = 5 [default = 6000];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_commandport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 flightLength = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_flightlength(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 heartbeatTimeout = 7 [default = 10000];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_heartbeattimeout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string podDriver = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flightConfig.podDriver");
        object = msg->mutable_poddriver();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string controlLaptopIpAddr = 9 [default = "192.168.1.100"];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flightConfig.controlLaptopIpAddr");
        object = msg->mutable_controllaptopipaddr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 brakeNodePort = 10 [default = 5555];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_brakenodeport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 brakeNodeTimeout = 11 [default = 4000];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_brakenodetimeout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 brakeNodeServerPort = 12 [default = 5555];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_brakenodeserverport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool flightConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flightConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retrievalTimeout = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_retrievaltimeout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrievaltimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 maxFlightTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_maxflighttime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxflighttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 motorSpeed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_motorspeed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &motorspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pdsTelemetryPort = 4 [default = 7000];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_pdstelemetryport(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pdstelemetryport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 commandPort = 5 [default = 6000];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_commandport(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commandport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 flightLength = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_flightlength(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flightlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 heartbeatTimeout = 7 [default = 10000];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_heartbeattimeout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeattimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string podDriver = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poddriver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->poddriver().data(), static_cast<int>(this->poddriver().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flightConfig.podDriver");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string controlLaptopIpAddr = 9 [default = "192.168.1.100"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_controllaptopipaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->controllaptopipaddr().data(), static_cast<int>(this->controllaptopipaddr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flightConfig.controlLaptopIpAddr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 brakeNodePort = 10 [default = 5555];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_brakenodeport(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &brakenodeport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 brakeNodeTimeout = 11 [default = 4000];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_brakenodetimeout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &brakenodetimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 brakeNodeServerPort = 12 [default = 5555];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_brakenodeserverport(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &brakenodeserverport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flightConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flightConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void flightConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retrievalTimeout = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retrievaltimeout(), output);
  }

  // optional uint64 maxFlightTime = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->maxflighttime(), output);
  }

  // optional uint64 motorSpeed = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->motorspeed(), output);
  }

  // optional int32 pdsTelemetryPort = 4 [default = 7000];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pdstelemetryport(), output);
  }

  // optional int32 commandPort = 5 [default = 6000];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->commandport(), output);
  }

  // optional uint64 flightLength = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->flightlength(), output);
  }

  // optional int32 heartbeatTimeout = 7 [default = 10000];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->heartbeattimeout(), output);
  }

  // optional string podDriver = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poddriver().data(), static_cast<int>(this->poddriver().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flightConfig.podDriver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->poddriver(), output);
  }

  // optional string controlLaptopIpAddr = 9 [default = "192.168.1.100"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controllaptopipaddr().data(), static_cast<int>(this->controllaptopipaddr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flightConfig.controlLaptopIpAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->controllaptopipaddr(), output);
  }

  // optional uint64 brakeNodePort = 10 [default = 5555];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->brakenodeport(), output);
  }

  // optional uint64 brakeNodeTimeout = 11 [default = 4000];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->brakenodetimeout(), output);
  }

  // optional uint64 brakeNodeServerPort = 12 [default = 5555];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->brakenodeserverport(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flightConfig)
}

::google::protobuf::uint8* flightConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retrievalTimeout = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retrievaltimeout(), target);
  }

  // optional uint64 maxFlightTime = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->maxflighttime(), target);
  }

  // optional uint64 motorSpeed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->motorspeed(), target);
  }

  // optional int32 pdsTelemetryPort = 4 [default = 7000];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pdstelemetryport(), target);
  }

  // optional int32 commandPort = 5 [default = 6000];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->commandport(), target);
  }

  // optional uint64 flightLength = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->flightlength(), target);
  }

  // optional int32 heartbeatTimeout = 7 [default = 10000];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->heartbeattimeout(), target);
  }

  // optional string podDriver = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poddriver().data(), static_cast<int>(this->poddriver().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flightConfig.podDriver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->poddriver(), target);
  }

  // optional string controlLaptopIpAddr = 9 [default = "192.168.1.100"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->controllaptopipaddr().data(), static_cast<int>(this->controllaptopipaddr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flightConfig.controlLaptopIpAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->controllaptopipaddr(), target);
  }

  // optional uint64 brakeNodePort = 10 [default = 5555];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->brakenodeport(), target);
  }

  // optional uint64 brakeNodeTimeout = 11 [default = 4000];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->brakenodetimeout(), target);
  }

  // optional uint64 brakeNodeServerPort = 12 [default = 5555];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->brakenodeserverport(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flightConfig)
  return target;
}

size_t flightConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flightConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string podDriver = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poddriver());
    }

    // optional string controlLaptopIpAddr = 9 [default = "192.168.1.100"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->controllaptopipaddr());
    }

    // optional uint64 maxFlightTime = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxflighttime());
    }

    // optional uint64 motorSpeed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->motorspeed());
    }

    // optional uint64 flightLength = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flightlength());
    }

    // optional uint32 retrievalTimeout = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retrievaltimeout());
    }

    // optional int32 heartbeatTimeout = 7 [default = 10000];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartbeattimeout());
    }

    // optional int32 pdsTelemetryPort = 4 [default = 7000];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pdstelemetryport());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 commandPort = 5 [default = 6000];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commandport());
    }

    // optional uint64 brakeNodePort = 10 [default = 5555];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->brakenodeport());
    }

    // optional uint64 brakeNodeTimeout = 11 [default = 4000];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->brakenodetimeout());
    }

    // optional uint64 brakeNodeServerPort = 12 [default = 5555];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->brakenodeserverport());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flightConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const flightConfig* source =
      ::google::protobuf::DynamicCastToGenerated<flightConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flightConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flightConfig)
    MergeFrom(*source);
  }
}

void flightConfig::MergeFrom(const flightConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      poddriver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poddriver_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      controllaptopipaddr_.AssignWithDefault(&::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get(), from.controllaptopipaddr_);
    }
    if (cached_has_bits & 0x00000004u) {
      maxflighttime_ = from.maxflighttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      motorspeed_ = from.motorspeed_;
    }
    if (cached_has_bits & 0x00000010u) {
      flightlength_ = from.flightlength_;
    }
    if (cached_has_bits & 0x00000020u) {
      retrievaltimeout_ = from.retrievaltimeout_;
    }
    if (cached_has_bits & 0x00000040u) {
      heartbeattimeout_ = from.heartbeattimeout_;
    }
    if (cached_has_bits & 0x00000080u) {
      pdstelemetryport_ = from.pdstelemetryport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      commandport_ = from.commandport_;
    }
    if (cached_has_bits & 0x00000200u) {
      brakenodeport_ = from.brakenodeport_;
    }
    if (cached_has_bits & 0x00000400u) {
      brakenodetimeout_ = from.brakenodetimeout_;
    }
    if (cached_has_bits & 0x00000800u) {
      brakenodeserverport_ = from.brakenodeserverport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flightConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flightConfig::CopyFrom(const flightConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flightConfig::IsInitialized() const {
  return true;
}

void flightConfig::Swap(flightConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flightConfig::InternalSwap(flightConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  poddriver_.Swap(&other->poddriver_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  controllaptopipaddr_.Swap(&other->controllaptopipaddr_, &::flightConfig::_i_give_permission_to_break_this_code_default_controllaptopipaddr_.get(),
    GetArenaNoVirtual());
  swap(maxflighttime_, other->maxflighttime_);
  swap(motorspeed_, other->motorspeed_);
  swap(flightlength_, other->flightlength_);
  swap(retrievaltimeout_, other->retrievaltimeout_);
  swap(heartbeattimeout_, other->heartbeattimeout_);
  swap(pdstelemetryport_, other->pdstelemetryport_);
  swap(commandport_, other->commandport_);
  swap(brakenodeport_, other->brakenodeport_);
  swap(brakenodetimeout_, other->brakenodetimeout_);
  swap(brakenodeserverport_, other->brakenodeserverport_);
}

::google::protobuf::Metadata flightConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DefaultFcToNode::InitAsDefaultInstance() {
}
class DefaultFcToNode::HasBitSetters {
 public:
  static void set_has_podstate(DefaultFcToNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefaultFcToNode::kPodStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefaultFcToNode::DefaultFcToNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DefaultFcToNode)
}
DefaultFcToNode::DefaultFcToNode(const DefaultFcToNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  podstate_ = from.podstate_;
  // @@protoc_insertion_point(copy_constructor:DefaultFcToNode)
}

void DefaultFcToNode::SharedCtor() {
  podstate_ = 0;
}

DefaultFcToNode::~DefaultFcToNode() {
  // @@protoc_insertion_point(destructor:DefaultFcToNode)
  SharedDtor();
}

void DefaultFcToNode::SharedDtor() {
}

void DefaultFcToNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultFcToNode& DefaultFcToNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DefaultFcToNode_Paradigm_2eproto.base);
  return *internal_default_instance();
}


void DefaultFcToNode::Clear() {
// @@protoc_insertion_point(message_clear_start:DefaultFcToNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  podstate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DefaultFcToNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DefaultFcToNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .PodStates podState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PodStates_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_podstate(static_cast<::PodStates>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DefaultFcToNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DefaultFcToNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PodStates podState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PodStates_IsValid(value)) {
            set_podstate(static_cast< ::PodStates >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DefaultFcToNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DefaultFcToNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DefaultFcToNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DefaultFcToNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PodStates podState = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->podstate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DefaultFcToNode)
}

::google::protobuf::uint8* DefaultFcToNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DefaultFcToNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PodStates podState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->podstate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DefaultFcToNode)
  return target;
}

size_t DefaultFcToNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DefaultFcToNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PodStates podState = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->podstate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultFcToNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DefaultFcToNode)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultFcToNode* source =
      ::google::protobuf::DynamicCastToGenerated<DefaultFcToNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DefaultFcToNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DefaultFcToNode)
    MergeFrom(*source);
  }
}

void DefaultFcToNode::MergeFrom(const DefaultFcToNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DefaultFcToNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_podstate()) {
    set_podstate(from.podstate());
  }
}

void DefaultFcToNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DefaultFcToNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultFcToNode::CopyFrom(const DefaultFcToNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DefaultFcToNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultFcToNode::IsInitialized() const {
  return true;
}

void DefaultFcToNode::Swap(DefaultFcToNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefaultFcToNode::InternalSwap(DefaultFcToNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(podstate_, other->podstate_);
}

::google::protobuf::Metadata DefaultFcToNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Paradigm_2eproto);
  return ::file_level_metadata_Paradigm_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::PodCommand* Arena::CreateMaybeMessage< ::PodCommand >(Arena* arena) {
  return Arena::CreateInternal< ::PodCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::Telemetry* Arena::CreateMaybeMessage< ::Telemetry >(Arena* arena) {
  return Arena::CreateInternal< ::Telemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::FcToBrakeNode* Arena::CreateMaybeMessage< ::FcToBrakeNode >(Arena* arena) {
  return Arena::CreateInternal< ::FcToBrakeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::FcToLvdcNode* Arena::CreateMaybeMessage< ::FcToLvdcNode >(Arena* arena) {
  return Arena::CreateInternal< ::FcToLvdcNode >(arena);
}
template<> PROTOBUF_NOINLINE ::DtsNodeToFc* Arena::CreateMaybeMessage< ::DtsNodeToFc >(Arena* arena) {
  return Arena::CreateInternal< ::DtsNodeToFc >(arena);
}
template<> PROTOBUF_NOINLINE ::EnclosureNodeToFc* Arena::CreateMaybeMessage< ::EnclosureNodeToFc >(Arena* arena) {
  return Arena::CreateInternal< ::EnclosureNodeToFc >(arena);
}
template<> PROTOBUF_NOINLINE ::LvdcNodeToFc* Arena::CreateMaybeMessage< ::LvdcNodeToFc >(Arena* arena) {
  return Arena::CreateInternal< ::LvdcNodeToFc >(arena);
}
template<> PROTOBUF_NOINLINE ::BrakeNodeToFc* Arena::CreateMaybeMessage< ::BrakeNodeToFc >(Arena* arena) {
  return Arena::CreateInternal< ::BrakeNodeToFc >(arena);
}
template<> PROTOBUF_NOINLINE ::flightConfig* Arena::CreateMaybeMessage< ::flightConfig >(Arena* arena) {
  return Arena::CreateInternal< ::flightConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::DefaultFcToNode* Arena::CreateMaybeMessage< ::DefaultFcToNode >(Arena* arena) {
  return Arena::CreateInternal< ::DefaultFcToNode >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

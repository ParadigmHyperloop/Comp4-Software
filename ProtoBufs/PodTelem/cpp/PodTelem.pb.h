// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PodTelem.proto

#ifndef PROTOBUF_INCLUDED_PodTelem_2eproto
#define PROTOBUF_INCLUDED_PodTelem_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "States.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PodTelem_2eproto 

namespace protobuf_PodTelem_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_PodTelem_2eproto
namespace pds {
class telemetry;
class telemetryDefaultTypeInternal;
extern telemetryDefaultTypeInternal _telemetry_default_instance_;
}  // namespace pds
namespace google {
namespace protobuf {
template<> ::pds::telemetry* Arena::CreateMaybeMessage<::pds::telemetry>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pds {

// ===================================================================

class telemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pds.telemetry) */ {
 public:
  telemetry();
  virtual ~telemetry();

  telemetry(const telemetry& from);

  inline telemetry& operator=(const telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  telemetry(telemetry&& from) noexcept
    : telemetry() {
    *this = ::std::move(from);
  }

  inline telemetry& operator=(telemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const telemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const telemetry* internal_default_instance() {
    return reinterpret_cast<const telemetry*>(
               &_telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(telemetry* other);
  friend void swap(telemetry& a, telemetry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline telemetry* New() const final {
    return CreateMaybeMessage<telemetry>(NULL);
  }

  telemetry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<telemetry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const telemetry& from);
  void MergeFrom(const telemetry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(telemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 heartbeatFlags = 8;
  int heartbeatflags_size() const;
  void clear_heartbeatflags();
  static const int kHeartbeatFlagsFieldNumber = 8;
  ::google::protobuf::int32 heartbeatflags(int index) const;
  void set_heartbeatflags(int index, ::google::protobuf::int32 value);
  void add_heartbeatflags(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      heartbeatflags() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_heartbeatflags();

  // repeated int32 batteryPackVoltages = 26;
  int batterypackvoltages_size() const;
  void clear_batterypackvoltages();
  static const int kBatteryPackVoltagesFieldNumber = 26;
  ::google::protobuf::int32 batterypackvoltages(int index) const;
  void set_batterypackvoltages(int index, ::google::protobuf::int32 value);
  void add_batterypackvoltages(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      batterypackvoltages() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_batterypackvoltages();

  // repeated int32 batteryPackCurrent = 27;
  int batterypackcurrent_size() const;
  void clear_batterypackcurrent();
  static const int kBatteryPackCurrentFieldNumber = 27;
  ::google::protobuf::int32 batterypackcurrent(int index) const;
  void set_batterypackcurrent(int index, ::google::protobuf::int32 value);
  void add_batterypackcurrent(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      batterypackcurrent() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_batterypackcurrent();

  // repeated int32 batteryCellTemperatures = 28;
  int batterycelltemperatures_size() const;
  void clear_batterycelltemperatures();
  static const int kBatteryCellTemperaturesFieldNumber = 28;
  ::google::protobuf::int32 batterycelltemperatures(int index) const;
  void set_batterycelltemperatures(int index, ::google::protobuf::int32 value);
  void add_batterycelltemperatures(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      batterycelltemperatures() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_batterycelltemperatures();

  // repeated int32 heartbeatValues = 71;
  int heartbeatvalues_size() const;
  void clear_heartbeatvalues();
  static const int kHeartbeatValuesFieldNumber = 71;
  ::google::protobuf::int32 heartbeatvalues(int index) const;
  void set_heartbeatvalues(int index, ::google::protobuf::int32 value);
  void add_heartbeatvalues(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      heartbeatvalues() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_heartbeatvalues();

  // optional .PodStates podState = 1;
  bool has_podstate() const;
  void clear_podstate();
  static const int kPodStateFieldNumber = 1;
  ::PodStates podstate() const;
  void set_podstate(::PodStates value);

  // optional .BrakeNodeStates breakNodeState = 2;
  bool has_breaknodestate() const;
  void clear_breaknodestate();
  static const int kBreakNodeStateFieldNumber = 2;
  ::BrakeNodeStates breaknodestate() const;
  void set_breaknodestate(::BrakeNodeStates value);

  // optional .MotorStates motorState = 3;
  bool has_motorstate() const;
  void clear_motorstate();
  static const int kMotorStateFieldNumber = 3;
  ::MotorStates motorstate() const;
  void set_motorstate(::MotorStates value);

  // optional .ControlsInterfaceStates controlsInterfaceState = 4;
  bool has_controlsinterfacestate() const;
  void clear_controlsinterfacestate();
  static const int kControlsInterfaceStateFieldNumber = 4;
  ::ControlsInterfaceStates controlsinterfacestate() const;
  void set_controlsinterfacestate(::ControlsInterfaceStates value);

  // optional .InverterStates inverterState = 5;
  bool has_inverterstate() const;
  void clear_inverterstate();
  static const int kInverterStateFieldNumber = 5;
  ::InverterStates inverterstate() const;
  void set_inverterstate(::InverterStates value);

  // optional int32 missionTime = 6;
  bool has_missiontime() const;
  void clear_missiontime();
  static const int kMissionTimeFieldNumber = 6;
  ::google::protobuf::int32 missiontime() const;
  void set_missiontime(::google::protobuf::int32 value);

  // optional int32 flightTime = 7;
  bool has_flighttime() const;
  void clear_flighttime();
  static const int kFlightTimeFieldNumber = 7;
  ::google::protobuf::int32 flighttime() const;
  void set_flighttime(::google::protobuf::int32 value);

  // optional int32 podPosition = 9;
  bool has_podposition() const;
  void clear_podposition();
  static const int kPodPositionFieldNumber = 9;
  ::google::protobuf::int32 podposition() const;
  void set_podposition(::google::protobuf::int32 value);

  // optional int32 podVelocity = 10;
  bool has_podvelocity() const;
  void clear_podvelocity();
  static const int kPodVelocityFieldNumber = 10;
  ::google::protobuf::int32 podvelocity() const;
  void set_podvelocity(::google::protobuf::int32 value);

  // optional int32 podAccelerationX = 11;
  bool has_podaccelerationx() const;
  void clear_podaccelerationx();
  static const int kPodAccelerationXFieldNumber = 11;
  ::google::protobuf::int32 podaccelerationx() const;
  void set_podaccelerationx(::google::protobuf::int32 value);

  // optional int32 podAccelerationY = 12;
  bool has_podaccelerationy() const;
  void clear_podaccelerationy();
  static const int kPodAccelerationYFieldNumber = 12;
  ::google::protobuf::int32 podaccelerationy() const;
  void set_podaccelerationy(::google::protobuf::int32 value);

  // optional int32 podAccelerationZ = 13;
  bool has_podaccelerationz() const;
  void clear_podaccelerationz();
  static const int kPodAccelerationZFieldNumber = 13;
  ::google::protobuf::int32 podaccelerationz() const;
  void set_podaccelerationz(::google::protobuf::int32 value);

  // optional int32 imuVelocity = 14;
  bool has_imuvelocity() const;
  void clear_imuvelocity();
  static const int kImuVelocityFieldNumber = 14;
  ::google::protobuf::int32 imuvelocity() const;
  void set_imuvelocity(::google::protobuf::int32 value);

  // optional int32 imuAccelerationX = 15;
  bool has_imuaccelerationx() const;
  void clear_imuaccelerationx();
  static const int kImuAccelerationXFieldNumber = 15;
  ::google::protobuf::int32 imuaccelerationx() const;
  void set_imuaccelerationx(::google::protobuf::int32 value);

  // optional int32 tachometerVelocity = 16;
  bool has_tachometervelocity() const;
  void clear_tachometervelocity();
  static const int kTachometerVelocityFieldNumber = 16;
  ::google::protobuf::int32 tachometervelocity() const;
  void set_tachometervelocity(::google::protobuf::int32 value);

  // optional int32 resolverVelocity = 17;
  bool has_resolvervelocity() const;
  void clear_resolvervelocity();
  static const int kResolverVelocityFieldNumber = 17;
  ::google::protobuf::int32 resolvervelocity() const;
  void set_resolvervelocity(::google::protobuf::int32 value);

  // optional int32 inverterTemperature1 = 18;
  bool has_invertertemperature1() const;
  void clear_invertertemperature1();
  static const int kInverterTemperature1FieldNumber = 18;
  ::google::protobuf::int32 invertertemperature1() const;
  void set_invertertemperature1(::google::protobuf::int32 value);

  // optional int32 inverterTemperature2 = 19;
  bool has_invertertemperature2() const;
  void clear_invertertemperature2();
  static const int kInverterTemperature2FieldNumber = 19;
  ::google::protobuf::int32 invertertemperature2() const;
  void set_invertertemperature2(::google::protobuf::int32 value);

  // optional int32 inverterTemperature3 = 20;
  bool has_invertertemperature3() const;
  void clear_invertertemperature3();
  static const int kInverterTemperature3FieldNumber = 20;
  ::google::protobuf::int32 invertertemperature3() const;
  void set_invertertemperature3(::google::protobuf::int32 value);

  // optional int32 motorCurrent = 21;
  bool has_motorcurrent() const;
  void clear_motorcurrent();
  static const int kMotorCurrentFieldNumber = 21;
  ::google::protobuf::int32 motorcurrent() const;
  void set_motorcurrent(::google::protobuf::int32 value);

  // optional int32 motorVoltage = 22;
  bool has_motorvoltage() const;
  void clear_motorvoltage();
  static const int kMotorVoltageFieldNumber = 22;
  ::google::protobuf::int32 motorvoltage() const;
  void set_motorvoltage(::google::protobuf::int32 value);

  // optional int32 inverterVoltages = 23;
  bool has_invertervoltages() const;
  void clear_invertervoltages();
  static const int kInverterVoltagesFieldNumber = 23;
  ::google::protobuf::int32 invertervoltages() const;
  void set_invertervoltages(::google::protobuf::int32 value);

  // optional int32 inverterCurrents = 24;
  bool has_invertercurrents() const;
  void clear_invertercurrents();
  static const int kInverterCurrentsFieldNumber = 24;
  ::google::protobuf::int32 invertercurrents() const;
  void set_invertercurrents(::google::protobuf::int32 value);

  // optional .BatteryManagementStates batteryManagementState = 25;
  bool has_batterymanagementstate() const;
  void clear_batterymanagementstate();
  static const int kBatteryManagementStateFieldNumber = 25;
  ::BatteryManagementStates batterymanagementstate() const;
  void set_batterymanagementstate(::BatteryManagementStates value);

  // optional int32 batteryPackMinimumVoltage = 29;
  bool has_batterypackminimumvoltage() const;
  void clear_batterypackminimumvoltage();
  static const int kBatteryPackMinimumVoltageFieldNumber = 29;
  ::google::protobuf::int32 batterypackminimumvoltage() const;
  void set_batterypackminimumvoltage(::google::protobuf::int32 value);

  // optional int32 batteryPackMaxVoltage = 30;
  bool has_batterypackmaxvoltage() const;
  void clear_batterypackmaxvoltage();
  static const int kBatteryPackMaxVoltageFieldNumber = 30;
  ::google::protobuf::int32 batterypackmaxvoltage() const;
  void set_batterypackmaxvoltage(::google::protobuf::int32 value);

  // optional .PodStates breakNodePerceivedPodState = 31;
  bool has_breaknodeperceivedpodstate() const;
  void clear_breaknodeperceivedpodstate();
  static const int kBreakNodePerceivedPodStateFieldNumber = 31;
  ::PodStates breaknodeperceivedpodstate() const;
  void set_breaknodeperceivedpodstate(::PodStates value);

  // optional bool sol1 = 32;
  bool has_sol1() const;
  void clear_sol1();
  static const int kSol1FieldNumber = 32;
  bool sol1() const;
  void set_sol1(bool value);

  // optional bool sol2 = 33;
  bool has_sol2() const;
  void clear_sol2();
  static const int kSol2FieldNumber = 33;
  bool sol2() const;
  void set_sol2(bool value);

  // optional bool sol3 = 34;
  bool has_sol3() const;
  void clear_sol3();
  static const int kSol3FieldNumber = 34;
  bool sol3() const;
  void set_sol3(bool value);

  // optional bool sol4 = 35;
  bool has_sol4() const;
  void clear_sol4();
  static const int kSol4FieldNumber = 35;
  bool sol4() const;
  void set_sol4(bool value);

  // optional bool sol5 = 36;
  bool has_sol5() const;
  void clear_sol5();
  static const int kSol5FieldNumber = 36;
  bool sol5() const;
  void set_sol5(bool value);

  // optional bool sol6 = 37;
  bool has_sol6() const;
  void clear_sol6();
  static const int kSol6FieldNumber = 37;
  bool sol6() const;
  void set_sol6(bool value);

  // optional int32 hp = 38;
  bool has_hp() const;
  void clear_hp();
  static const int kHpFieldNumber = 38;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // optional int32 lp1 = 39;
  bool has_lp1() const;
  void clear_lp1();
  static const int kLp1FieldNumber = 39;
  ::google::protobuf::int32 lp1() const;
  void set_lp1(::google::protobuf::int32 value);

  // optional int32 lp2 = 40;
  bool has_lp2() const;
  void clear_lp2();
  static const int kLp2FieldNumber = 40;
  ::google::protobuf::int32 lp2() const;
  void set_lp2(::google::protobuf::int32 value);

  // optional int32 lp3 = 41;
  bool has_lp3() const;
  void clear_lp3();
  static const int kLp3FieldNumber = 41;
  ::google::protobuf::int32 lp3() const;
  void set_lp3(::google::protobuf::int32 value);

  // optional int32 lp4 = 42;
  bool has_lp4() const;
  void clear_lp4();
  static const int kLp4FieldNumber = 42;
  ::google::protobuf::int32 lp4() const;
  void set_lp4(::google::protobuf::int32 value);

  // optional int32 pressureVesselTemperature = 43;
  bool has_pressurevesseltemperature() const;
  void clear_pressurevesseltemperature();
  static const int kPressureVesselTemperatureFieldNumber = 43;
  ::google::protobuf::int32 pressurevesseltemperature() const;
  void set_pressurevesseltemperature(::google::protobuf::int32 value);

  // optional int32 electronicsEnclosurePressure = 44;
  bool has_electronicsenclosurepressure() const;
  void clear_electronicsenclosurepressure();
  static const int kElectronicsEnclosurePressureFieldNumber = 44;
  ::google::protobuf::int32 electronicsenclosurepressure() const;
  void set_electronicsenclosurepressure(::google::protobuf::int32 value);

  // optional int32 railDisplacementX = 45;
  bool has_raildisplacementx() const;
  void clear_raildisplacementx();
  static const int kRailDisplacementXFieldNumber = 45;
  ::google::protobuf::int32 raildisplacementx() const;
  void set_raildisplacementx(::google::protobuf::int32 value);

  // optional int32 railDisplacementY = 46;
  bool has_raildisplacementy() const;
  void clear_raildisplacementy();
  static const int kRailDisplacementYFieldNumber = 46;
  ::google::protobuf::int32 raildisplacementy() const;
  void set_raildisplacementy(::google::protobuf::int32 value);

  // optional .RearNodeStates rearNodeState = 47;
  bool has_rearnodestate() const;
  void clear_rearnodestate();
  static const int kRearNodeStateFieldNumber = 47;
  ::RearNodeStates rearnodestate() const;
  void set_rearnodestate(::RearNodeStates value);

  // optional int32 tubePressure = 48;
  bool has_tubepressure() const;
  void clear_tubepressure();
  static const int kTubePressureFieldNumber = 48;
  ::google::protobuf::int32 tubepressure() const;
  void set_tubepressure(::google::protobuf::int32 value);

  // optional int32 coolantPressure1 = 49;
  bool has_coolantpressure1() const;
  void clear_coolantpressure1();
  static const int kCoolantPressure1FieldNumber = 49;
  ::google::protobuf::int32 coolantpressure1() const;
  void set_coolantpressure1(::google::protobuf::int32 value);

  // optional int32 coolantPressure2 = 50;
  bool has_coolantpressure2() const;
  void clear_coolantpressure2();
  static const int kCoolantPressure2FieldNumber = 50;
  ::google::protobuf::int32 coolantpressure2() const;
  void set_coolantpressure2(::google::protobuf::int32 value);

  // optional int32 coolantPressure3 = 51;
  bool has_coolantpressure3() const;
  void clear_coolantpressure3();
  static const int kCoolantPressure3FieldNumber = 51;
  ::google::protobuf::int32 coolantpressure3() const;
  void set_coolantpressure3(::google::protobuf::int32 value);

  // optional int32 coolantTemperature = 52;
  bool has_coolanttemperature() const;
  void clear_coolanttemperature();
  static const int kCoolantTemperatureFieldNumber = 52;
  ::google::protobuf::int32 coolanttemperature() const;
  void set_coolanttemperature(::google::protobuf::int32 value);

  // optional int32 railTemperature = 53;
  bool has_railtemperature() const;
  void clear_railtemperature();
  static const int kRailTemperatureFieldNumber = 53;
  ::google::protobuf::int32 railtemperature() const;
  void set_railtemperature(::google::protobuf::int32 value);

  // optional .LvdcNodeStates lvdcNodeState = 54;
  bool has_lvdcnodestate() const;
  void clear_lvdcnodestate();
  static const int kLvdcNodeStateFieldNumber = 54;
  ::LvdcNodeStates lvdcnodestate() const;
  void set_lvdcnodestate(::LvdcNodeStates value);

  // optional int32 pack1Voltage = 55;
  bool has_pack1voltage() const;
  void clear_pack1voltage();
  static const int kPack1VoltageFieldNumber = 55;
  ::google::protobuf::int32 pack1voltage() const;
  void set_pack1voltage(::google::protobuf::int32 value);

  // optional int32 pack2Voltage = 56;
  bool has_pack2voltage() const;
  void clear_pack2voltage();
  static const int kPack2VoltageFieldNumber = 56;
  ::google::protobuf::int32 pack2voltage() const;
  void set_pack2voltage(::google::protobuf::int32 value);

  // optional int32 pack1Current = 57;
  bool has_pack1current() const;
  void clear_pack1current();
  static const int kPack1CurrentFieldNumber = 57;
  ::google::protobuf::int32 pack1current() const;
  void set_pack1current(::google::protobuf::int32 value);

  // optional int32 pack2Current = 58;
  bool has_pack2current() const;
  void clear_pack2current();
  static const int kPack2CurrentFieldNumber = 58;
  ::google::protobuf::int32 pack2current() const;
  void set_pack2current(::google::protobuf::int32 value);

  // optional int32 rail1Voltage = 59;
  bool has_rail1voltage() const;
  void clear_rail1voltage();
  static const int kRail1VoltageFieldNumber = 59;
  ::google::protobuf::int32 rail1voltage() const;
  void set_rail1voltage(::google::protobuf::int32 value);

  // optional int32 rail2Voltage = 60;
  bool has_rail2voltage() const;
  void clear_rail2voltage();
  static const int kRail2VoltageFieldNumber = 60;
  ::google::protobuf::int32 rail2voltage() const;
  void set_rail2voltage(::google::protobuf::int32 value);

  // optional int32 rail3Voltage = 61;
  bool has_rail3voltage() const;
  void clear_rail3voltage();
  static const int kRail3VoltageFieldNumber = 61;
  ::google::protobuf::int32 rail3voltage() const;
  void set_rail3voltage(::google::protobuf::int32 value);

  // optional int32 rail4Voltage = 62;
  bool has_rail4voltage() const;
  void clear_rail4voltage();
  static const int kRail4VoltageFieldNumber = 62;
  ::google::protobuf::int32 rail4voltage() const;
  void set_rail4voltage(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor1 = 63;
  bool has_railcurrentsensor1() const;
  void clear_railcurrentsensor1();
  static const int kRailCurrentSensor1FieldNumber = 63;
  ::google::protobuf::int32 railcurrentsensor1() const;
  void set_railcurrentsensor1(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor2 = 64;
  bool has_railcurrentsensor2() const;
  void clear_railcurrentsensor2();
  static const int kRailCurrentSensor2FieldNumber = 64;
  ::google::protobuf::int32 railcurrentsensor2() const;
  void set_railcurrentsensor2(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor3 = 65;
  bool has_railcurrentsensor3() const;
  void clear_railcurrentsensor3();
  static const int kRailCurrentSensor3FieldNumber = 65;
  ::google::protobuf::int32 railcurrentsensor3() const;
  void set_railcurrentsensor3(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor4 = 66;
  bool has_railcurrentsensor4() const;
  void clear_railcurrentsensor4();
  static const int kRailCurrentSensor4FieldNumber = 66;
  ::google::protobuf::int32 railcurrentsensor4() const;
  void set_railcurrentsensor4(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor5 = 67;
  bool has_railcurrentsensor5() const;
  void clear_railcurrentsensor5();
  static const int kRailCurrentSensor5FieldNumber = 67;
  ::google::protobuf::int32 railcurrentsensor5() const;
  void set_railcurrentsensor5(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor6 = 68;
  bool has_railcurrentsensor6() const;
  void clear_railcurrentsensor6();
  static const int kRailCurrentSensor6FieldNumber = 68;
  ::google::protobuf::int32 railcurrentsensor6() const;
  void set_railcurrentsensor6(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor7 = 69;
  bool has_railcurrentsensor7() const;
  void clear_railcurrentsensor7();
  static const int kRailCurrentSensor7FieldNumber = 69;
  ::google::protobuf::int32 railcurrentsensor7() const;
  void set_railcurrentsensor7(::google::protobuf::int32 value);

  // optional int32 railCurrentSensor8 = 70;
  bool has_railcurrentsensor8() const;
  void clear_railcurrentsensor8();
  static const int kRailCurrentSensor8FieldNumber = 70;
  ::google::protobuf::int32 railcurrentsensor8() const;
  void set_railcurrentsensor8(::google::protobuf::int32 value);

  // optional int32 railVoltageFlag = 72;
  bool has_railvoltageflag() const;
  void clear_railvoltageflag();
  static const int kRailVoltageFlagFieldNumber = 72;
  ::google::protobuf::int32 railvoltageflag() const;
  void set_railvoltageflag(::google::protobuf::int32 value);

  // optional int32 railCurrentFlag = 73;
  bool has_railcurrentflag() const;
  void clear_railcurrentflag();
  static const int kRailCurrentFlagFieldNumber = 73;
  ::google::protobuf::int32 railcurrentflag() const;
  void set_railcurrentflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pds.telemetry)
 private:
  void set_has_podstate();
  void clear_has_podstate();
  void set_has_breaknodestate();
  void clear_has_breaknodestate();
  void set_has_motorstate();
  void clear_has_motorstate();
  void set_has_controlsinterfacestate();
  void clear_has_controlsinterfacestate();
  void set_has_inverterstate();
  void clear_has_inverterstate();
  void set_has_lvdcnodestate();
  void clear_has_lvdcnodestate();
  void set_has_batterymanagementstate();
  void clear_has_batterymanagementstate();
  void set_has_breaknodeperceivedpodstate();
  void clear_has_breaknodeperceivedpodstate();
  void set_has_rearnodestate();
  void clear_has_rearnodestate();
  void set_has_missiontime();
  void clear_has_missiontime();
  void set_has_flighttime();
  void clear_has_flighttime();
  void set_has_podposition();
  void clear_has_podposition();
  void set_has_podvelocity();
  void clear_has_podvelocity();
  void set_has_podaccelerationx();
  void clear_has_podaccelerationx();
  void set_has_podaccelerationy();
  void clear_has_podaccelerationy();
  void set_has_podaccelerationz();
  void clear_has_podaccelerationz();
  void set_has_imuvelocity();
  void clear_has_imuvelocity();
  void set_has_imuaccelerationx();
  void clear_has_imuaccelerationx();
  void set_has_tachometervelocity();
  void clear_has_tachometervelocity();
  void set_has_resolvervelocity();
  void clear_has_resolvervelocity();
  void set_has_invertertemperature1();
  void clear_has_invertertemperature1();
  void set_has_invertertemperature2();
  void clear_has_invertertemperature2();
  void set_has_invertertemperature3();
  void clear_has_invertertemperature3();
  void set_has_motorcurrent();
  void clear_has_motorcurrent();
  void set_has_motorvoltage();
  void clear_has_motorvoltage();
  void set_has_invertervoltages();
  void clear_has_invertervoltages();
  void set_has_invertercurrents();
  void clear_has_invertercurrents();
  void set_has_batterypackminimumvoltage();
  void clear_has_batterypackminimumvoltage();
  void set_has_batterypackmaxvoltage();
  void clear_has_batterypackmaxvoltage();
  void set_has_sol1();
  void clear_has_sol1();
  void set_has_sol2();
  void clear_has_sol2();
  void set_has_sol3();
  void clear_has_sol3();
  void set_has_sol4();
  void clear_has_sol4();
  void set_has_sol5();
  void clear_has_sol5();
  void set_has_sol6();
  void clear_has_sol6();
  void set_has_hp();
  void clear_has_hp();
  void set_has_lp1();
  void clear_has_lp1();
  void set_has_lp2();
  void clear_has_lp2();
  void set_has_lp3();
  void clear_has_lp3();
  void set_has_lp4();
  void clear_has_lp4();
  void set_has_pressurevesseltemperature();
  void clear_has_pressurevesseltemperature();
  void set_has_electronicsenclosurepressure();
  void clear_has_electronicsenclosurepressure();
  void set_has_raildisplacementx();
  void clear_has_raildisplacementx();
  void set_has_raildisplacementy();
  void clear_has_raildisplacementy();
  void set_has_tubepressure();
  void clear_has_tubepressure();
  void set_has_coolantpressure1();
  void clear_has_coolantpressure1();
  void set_has_coolantpressure2();
  void clear_has_coolantpressure2();
  void set_has_coolantpressure3();
  void clear_has_coolantpressure3();
  void set_has_coolanttemperature();
  void clear_has_coolanttemperature();
  void set_has_railtemperature();
  void clear_has_railtemperature();
  void set_has_pack1voltage();
  void clear_has_pack1voltage();
  void set_has_pack2voltage();
  void clear_has_pack2voltage();
  void set_has_pack1current();
  void clear_has_pack1current();
  void set_has_pack2current();
  void clear_has_pack2current();
  void set_has_rail1voltage();
  void clear_has_rail1voltage();
  void set_has_rail2voltage();
  void clear_has_rail2voltage();
  void set_has_rail3voltage();
  void clear_has_rail3voltage();
  void set_has_rail4voltage();
  void clear_has_rail4voltage();
  void set_has_railvoltageflag();
  void clear_has_railvoltageflag();
  void set_has_railcurrentsensor1();
  void clear_has_railcurrentsensor1();
  void set_has_railcurrentsensor2();
  void clear_has_railcurrentsensor2();
  void set_has_railcurrentsensor3();
  void clear_has_railcurrentsensor3();
  void set_has_railcurrentsensor4();
  void clear_has_railcurrentsensor4();
  void set_has_railcurrentsensor5();
  void clear_has_railcurrentsensor5();
  void set_has_railcurrentsensor6();
  void clear_has_railcurrentsensor6();
  void set_has_railcurrentsensor7();
  void clear_has_railcurrentsensor7();
  void set_has_railcurrentsensor8();
  void clear_has_railcurrentsensor8();
  void set_has_railcurrentflag();
  void clear_has_railcurrentflag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > heartbeatflags_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > batterypackvoltages_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > batterypackcurrent_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > batterycelltemperatures_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > heartbeatvalues_;
  int podstate_;
  int breaknodestate_;
  int motorstate_;
  int controlsinterfacestate_;
  int inverterstate_;
  ::google::protobuf::int32 missiontime_;
  ::google::protobuf::int32 flighttime_;
  ::google::protobuf::int32 podposition_;
  ::google::protobuf::int32 podvelocity_;
  ::google::protobuf::int32 podaccelerationx_;
  ::google::protobuf::int32 podaccelerationy_;
  ::google::protobuf::int32 podaccelerationz_;
  ::google::protobuf::int32 imuvelocity_;
  ::google::protobuf::int32 imuaccelerationx_;
  ::google::protobuf::int32 tachometervelocity_;
  ::google::protobuf::int32 resolvervelocity_;
  ::google::protobuf::int32 invertertemperature1_;
  ::google::protobuf::int32 invertertemperature2_;
  ::google::protobuf::int32 invertertemperature3_;
  ::google::protobuf::int32 motorcurrent_;
  ::google::protobuf::int32 motorvoltage_;
  ::google::protobuf::int32 invertervoltages_;
  ::google::protobuf::int32 invertercurrents_;
  int batterymanagementstate_;
  ::google::protobuf::int32 batterypackminimumvoltage_;
  ::google::protobuf::int32 batterypackmaxvoltage_;
  int breaknodeperceivedpodstate_;
  bool sol1_;
  bool sol2_;
  bool sol3_;
  bool sol4_;
  bool sol5_;
  bool sol6_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 lp1_;
  ::google::protobuf::int32 lp2_;
  ::google::protobuf::int32 lp3_;
  ::google::protobuf::int32 lp4_;
  ::google::protobuf::int32 pressurevesseltemperature_;
  ::google::protobuf::int32 electronicsenclosurepressure_;
  ::google::protobuf::int32 raildisplacementx_;
  ::google::protobuf::int32 raildisplacementy_;
  int rearnodestate_;
  ::google::protobuf::int32 tubepressure_;
  ::google::protobuf::int32 coolantpressure1_;
  ::google::protobuf::int32 coolantpressure2_;
  ::google::protobuf::int32 coolantpressure3_;
  ::google::protobuf::int32 coolanttemperature_;
  ::google::protobuf::int32 railtemperature_;
  int lvdcnodestate_;
  ::google::protobuf::int32 pack1voltage_;
  ::google::protobuf::int32 pack2voltage_;
  ::google::protobuf::int32 pack1current_;
  ::google::protobuf::int32 pack2current_;
  ::google::protobuf::int32 rail1voltage_;
  ::google::protobuf::int32 rail2voltage_;
  ::google::protobuf::int32 rail3voltage_;
  ::google::protobuf::int32 rail4voltage_;
  ::google::protobuf::int32 railcurrentsensor1_;
  ::google::protobuf::int32 railcurrentsensor2_;
  ::google::protobuf::int32 railcurrentsensor3_;
  ::google::protobuf::int32 railcurrentsensor4_;
  ::google::protobuf::int32 railcurrentsensor5_;
  ::google::protobuf::int32 railcurrentsensor6_;
  ::google::protobuf::int32 railcurrentsensor7_;
  ::google::protobuf::int32 railcurrentsensor8_;
  ::google::protobuf::int32 railvoltageflag_;
  ::google::protobuf::int32 railcurrentflag_;
  friend struct ::protobuf_PodTelem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// telemetry

// optional .PodStates podState = 1;
inline bool telemetry::has_podstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void telemetry::set_has_podstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void telemetry::clear_has_podstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void telemetry::clear_podstate() {
  podstate_ = 0;
  clear_has_podstate();
}
inline ::PodStates telemetry::podstate() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.podState)
  return static_cast< ::PodStates >(podstate_);
}
inline void telemetry::set_podstate(::PodStates value) {
  assert(::PodStates_IsValid(value));
  set_has_podstate();
  podstate_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.podState)
}

// optional .BrakeNodeStates breakNodeState = 2;
inline bool telemetry::has_breaknodestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void telemetry::set_has_breaknodestate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void telemetry::clear_has_breaknodestate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void telemetry::clear_breaknodestate() {
  breaknodestate_ = 0;
  clear_has_breaknodestate();
}
inline ::BrakeNodeStates telemetry::breaknodestate() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.breakNodeState)
  return static_cast< ::BrakeNodeStates >(breaknodestate_);
}
inline void telemetry::set_breaknodestate(::BrakeNodeStates value) {
  assert(::BrakeNodeStates_IsValid(value));
  set_has_breaknodestate();
  breaknodestate_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.breakNodeState)
}

// optional .MotorStates motorState = 3;
inline bool telemetry::has_motorstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void telemetry::set_has_motorstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void telemetry::clear_has_motorstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void telemetry::clear_motorstate() {
  motorstate_ = 0;
  clear_has_motorstate();
}
inline ::MotorStates telemetry::motorstate() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.motorState)
  return static_cast< ::MotorStates >(motorstate_);
}
inline void telemetry::set_motorstate(::MotorStates value) {
  assert(::MotorStates_IsValid(value));
  set_has_motorstate();
  motorstate_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.motorState)
}

// optional .ControlsInterfaceStates controlsInterfaceState = 4;
inline bool telemetry::has_controlsinterfacestate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void telemetry::set_has_controlsinterfacestate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void telemetry::clear_has_controlsinterfacestate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void telemetry::clear_controlsinterfacestate() {
  controlsinterfacestate_ = 0;
  clear_has_controlsinterfacestate();
}
inline ::ControlsInterfaceStates telemetry::controlsinterfacestate() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.controlsInterfaceState)
  return static_cast< ::ControlsInterfaceStates >(controlsinterfacestate_);
}
inline void telemetry::set_controlsinterfacestate(::ControlsInterfaceStates value) {
  assert(::ControlsInterfaceStates_IsValid(value));
  set_has_controlsinterfacestate();
  controlsinterfacestate_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.controlsInterfaceState)
}

// optional .InverterStates inverterState = 5;
inline bool telemetry::has_inverterstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void telemetry::set_has_inverterstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void telemetry::clear_has_inverterstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void telemetry::clear_inverterstate() {
  inverterstate_ = 0;
  clear_has_inverterstate();
}
inline ::InverterStates telemetry::inverterstate() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.inverterState)
  return static_cast< ::InverterStates >(inverterstate_);
}
inline void telemetry::set_inverterstate(::InverterStates value) {
  assert(::InverterStates_IsValid(value));
  set_has_inverterstate();
  inverterstate_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.inverterState)
}

// optional .LvdcNodeStates lvdcNodeState = 54;
inline bool telemetry::has_lvdcnodestate() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void telemetry::set_has_lvdcnodestate() {
  _has_bits_[1] |= 0x00020000u;
}
inline void telemetry::clear_has_lvdcnodestate() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void telemetry::clear_lvdcnodestate() {
  lvdcnodestate_ = 0;
  clear_has_lvdcnodestate();
}
inline ::LvdcNodeStates telemetry::lvdcnodestate() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.lvdcNodeState)
  return static_cast< ::LvdcNodeStates >(lvdcnodestate_);
}
inline void telemetry::set_lvdcnodestate(::LvdcNodeStates value) {
  assert(::LvdcNodeStates_IsValid(value));
  set_has_lvdcnodestate();
  lvdcnodestate_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.lvdcNodeState)
}

// optional .BatteryManagementStates batteryManagementState = 25;
inline bool telemetry::has_batterymanagementstate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void telemetry::set_has_batterymanagementstate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void telemetry::clear_has_batterymanagementstate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void telemetry::clear_batterymanagementstate() {
  batterymanagementstate_ = 0;
  clear_has_batterymanagementstate();
}
inline ::BatteryManagementStates telemetry::batterymanagementstate() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.batteryManagementState)
  return static_cast< ::BatteryManagementStates >(batterymanagementstate_);
}
inline void telemetry::set_batterymanagementstate(::BatteryManagementStates value) {
  assert(::BatteryManagementStates_IsValid(value));
  set_has_batterymanagementstate();
  batterymanagementstate_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.batteryManagementState)
}

// optional .PodStates breakNodePerceivedPodState = 31;
inline bool telemetry::has_breaknodeperceivedpodstate() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void telemetry::set_has_breaknodeperceivedpodstate() {
  _has_bits_[0] |= 0x04000000u;
}
inline void telemetry::clear_has_breaknodeperceivedpodstate() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void telemetry::clear_breaknodeperceivedpodstate() {
  breaknodeperceivedpodstate_ = 0;
  clear_has_breaknodeperceivedpodstate();
}
inline ::PodStates telemetry::breaknodeperceivedpodstate() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.breakNodePerceivedPodState)
  return static_cast< ::PodStates >(breaknodeperceivedpodstate_);
}
inline void telemetry::set_breaknodeperceivedpodstate(::PodStates value) {
  assert(::PodStates_IsValid(value));
  set_has_breaknodeperceivedpodstate();
  breaknodeperceivedpodstate_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.breakNodePerceivedPodState)
}

// optional .RearNodeStates rearNodeState = 47;
inline bool telemetry::has_rearnodestate() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void telemetry::set_has_rearnodestate() {
  _has_bits_[1] |= 0x00000400u;
}
inline void telemetry::clear_has_rearnodestate() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void telemetry::clear_rearnodestate() {
  rearnodestate_ = 0;
  clear_has_rearnodestate();
}
inline ::RearNodeStates telemetry::rearnodestate() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.rearNodeState)
  return static_cast< ::RearNodeStates >(rearnodestate_);
}
inline void telemetry::set_rearnodestate(::RearNodeStates value) {
  assert(::RearNodeStates_IsValid(value));
  set_has_rearnodestate();
  rearnodestate_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.rearNodeState)
}

// optional int32 missionTime = 6;
inline bool telemetry::has_missiontime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void telemetry::set_has_missiontime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void telemetry::clear_has_missiontime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void telemetry::clear_missiontime() {
  missiontime_ = 0;
  clear_has_missiontime();
}
inline ::google::protobuf::int32 telemetry::missiontime() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.missionTime)
  return missiontime_;
}
inline void telemetry::set_missiontime(::google::protobuf::int32 value) {
  set_has_missiontime();
  missiontime_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.missionTime)
}

// optional int32 flightTime = 7;
inline bool telemetry::has_flighttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void telemetry::set_has_flighttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void telemetry::clear_has_flighttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void telemetry::clear_flighttime() {
  flighttime_ = 0;
  clear_has_flighttime();
}
inline ::google::protobuf::int32 telemetry::flighttime() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.flightTime)
  return flighttime_;
}
inline void telemetry::set_flighttime(::google::protobuf::int32 value) {
  set_has_flighttime();
  flighttime_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.flightTime)
}

// repeated int32 heartbeatFlags = 8;
inline int telemetry::heartbeatflags_size() const {
  return heartbeatflags_.size();
}
inline void telemetry::clear_heartbeatflags() {
  heartbeatflags_.Clear();
}
inline ::google::protobuf::int32 telemetry::heartbeatflags(int index) const {
  // @@protoc_insertion_point(field_get:pds.telemetry.heartbeatFlags)
  return heartbeatflags_.Get(index);
}
inline void telemetry::set_heartbeatflags(int index, ::google::protobuf::int32 value) {
  heartbeatflags_.Set(index, value);
  // @@protoc_insertion_point(field_set:pds.telemetry.heartbeatFlags)
}
inline void telemetry::add_heartbeatflags(::google::protobuf::int32 value) {
  heartbeatflags_.Add(value);
  // @@protoc_insertion_point(field_add:pds.telemetry.heartbeatFlags)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
telemetry::heartbeatflags() const {
  // @@protoc_insertion_point(field_list:pds.telemetry.heartbeatFlags)
  return heartbeatflags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
telemetry::mutable_heartbeatflags() {
  // @@protoc_insertion_point(field_mutable_list:pds.telemetry.heartbeatFlags)
  return &heartbeatflags_;
}

// repeated int32 heartbeatValues = 71;
inline int telemetry::heartbeatvalues_size() const {
  return heartbeatvalues_.size();
}
inline void telemetry::clear_heartbeatvalues() {
  heartbeatvalues_.Clear();
}
inline ::google::protobuf::int32 telemetry::heartbeatvalues(int index) const {
  // @@protoc_insertion_point(field_get:pds.telemetry.heartbeatValues)
  return heartbeatvalues_.Get(index);
}
inline void telemetry::set_heartbeatvalues(int index, ::google::protobuf::int32 value) {
  heartbeatvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:pds.telemetry.heartbeatValues)
}
inline void telemetry::add_heartbeatvalues(::google::protobuf::int32 value) {
  heartbeatvalues_.Add(value);
  // @@protoc_insertion_point(field_add:pds.telemetry.heartbeatValues)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
telemetry::heartbeatvalues() const {
  // @@protoc_insertion_point(field_list:pds.telemetry.heartbeatValues)
  return heartbeatvalues_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
telemetry::mutable_heartbeatvalues() {
  // @@protoc_insertion_point(field_mutable_list:pds.telemetry.heartbeatValues)
  return &heartbeatvalues_;
}

// optional int32 podPosition = 9;
inline bool telemetry::has_podposition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void telemetry::set_has_podposition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void telemetry::clear_has_podposition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void telemetry::clear_podposition() {
  podposition_ = 0;
  clear_has_podposition();
}
inline ::google::protobuf::int32 telemetry::podposition() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.podPosition)
  return podposition_;
}
inline void telemetry::set_podposition(::google::protobuf::int32 value) {
  set_has_podposition();
  podposition_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.podPosition)
}

// optional int32 podVelocity = 10;
inline bool telemetry::has_podvelocity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void telemetry::set_has_podvelocity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void telemetry::clear_has_podvelocity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void telemetry::clear_podvelocity() {
  podvelocity_ = 0;
  clear_has_podvelocity();
}
inline ::google::protobuf::int32 telemetry::podvelocity() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.podVelocity)
  return podvelocity_;
}
inline void telemetry::set_podvelocity(::google::protobuf::int32 value) {
  set_has_podvelocity();
  podvelocity_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.podVelocity)
}

// optional int32 podAccelerationX = 11;
inline bool telemetry::has_podaccelerationx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void telemetry::set_has_podaccelerationx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void telemetry::clear_has_podaccelerationx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void telemetry::clear_podaccelerationx() {
  podaccelerationx_ = 0;
  clear_has_podaccelerationx();
}
inline ::google::protobuf::int32 telemetry::podaccelerationx() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.podAccelerationX)
  return podaccelerationx_;
}
inline void telemetry::set_podaccelerationx(::google::protobuf::int32 value) {
  set_has_podaccelerationx();
  podaccelerationx_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.podAccelerationX)
}

// optional int32 podAccelerationY = 12;
inline bool telemetry::has_podaccelerationy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void telemetry::set_has_podaccelerationy() {
  _has_bits_[0] |= 0x00000400u;
}
inline void telemetry::clear_has_podaccelerationy() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void telemetry::clear_podaccelerationy() {
  podaccelerationy_ = 0;
  clear_has_podaccelerationy();
}
inline ::google::protobuf::int32 telemetry::podaccelerationy() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.podAccelerationY)
  return podaccelerationy_;
}
inline void telemetry::set_podaccelerationy(::google::protobuf::int32 value) {
  set_has_podaccelerationy();
  podaccelerationy_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.podAccelerationY)
}

// optional int32 podAccelerationZ = 13;
inline bool telemetry::has_podaccelerationz() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void telemetry::set_has_podaccelerationz() {
  _has_bits_[0] |= 0x00000800u;
}
inline void telemetry::clear_has_podaccelerationz() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void telemetry::clear_podaccelerationz() {
  podaccelerationz_ = 0;
  clear_has_podaccelerationz();
}
inline ::google::protobuf::int32 telemetry::podaccelerationz() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.podAccelerationZ)
  return podaccelerationz_;
}
inline void telemetry::set_podaccelerationz(::google::protobuf::int32 value) {
  set_has_podaccelerationz();
  podaccelerationz_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.podAccelerationZ)
}

// optional int32 imuVelocity = 14;
inline bool telemetry::has_imuvelocity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void telemetry::set_has_imuvelocity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void telemetry::clear_has_imuvelocity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void telemetry::clear_imuvelocity() {
  imuvelocity_ = 0;
  clear_has_imuvelocity();
}
inline ::google::protobuf::int32 telemetry::imuvelocity() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.imuVelocity)
  return imuvelocity_;
}
inline void telemetry::set_imuvelocity(::google::protobuf::int32 value) {
  set_has_imuvelocity();
  imuvelocity_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.imuVelocity)
}

// optional int32 imuAccelerationX = 15;
inline bool telemetry::has_imuaccelerationx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void telemetry::set_has_imuaccelerationx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void telemetry::clear_has_imuaccelerationx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void telemetry::clear_imuaccelerationx() {
  imuaccelerationx_ = 0;
  clear_has_imuaccelerationx();
}
inline ::google::protobuf::int32 telemetry::imuaccelerationx() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.imuAccelerationX)
  return imuaccelerationx_;
}
inline void telemetry::set_imuaccelerationx(::google::protobuf::int32 value) {
  set_has_imuaccelerationx();
  imuaccelerationx_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.imuAccelerationX)
}

// optional int32 tachometerVelocity = 16;
inline bool telemetry::has_tachometervelocity() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void telemetry::set_has_tachometervelocity() {
  _has_bits_[0] |= 0x00004000u;
}
inline void telemetry::clear_has_tachometervelocity() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void telemetry::clear_tachometervelocity() {
  tachometervelocity_ = 0;
  clear_has_tachometervelocity();
}
inline ::google::protobuf::int32 telemetry::tachometervelocity() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.tachometerVelocity)
  return tachometervelocity_;
}
inline void telemetry::set_tachometervelocity(::google::protobuf::int32 value) {
  set_has_tachometervelocity();
  tachometervelocity_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.tachometerVelocity)
}

// optional int32 resolverVelocity = 17;
inline bool telemetry::has_resolvervelocity() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void telemetry::set_has_resolvervelocity() {
  _has_bits_[0] |= 0x00008000u;
}
inline void telemetry::clear_has_resolvervelocity() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void telemetry::clear_resolvervelocity() {
  resolvervelocity_ = 0;
  clear_has_resolvervelocity();
}
inline ::google::protobuf::int32 telemetry::resolvervelocity() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.resolverVelocity)
  return resolvervelocity_;
}
inline void telemetry::set_resolvervelocity(::google::protobuf::int32 value) {
  set_has_resolvervelocity();
  resolvervelocity_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.resolverVelocity)
}

// optional int32 inverterTemperature1 = 18;
inline bool telemetry::has_invertertemperature1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void telemetry::set_has_invertertemperature1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void telemetry::clear_has_invertertemperature1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void telemetry::clear_invertertemperature1() {
  invertertemperature1_ = 0;
  clear_has_invertertemperature1();
}
inline ::google::protobuf::int32 telemetry::invertertemperature1() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.inverterTemperature1)
  return invertertemperature1_;
}
inline void telemetry::set_invertertemperature1(::google::protobuf::int32 value) {
  set_has_invertertemperature1();
  invertertemperature1_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.inverterTemperature1)
}

// optional int32 inverterTemperature2 = 19;
inline bool telemetry::has_invertertemperature2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void telemetry::set_has_invertertemperature2() {
  _has_bits_[0] |= 0x00020000u;
}
inline void telemetry::clear_has_invertertemperature2() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void telemetry::clear_invertertemperature2() {
  invertertemperature2_ = 0;
  clear_has_invertertemperature2();
}
inline ::google::protobuf::int32 telemetry::invertertemperature2() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.inverterTemperature2)
  return invertertemperature2_;
}
inline void telemetry::set_invertertemperature2(::google::protobuf::int32 value) {
  set_has_invertertemperature2();
  invertertemperature2_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.inverterTemperature2)
}

// optional int32 inverterTemperature3 = 20;
inline bool telemetry::has_invertertemperature3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void telemetry::set_has_invertertemperature3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void telemetry::clear_has_invertertemperature3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void telemetry::clear_invertertemperature3() {
  invertertemperature3_ = 0;
  clear_has_invertertemperature3();
}
inline ::google::protobuf::int32 telemetry::invertertemperature3() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.inverterTemperature3)
  return invertertemperature3_;
}
inline void telemetry::set_invertertemperature3(::google::protobuf::int32 value) {
  set_has_invertertemperature3();
  invertertemperature3_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.inverterTemperature3)
}

// optional int32 motorCurrent = 21;
inline bool telemetry::has_motorcurrent() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void telemetry::set_has_motorcurrent() {
  _has_bits_[0] |= 0x00080000u;
}
inline void telemetry::clear_has_motorcurrent() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void telemetry::clear_motorcurrent() {
  motorcurrent_ = 0;
  clear_has_motorcurrent();
}
inline ::google::protobuf::int32 telemetry::motorcurrent() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.motorCurrent)
  return motorcurrent_;
}
inline void telemetry::set_motorcurrent(::google::protobuf::int32 value) {
  set_has_motorcurrent();
  motorcurrent_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.motorCurrent)
}

// optional int32 motorVoltage = 22;
inline bool telemetry::has_motorvoltage() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void telemetry::set_has_motorvoltage() {
  _has_bits_[0] |= 0x00100000u;
}
inline void telemetry::clear_has_motorvoltage() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void telemetry::clear_motorvoltage() {
  motorvoltage_ = 0;
  clear_has_motorvoltage();
}
inline ::google::protobuf::int32 telemetry::motorvoltage() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.motorVoltage)
  return motorvoltage_;
}
inline void telemetry::set_motorvoltage(::google::protobuf::int32 value) {
  set_has_motorvoltage();
  motorvoltage_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.motorVoltage)
}

// optional int32 inverterVoltages = 23;
inline bool telemetry::has_invertervoltages() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void telemetry::set_has_invertervoltages() {
  _has_bits_[0] |= 0x00200000u;
}
inline void telemetry::clear_has_invertervoltages() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void telemetry::clear_invertervoltages() {
  invertervoltages_ = 0;
  clear_has_invertervoltages();
}
inline ::google::protobuf::int32 telemetry::invertervoltages() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.inverterVoltages)
  return invertervoltages_;
}
inline void telemetry::set_invertervoltages(::google::protobuf::int32 value) {
  set_has_invertervoltages();
  invertervoltages_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.inverterVoltages)
}

// optional int32 inverterCurrents = 24;
inline bool telemetry::has_invertercurrents() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void telemetry::set_has_invertercurrents() {
  _has_bits_[0] |= 0x00400000u;
}
inline void telemetry::clear_has_invertercurrents() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void telemetry::clear_invertercurrents() {
  invertercurrents_ = 0;
  clear_has_invertercurrents();
}
inline ::google::protobuf::int32 telemetry::invertercurrents() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.inverterCurrents)
  return invertercurrents_;
}
inline void telemetry::set_invertercurrents(::google::protobuf::int32 value) {
  set_has_invertercurrents();
  invertercurrents_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.inverterCurrents)
}

// repeated int32 batteryPackVoltages = 26;
inline int telemetry::batterypackvoltages_size() const {
  return batterypackvoltages_.size();
}
inline void telemetry::clear_batterypackvoltages() {
  batterypackvoltages_.Clear();
}
inline ::google::protobuf::int32 telemetry::batterypackvoltages(int index) const {
  // @@protoc_insertion_point(field_get:pds.telemetry.batteryPackVoltages)
  return batterypackvoltages_.Get(index);
}
inline void telemetry::set_batterypackvoltages(int index, ::google::protobuf::int32 value) {
  batterypackvoltages_.Set(index, value);
  // @@protoc_insertion_point(field_set:pds.telemetry.batteryPackVoltages)
}
inline void telemetry::add_batterypackvoltages(::google::protobuf::int32 value) {
  batterypackvoltages_.Add(value);
  // @@protoc_insertion_point(field_add:pds.telemetry.batteryPackVoltages)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
telemetry::batterypackvoltages() const {
  // @@protoc_insertion_point(field_list:pds.telemetry.batteryPackVoltages)
  return batterypackvoltages_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
telemetry::mutable_batterypackvoltages() {
  // @@protoc_insertion_point(field_mutable_list:pds.telemetry.batteryPackVoltages)
  return &batterypackvoltages_;
}

// repeated int32 batteryPackCurrent = 27;
inline int telemetry::batterypackcurrent_size() const {
  return batterypackcurrent_.size();
}
inline void telemetry::clear_batterypackcurrent() {
  batterypackcurrent_.Clear();
}
inline ::google::protobuf::int32 telemetry::batterypackcurrent(int index) const {
  // @@protoc_insertion_point(field_get:pds.telemetry.batteryPackCurrent)
  return batterypackcurrent_.Get(index);
}
inline void telemetry::set_batterypackcurrent(int index, ::google::protobuf::int32 value) {
  batterypackcurrent_.Set(index, value);
  // @@protoc_insertion_point(field_set:pds.telemetry.batteryPackCurrent)
}
inline void telemetry::add_batterypackcurrent(::google::protobuf::int32 value) {
  batterypackcurrent_.Add(value);
  // @@protoc_insertion_point(field_add:pds.telemetry.batteryPackCurrent)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
telemetry::batterypackcurrent() const {
  // @@protoc_insertion_point(field_list:pds.telemetry.batteryPackCurrent)
  return batterypackcurrent_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
telemetry::mutable_batterypackcurrent() {
  // @@protoc_insertion_point(field_mutable_list:pds.telemetry.batteryPackCurrent)
  return &batterypackcurrent_;
}

// repeated int32 batteryCellTemperatures = 28;
inline int telemetry::batterycelltemperatures_size() const {
  return batterycelltemperatures_.size();
}
inline void telemetry::clear_batterycelltemperatures() {
  batterycelltemperatures_.Clear();
}
inline ::google::protobuf::int32 telemetry::batterycelltemperatures(int index) const {
  // @@protoc_insertion_point(field_get:pds.telemetry.batteryCellTemperatures)
  return batterycelltemperatures_.Get(index);
}
inline void telemetry::set_batterycelltemperatures(int index, ::google::protobuf::int32 value) {
  batterycelltemperatures_.Set(index, value);
  // @@protoc_insertion_point(field_set:pds.telemetry.batteryCellTemperatures)
}
inline void telemetry::add_batterycelltemperatures(::google::protobuf::int32 value) {
  batterycelltemperatures_.Add(value);
  // @@protoc_insertion_point(field_add:pds.telemetry.batteryCellTemperatures)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
telemetry::batterycelltemperatures() const {
  // @@protoc_insertion_point(field_list:pds.telemetry.batteryCellTemperatures)
  return batterycelltemperatures_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
telemetry::mutable_batterycelltemperatures() {
  // @@protoc_insertion_point(field_mutable_list:pds.telemetry.batteryCellTemperatures)
  return &batterycelltemperatures_;
}

// optional int32 batteryPackMinimumVoltage = 29;
inline bool telemetry::has_batterypackminimumvoltage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void telemetry::set_has_batterypackminimumvoltage() {
  _has_bits_[0] |= 0x01000000u;
}
inline void telemetry::clear_has_batterypackminimumvoltage() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void telemetry::clear_batterypackminimumvoltage() {
  batterypackminimumvoltage_ = 0;
  clear_has_batterypackminimumvoltage();
}
inline ::google::protobuf::int32 telemetry::batterypackminimumvoltage() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.batteryPackMinimumVoltage)
  return batterypackminimumvoltage_;
}
inline void telemetry::set_batterypackminimumvoltage(::google::protobuf::int32 value) {
  set_has_batterypackminimumvoltage();
  batterypackminimumvoltage_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.batteryPackMinimumVoltage)
}

// optional int32 batteryPackMaxVoltage = 30;
inline bool telemetry::has_batterypackmaxvoltage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void telemetry::set_has_batterypackmaxvoltage() {
  _has_bits_[0] |= 0x02000000u;
}
inline void telemetry::clear_has_batterypackmaxvoltage() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void telemetry::clear_batterypackmaxvoltage() {
  batterypackmaxvoltage_ = 0;
  clear_has_batterypackmaxvoltage();
}
inline ::google::protobuf::int32 telemetry::batterypackmaxvoltage() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.batteryPackMaxVoltage)
  return batterypackmaxvoltage_;
}
inline void telemetry::set_batterypackmaxvoltage(::google::protobuf::int32 value) {
  set_has_batterypackmaxvoltage();
  batterypackmaxvoltage_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.batteryPackMaxVoltage)
}

// optional bool sol1 = 32;
inline bool telemetry::has_sol1() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void telemetry::set_has_sol1() {
  _has_bits_[0] |= 0x08000000u;
}
inline void telemetry::clear_has_sol1() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void telemetry::clear_sol1() {
  sol1_ = false;
  clear_has_sol1();
}
inline bool telemetry::sol1() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.sol1)
  return sol1_;
}
inline void telemetry::set_sol1(bool value) {
  set_has_sol1();
  sol1_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.sol1)
}

// optional bool sol2 = 33;
inline bool telemetry::has_sol2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void telemetry::set_has_sol2() {
  _has_bits_[0] |= 0x10000000u;
}
inline void telemetry::clear_has_sol2() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void telemetry::clear_sol2() {
  sol2_ = false;
  clear_has_sol2();
}
inline bool telemetry::sol2() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.sol2)
  return sol2_;
}
inline void telemetry::set_sol2(bool value) {
  set_has_sol2();
  sol2_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.sol2)
}

// optional bool sol3 = 34;
inline bool telemetry::has_sol3() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void telemetry::set_has_sol3() {
  _has_bits_[0] |= 0x20000000u;
}
inline void telemetry::clear_has_sol3() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void telemetry::clear_sol3() {
  sol3_ = false;
  clear_has_sol3();
}
inline bool telemetry::sol3() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.sol3)
  return sol3_;
}
inline void telemetry::set_sol3(bool value) {
  set_has_sol3();
  sol3_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.sol3)
}

// optional bool sol4 = 35;
inline bool telemetry::has_sol4() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void telemetry::set_has_sol4() {
  _has_bits_[0] |= 0x40000000u;
}
inline void telemetry::clear_has_sol4() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void telemetry::clear_sol4() {
  sol4_ = false;
  clear_has_sol4();
}
inline bool telemetry::sol4() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.sol4)
  return sol4_;
}
inline void telemetry::set_sol4(bool value) {
  set_has_sol4();
  sol4_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.sol4)
}

// optional bool sol5 = 36;
inline bool telemetry::has_sol5() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void telemetry::set_has_sol5() {
  _has_bits_[0] |= 0x80000000u;
}
inline void telemetry::clear_has_sol5() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void telemetry::clear_sol5() {
  sol5_ = false;
  clear_has_sol5();
}
inline bool telemetry::sol5() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.sol5)
  return sol5_;
}
inline void telemetry::set_sol5(bool value) {
  set_has_sol5();
  sol5_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.sol5)
}

// optional bool sol6 = 37;
inline bool telemetry::has_sol6() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void telemetry::set_has_sol6() {
  _has_bits_[1] |= 0x00000001u;
}
inline void telemetry::clear_has_sol6() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void telemetry::clear_sol6() {
  sol6_ = false;
  clear_has_sol6();
}
inline bool telemetry::sol6() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.sol6)
  return sol6_;
}
inline void telemetry::set_sol6(bool value) {
  set_has_sol6();
  sol6_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.sol6)
}

// optional int32 hp = 38;
inline bool telemetry::has_hp() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void telemetry::set_has_hp() {
  _has_bits_[1] |= 0x00000002u;
}
inline void telemetry::clear_has_hp() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void telemetry::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 telemetry::hp() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.hp)
  return hp_;
}
inline void telemetry::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.hp)
}

// optional int32 lp1 = 39;
inline bool telemetry::has_lp1() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void telemetry::set_has_lp1() {
  _has_bits_[1] |= 0x00000004u;
}
inline void telemetry::clear_has_lp1() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void telemetry::clear_lp1() {
  lp1_ = 0;
  clear_has_lp1();
}
inline ::google::protobuf::int32 telemetry::lp1() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.lp1)
  return lp1_;
}
inline void telemetry::set_lp1(::google::protobuf::int32 value) {
  set_has_lp1();
  lp1_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.lp1)
}

// optional int32 lp2 = 40;
inline bool telemetry::has_lp2() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void telemetry::set_has_lp2() {
  _has_bits_[1] |= 0x00000008u;
}
inline void telemetry::clear_has_lp2() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void telemetry::clear_lp2() {
  lp2_ = 0;
  clear_has_lp2();
}
inline ::google::protobuf::int32 telemetry::lp2() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.lp2)
  return lp2_;
}
inline void telemetry::set_lp2(::google::protobuf::int32 value) {
  set_has_lp2();
  lp2_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.lp2)
}

// optional int32 lp3 = 41;
inline bool telemetry::has_lp3() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void telemetry::set_has_lp3() {
  _has_bits_[1] |= 0x00000010u;
}
inline void telemetry::clear_has_lp3() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void telemetry::clear_lp3() {
  lp3_ = 0;
  clear_has_lp3();
}
inline ::google::protobuf::int32 telemetry::lp3() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.lp3)
  return lp3_;
}
inline void telemetry::set_lp3(::google::protobuf::int32 value) {
  set_has_lp3();
  lp3_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.lp3)
}

// optional int32 lp4 = 42;
inline bool telemetry::has_lp4() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void telemetry::set_has_lp4() {
  _has_bits_[1] |= 0x00000020u;
}
inline void telemetry::clear_has_lp4() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void telemetry::clear_lp4() {
  lp4_ = 0;
  clear_has_lp4();
}
inline ::google::protobuf::int32 telemetry::lp4() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.lp4)
  return lp4_;
}
inline void telemetry::set_lp4(::google::protobuf::int32 value) {
  set_has_lp4();
  lp4_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.lp4)
}

// optional int32 pressureVesselTemperature = 43;
inline bool telemetry::has_pressurevesseltemperature() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void telemetry::set_has_pressurevesseltemperature() {
  _has_bits_[1] |= 0x00000040u;
}
inline void telemetry::clear_has_pressurevesseltemperature() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void telemetry::clear_pressurevesseltemperature() {
  pressurevesseltemperature_ = 0;
  clear_has_pressurevesseltemperature();
}
inline ::google::protobuf::int32 telemetry::pressurevesseltemperature() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.pressureVesselTemperature)
  return pressurevesseltemperature_;
}
inline void telemetry::set_pressurevesseltemperature(::google::protobuf::int32 value) {
  set_has_pressurevesseltemperature();
  pressurevesseltemperature_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.pressureVesselTemperature)
}

// optional int32 electronicsEnclosurePressure = 44;
inline bool telemetry::has_electronicsenclosurepressure() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void telemetry::set_has_electronicsenclosurepressure() {
  _has_bits_[1] |= 0x00000080u;
}
inline void telemetry::clear_has_electronicsenclosurepressure() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void telemetry::clear_electronicsenclosurepressure() {
  electronicsenclosurepressure_ = 0;
  clear_has_electronicsenclosurepressure();
}
inline ::google::protobuf::int32 telemetry::electronicsenclosurepressure() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.electronicsEnclosurePressure)
  return electronicsenclosurepressure_;
}
inline void telemetry::set_electronicsenclosurepressure(::google::protobuf::int32 value) {
  set_has_electronicsenclosurepressure();
  electronicsenclosurepressure_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.electronicsEnclosurePressure)
}

// optional int32 railDisplacementX = 45;
inline bool telemetry::has_raildisplacementx() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void telemetry::set_has_raildisplacementx() {
  _has_bits_[1] |= 0x00000100u;
}
inline void telemetry::clear_has_raildisplacementx() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void telemetry::clear_raildisplacementx() {
  raildisplacementx_ = 0;
  clear_has_raildisplacementx();
}
inline ::google::protobuf::int32 telemetry::raildisplacementx() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railDisplacementX)
  return raildisplacementx_;
}
inline void telemetry::set_raildisplacementx(::google::protobuf::int32 value) {
  set_has_raildisplacementx();
  raildisplacementx_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railDisplacementX)
}

// optional int32 railDisplacementY = 46;
inline bool telemetry::has_raildisplacementy() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void telemetry::set_has_raildisplacementy() {
  _has_bits_[1] |= 0x00000200u;
}
inline void telemetry::clear_has_raildisplacementy() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void telemetry::clear_raildisplacementy() {
  raildisplacementy_ = 0;
  clear_has_raildisplacementy();
}
inline ::google::protobuf::int32 telemetry::raildisplacementy() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railDisplacementY)
  return raildisplacementy_;
}
inline void telemetry::set_raildisplacementy(::google::protobuf::int32 value) {
  set_has_raildisplacementy();
  raildisplacementy_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railDisplacementY)
}

// optional int32 tubePressure = 48;
inline bool telemetry::has_tubepressure() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void telemetry::set_has_tubepressure() {
  _has_bits_[1] |= 0x00000800u;
}
inline void telemetry::clear_has_tubepressure() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void telemetry::clear_tubepressure() {
  tubepressure_ = 0;
  clear_has_tubepressure();
}
inline ::google::protobuf::int32 telemetry::tubepressure() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.tubePressure)
  return tubepressure_;
}
inline void telemetry::set_tubepressure(::google::protobuf::int32 value) {
  set_has_tubepressure();
  tubepressure_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.tubePressure)
}

// optional int32 coolantPressure1 = 49;
inline bool telemetry::has_coolantpressure1() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void telemetry::set_has_coolantpressure1() {
  _has_bits_[1] |= 0x00001000u;
}
inline void telemetry::clear_has_coolantpressure1() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void telemetry::clear_coolantpressure1() {
  coolantpressure1_ = 0;
  clear_has_coolantpressure1();
}
inline ::google::protobuf::int32 telemetry::coolantpressure1() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.coolantPressure1)
  return coolantpressure1_;
}
inline void telemetry::set_coolantpressure1(::google::protobuf::int32 value) {
  set_has_coolantpressure1();
  coolantpressure1_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.coolantPressure1)
}

// optional int32 coolantPressure2 = 50;
inline bool telemetry::has_coolantpressure2() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void telemetry::set_has_coolantpressure2() {
  _has_bits_[1] |= 0x00002000u;
}
inline void telemetry::clear_has_coolantpressure2() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void telemetry::clear_coolantpressure2() {
  coolantpressure2_ = 0;
  clear_has_coolantpressure2();
}
inline ::google::protobuf::int32 telemetry::coolantpressure2() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.coolantPressure2)
  return coolantpressure2_;
}
inline void telemetry::set_coolantpressure2(::google::protobuf::int32 value) {
  set_has_coolantpressure2();
  coolantpressure2_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.coolantPressure2)
}

// optional int32 coolantPressure3 = 51;
inline bool telemetry::has_coolantpressure3() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void telemetry::set_has_coolantpressure3() {
  _has_bits_[1] |= 0x00004000u;
}
inline void telemetry::clear_has_coolantpressure3() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void telemetry::clear_coolantpressure3() {
  coolantpressure3_ = 0;
  clear_has_coolantpressure3();
}
inline ::google::protobuf::int32 telemetry::coolantpressure3() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.coolantPressure3)
  return coolantpressure3_;
}
inline void telemetry::set_coolantpressure3(::google::protobuf::int32 value) {
  set_has_coolantpressure3();
  coolantpressure3_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.coolantPressure3)
}

// optional int32 coolantTemperature = 52;
inline bool telemetry::has_coolanttemperature() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void telemetry::set_has_coolanttemperature() {
  _has_bits_[1] |= 0x00008000u;
}
inline void telemetry::clear_has_coolanttemperature() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void telemetry::clear_coolanttemperature() {
  coolanttemperature_ = 0;
  clear_has_coolanttemperature();
}
inline ::google::protobuf::int32 telemetry::coolanttemperature() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.coolantTemperature)
  return coolanttemperature_;
}
inline void telemetry::set_coolanttemperature(::google::protobuf::int32 value) {
  set_has_coolanttemperature();
  coolanttemperature_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.coolantTemperature)
}

// optional int32 railTemperature = 53;
inline bool telemetry::has_railtemperature() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void telemetry::set_has_railtemperature() {
  _has_bits_[1] |= 0x00010000u;
}
inline void telemetry::clear_has_railtemperature() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void telemetry::clear_railtemperature() {
  railtemperature_ = 0;
  clear_has_railtemperature();
}
inline ::google::protobuf::int32 telemetry::railtemperature() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railTemperature)
  return railtemperature_;
}
inline void telemetry::set_railtemperature(::google::protobuf::int32 value) {
  set_has_railtemperature();
  railtemperature_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railTemperature)
}

// optional int32 pack1Voltage = 55;
inline bool telemetry::has_pack1voltage() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void telemetry::set_has_pack1voltage() {
  _has_bits_[1] |= 0x00040000u;
}
inline void telemetry::clear_has_pack1voltage() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void telemetry::clear_pack1voltage() {
  pack1voltage_ = 0;
  clear_has_pack1voltage();
}
inline ::google::protobuf::int32 telemetry::pack1voltage() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.pack1Voltage)
  return pack1voltage_;
}
inline void telemetry::set_pack1voltage(::google::protobuf::int32 value) {
  set_has_pack1voltage();
  pack1voltage_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.pack1Voltage)
}

// optional int32 pack2Voltage = 56;
inline bool telemetry::has_pack2voltage() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void telemetry::set_has_pack2voltage() {
  _has_bits_[1] |= 0x00080000u;
}
inline void telemetry::clear_has_pack2voltage() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void telemetry::clear_pack2voltage() {
  pack2voltage_ = 0;
  clear_has_pack2voltage();
}
inline ::google::protobuf::int32 telemetry::pack2voltage() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.pack2Voltage)
  return pack2voltage_;
}
inline void telemetry::set_pack2voltage(::google::protobuf::int32 value) {
  set_has_pack2voltage();
  pack2voltage_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.pack2Voltage)
}

// optional int32 pack1Current = 57;
inline bool telemetry::has_pack1current() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void telemetry::set_has_pack1current() {
  _has_bits_[1] |= 0x00100000u;
}
inline void telemetry::clear_has_pack1current() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void telemetry::clear_pack1current() {
  pack1current_ = 0;
  clear_has_pack1current();
}
inline ::google::protobuf::int32 telemetry::pack1current() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.pack1Current)
  return pack1current_;
}
inline void telemetry::set_pack1current(::google::protobuf::int32 value) {
  set_has_pack1current();
  pack1current_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.pack1Current)
}

// optional int32 pack2Current = 58;
inline bool telemetry::has_pack2current() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void telemetry::set_has_pack2current() {
  _has_bits_[1] |= 0x00200000u;
}
inline void telemetry::clear_has_pack2current() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void telemetry::clear_pack2current() {
  pack2current_ = 0;
  clear_has_pack2current();
}
inline ::google::protobuf::int32 telemetry::pack2current() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.pack2Current)
  return pack2current_;
}
inline void telemetry::set_pack2current(::google::protobuf::int32 value) {
  set_has_pack2current();
  pack2current_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.pack2Current)
}

// optional int32 rail1Voltage = 59;
inline bool telemetry::has_rail1voltage() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void telemetry::set_has_rail1voltage() {
  _has_bits_[1] |= 0x00400000u;
}
inline void telemetry::clear_has_rail1voltage() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void telemetry::clear_rail1voltage() {
  rail1voltage_ = 0;
  clear_has_rail1voltage();
}
inline ::google::protobuf::int32 telemetry::rail1voltage() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.rail1Voltage)
  return rail1voltage_;
}
inline void telemetry::set_rail1voltage(::google::protobuf::int32 value) {
  set_has_rail1voltage();
  rail1voltage_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.rail1Voltage)
}

// optional int32 rail2Voltage = 60;
inline bool telemetry::has_rail2voltage() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void telemetry::set_has_rail2voltage() {
  _has_bits_[1] |= 0x00800000u;
}
inline void telemetry::clear_has_rail2voltage() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void telemetry::clear_rail2voltage() {
  rail2voltage_ = 0;
  clear_has_rail2voltage();
}
inline ::google::protobuf::int32 telemetry::rail2voltage() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.rail2Voltage)
  return rail2voltage_;
}
inline void telemetry::set_rail2voltage(::google::protobuf::int32 value) {
  set_has_rail2voltage();
  rail2voltage_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.rail2Voltage)
}

// optional int32 rail3Voltage = 61;
inline bool telemetry::has_rail3voltage() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void telemetry::set_has_rail3voltage() {
  _has_bits_[1] |= 0x01000000u;
}
inline void telemetry::clear_has_rail3voltage() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void telemetry::clear_rail3voltage() {
  rail3voltage_ = 0;
  clear_has_rail3voltage();
}
inline ::google::protobuf::int32 telemetry::rail3voltage() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.rail3Voltage)
  return rail3voltage_;
}
inline void telemetry::set_rail3voltage(::google::protobuf::int32 value) {
  set_has_rail3voltage();
  rail3voltage_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.rail3Voltage)
}

// optional int32 rail4Voltage = 62;
inline bool telemetry::has_rail4voltage() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void telemetry::set_has_rail4voltage() {
  _has_bits_[1] |= 0x02000000u;
}
inline void telemetry::clear_has_rail4voltage() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void telemetry::clear_rail4voltage() {
  rail4voltage_ = 0;
  clear_has_rail4voltage();
}
inline ::google::protobuf::int32 telemetry::rail4voltage() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.rail4Voltage)
  return rail4voltage_;
}
inline void telemetry::set_rail4voltage(::google::protobuf::int32 value) {
  set_has_rail4voltage();
  rail4voltage_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.rail4Voltage)
}

// optional int32 railVoltageFlag = 72;
inline bool telemetry::has_railvoltageflag() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void telemetry::set_has_railvoltageflag() {
  _has_bits_[2] |= 0x00000004u;
}
inline void telemetry::clear_has_railvoltageflag() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void telemetry::clear_railvoltageflag() {
  railvoltageflag_ = 0;
  clear_has_railvoltageflag();
}
inline ::google::protobuf::int32 telemetry::railvoltageflag() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railVoltageFlag)
  return railvoltageflag_;
}
inline void telemetry::set_railvoltageflag(::google::protobuf::int32 value) {
  set_has_railvoltageflag();
  railvoltageflag_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railVoltageFlag)
}

// optional int32 railCurrentSensor1 = 63;
inline bool telemetry::has_railcurrentsensor1() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void telemetry::set_has_railcurrentsensor1() {
  _has_bits_[1] |= 0x04000000u;
}
inline void telemetry::clear_has_railcurrentsensor1() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void telemetry::clear_railcurrentsensor1() {
  railcurrentsensor1_ = 0;
  clear_has_railcurrentsensor1();
}
inline ::google::protobuf::int32 telemetry::railcurrentsensor1() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railCurrentSensor1)
  return railcurrentsensor1_;
}
inline void telemetry::set_railcurrentsensor1(::google::protobuf::int32 value) {
  set_has_railcurrentsensor1();
  railcurrentsensor1_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railCurrentSensor1)
}

// optional int32 railCurrentSensor2 = 64;
inline bool telemetry::has_railcurrentsensor2() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void telemetry::set_has_railcurrentsensor2() {
  _has_bits_[1] |= 0x08000000u;
}
inline void telemetry::clear_has_railcurrentsensor2() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void telemetry::clear_railcurrentsensor2() {
  railcurrentsensor2_ = 0;
  clear_has_railcurrentsensor2();
}
inline ::google::protobuf::int32 telemetry::railcurrentsensor2() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railCurrentSensor2)
  return railcurrentsensor2_;
}
inline void telemetry::set_railcurrentsensor2(::google::protobuf::int32 value) {
  set_has_railcurrentsensor2();
  railcurrentsensor2_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railCurrentSensor2)
}

// optional int32 railCurrentSensor3 = 65;
inline bool telemetry::has_railcurrentsensor3() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void telemetry::set_has_railcurrentsensor3() {
  _has_bits_[1] |= 0x10000000u;
}
inline void telemetry::clear_has_railcurrentsensor3() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void telemetry::clear_railcurrentsensor3() {
  railcurrentsensor3_ = 0;
  clear_has_railcurrentsensor3();
}
inline ::google::protobuf::int32 telemetry::railcurrentsensor3() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railCurrentSensor3)
  return railcurrentsensor3_;
}
inline void telemetry::set_railcurrentsensor3(::google::protobuf::int32 value) {
  set_has_railcurrentsensor3();
  railcurrentsensor3_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railCurrentSensor3)
}

// optional int32 railCurrentSensor4 = 66;
inline bool telemetry::has_railcurrentsensor4() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void telemetry::set_has_railcurrentsensor4() {
  _has_bits_[1] |= 0x20000000u;
}
inline void telemetry::clear_has_railcurrentsensor4() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void telemetry::clear_railcurrentsensor4() {
  railcurrentsensor4_ = 0;
  clear_has_railcurrentsensor4();
}
inline ::google::protobuf::int32 telemetry::railcurrentsensor4() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railCurrentSensor4)
  return railcurrentsensor4_;
}
inline void telemetry::set_railcurrentsensor4(::google::protobuf::int32 value) {
  set_has_railcurrentsensor4();
  railcurrentsensor4_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railCurrentSensor4)
}

// optional int32 railCurrentSensor5 = 67;
inline bool telemetry::has_railcurrentsensor5() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void telemetry::set_has_railcurrentsensor5() {
  _has_bits_[1] |= 0x40000000u;
}
inline void telemetry::clear_has_railcurrentsensor5() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void telemetry::clear_railcurrentsensor5() {
  railcurrentsensor5_ = 0;
  clear_has_railcurrentsensor5();
}
inline ::google::protobuf::int32 telemetry::railcurrentsensor5() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railCurrentSensor5)
  return railcurrentsensor5_;
}
inline void telemetry::set_railcurrentsensor5(::google::protobuf::int32 value) {
  set_has_railcurrentsensor5();
  railcurrentsensor5_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railCurrentSensor5)
}

// optional int32 railCurrentSensor6 = 68;
inline bool telemetry::has_railcurrentsensor6() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void telemetry::set_has_railcurrentsensor6() {
  _has_bits_[1] |= 0x80000000u;
}
inline void telemetry::clear_has_railcurrentsensor6() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void telemetry::clear_railcurrentsensor6() {
  railcurrentsensor6_ = 0;
  clear_has_railcurrentsensor6();
}
inline ::google::protobuf::int32 telemetry::railcurrentsensor6() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railCurrentSensor6)
  return railcurrentsensor6_;
}
inline void telemetry::set_railcurrentsensor6(::google::protobuf::int32 value) {
  set_has_railcurrentsensor6();
  railcurrentsensor6_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railCurrentSensor6)
}

// optional int32 railCurrentSensor7 = 69;
inline bool telemetry::has_railcurrentsensor7() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void telemetry::set_has_railcurrentsensor7() {
  _has_bits_[2] |= 0x00000001u;
}
inline void telemetry::clear_has_railcurrentsensor7() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void telemetry::clear_railcurrentsensor7() {
  railcurrentsensor7_ = 0;
  clear_has_railcurrentsensor7();
}
inline ::google::protobuf::int32 telemetry::railcurrentsensor7() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railCurrentSensor7)
  return railcurrentsensor7_;
}
inline void telemetry::set_railcurrentsensor7(::google::protobuf::int32 value) {
  set_has_railcurrentsensor7();
  railcurrentsensor7_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railCurrentSensor7)
}

// optional int32 railCurrentSensor8 = 70;
inline bool telemetry::has_railcurrentsensor8() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void telemetry::set_has_railcurrentsensor8() {
  _has_bits_[2] |= 0x00000002u;
}
inline void telemetry::clear_has_railcurrentsensor8() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void telemetry::clear_railcurrentsensor8() {
  railcurrentsensor8_ = 0;
  clear_has_railcurrentsensor8();
}
inline ::google::protobuf::int32 telemetry::railcurrentsensor8() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railCurrentSensor8)
  return railcurrentsensor8_;
}
inline void telemetry::set_railcurrentsensor8(::google::protobuf::int32 value) {
  set_has_railcurrentsensor8();
  railcurrentsensor8_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railCurrentSensor8)
}

// optional int32 railCurrentFlag = 73;
inline bool telemetry::has_railcurrentflag() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void telemetry::set_has_railcurrentflag() {
  _has_bits_[2] |= 0x00000008u;
}
inline void telemetry::clear_has_railcurrentflag() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void telemetry::clear_railcurrentflag() {
  railcurrentflag_ = 0;
  clear_has_railcurrentflag();
}
inline ::google::protobuf::int32 telemetry::railcurrentflag() const {
  // @@protoc_insertion_point(field_get:pds.telemetry.railCurrentFlag)
  return railcurrentflag_;
}
inline void telemetry::set_railcurrentflag(::google::protobuf::int32 value) {
  set_has_railcurrentflag();
  railcurrentflag_ = value;
  // @@protoc_insertion_point(field_set:pds.telemetry.railCurrentFlag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pds

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PodTelem_2eproto
